"use strict";(self.webpackChunktradeanalyzer=self.webpackChunktradeanalyzer||[]).push([[3546],{5397:(t,e,n)=>{n.r(e),n.d(e,{default:()=>R});var r=n(7294),o=n(3935),i=n(5697),c=n.n(i),a=n(7458),u=n(5298),s=["invertAxis","invertSecondaryAxis"];function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function f(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function p(t,e){return p=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},p(t,e)}function y(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=v(t);if(e){var o=v(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return d(this,n)}}function d(t,e){if(e&&("object"===x(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return b(t)}function b(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function v(t){return v=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},v(t)}function m(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}function h(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function w(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?h(Object(n),!0).forEach((function(e){O(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):h(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function O(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function x(t){return x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},x(t)}var g="undefined"!=typeof window,j=g&&"CSS"in window&&"supports"in window.CSS&&CSS.supports("display","contents"),S=g&&"MutationObserver"in window;function C(t){return t[0].toUpperCase()+t.slice(1)}function P(t){if(t){for(var e=t.parentElement;e;){if(window.getComputedStyle(e).overflow.split(" ").every((function(t){return"auto"===t||"scroll"===t})))return e;e=e.parentElement}return document.documentElement}}function A(t){var e=t.axis,n=t.container,r=t.element,o=t.invertAxis,i=t.secondary,c=t.scrollContainer,s=t.spacing,l=window.getComputedStyle(r),f=n.parentElement,p=(0,a.Z)(f,c),y=(0,a.Z)(f,document.documentElement),d="x"===e,b=d?"left":"top",v=d?"right":"bottom",m=d?"width":"height",h="overflow".concat(C(b)),w="overflow".concat(C(v)),O="scroll".concat(C(b)),g=C(m),j="offset".concat(g),S="client".concat(g),P="min-".concat(m),A=c[j]-c[S],E="object"===x(s)?s[b]:s,R=-Math.max(p[h],y[h]+document.documentElement[O])-E,k="object"===x(s)?s[v]:s,M=-Math.max(p[w],y[w]-document.documentElement[O])-k-A;i&&(R+=f[S],M+=f[S]);var _=r[j];function D(){r.style[b]="auto",r.style[v]=i?"0":"100%"}function Z(){r.style[b]=i?"0":"100%",r.style[v]="auto"}function F(t,e){var n=_<=t;return n&&e(),n}function T(){return F(R,D)}function q(){return F(M,Z)}(o?T()||q():q()||T())||function(){var t=R>M,e=l[P]&&parseInt(l[P],10);function n(t){(0,u.Z)(!e||t>=e,"<Fit />'s child will not fit anywhere with its current ".concat(P," of ").concat(e,"px."));var n=Math.max(t,e||0);(0,u.Z)(!1,"<Fit />'s child needed to have its ".concat(m," decreased to ").concat(n,"px.")),r.style[m]="".concat(n,"px")}t?(n(R),D()):(n(M),Z())}()}function E(t){var e=t.invertAxis,n=t.invertSecondaryAxis,r=m(t,s);!function(t){A(t)}(w(w({},r),{},{invertAxis:e})),function(t){A(w(w({},t),{},{axis:"x"===t.axis?"y":"x",secondary:!0}))}(w(w({},r),{},{invertAxis:n}))}var R=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&p(t,e)}(a,t);var e,n,i,c=y(a);function a(){var t;l(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return O(b(t=c.call.apply(c,[this].concat(n))),"onMutation",(function(){t.fit()})),O(b(t),"mutationObserver",S&&new MutationObserver(t.onMutation)),O(b(t),"fit",(function(){var e=b(t),n=e.scrollContainer,r=e.container,o=e.element;if(o){var i=o.clientWidth,c=o.clientHeight;if(t.elementWidth!==i||t.elementHeight!==c){t.elementWidth=i,t.elementHeight=c;var a=r.parentElement;if(a){"absolute"!==window.getComputedStyle(o).position&&((0,u.Z)(!1,"<Fit />'s child does not have absolute position. You should apply `position: absolute` to it."),o.style.position="absolute");var s=window.getComputedStyle(a).position;"relative"!==s&&"absolute"!==s&&((0,u.Z)(!1,"<Fit />'s parent does not have relative position. You should apply `position: relative` to it."),a.style.position="relative");var l=t.props;E({container:r,element:o,invertAxis:l.invertAxis,invertSecondaryAxis:l.invertSecondaryAxis,axis:l.mainAxis,scrollContainer:n,spacing:l.spacing})}}}})),t}return e=a,(n=[{key:"componentDidMount",value:function(){if(!j){var t=(0,o.findDOMNode)(this);this.container=t,this.element=t,this.scrollContainer=P(t)}this.fit(),S&&this.mutationObserver.observe(this.element,{attributes:!0,attributeFilter:["class","style"]})}},{key:"render",value:function(){var t=this,e=this.props.children,n=r.Children.only(e);return j?r.createElement("span",{ref:function(e){t.container=e;var n=e&&e.firstChild;t.element=n,t.scrollContainer=P(n)},style:{display:"contents"}},n):n}}])&&f(e.prototype,n),i&&f(e,i),a}(r.Component);R.propTypes={children:c().node,invertAxis:c().bool,invertSecondaryAxis:c().bool,mainAxis:c().oneOf(["x","y"]),spacing:c().oneOfType([c().number,c().shape({bottom:c().number.isRequired,left:c().number.isRequired,right:c().number.isRequired,top:c().number.isRequired})])},R.defaultProps={mainAxis:"y",spacing:8}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";(self.webpackChunktradeanalyzer=self.webpackChunktradeanalyzer||[]).push([[4407],{3478:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(9585),o=n(7294),s=new WeakMap,a=function(e,t){if(e&&t){var n=s.get(t)||new Map;s.set(t,n);var r=n.get(e);return r||((r=t.matchMedia(e)).refCount=0,n.set(r.media,r)),r}};function u(e,t){void 0===t&&(t="undefined"==typeof window?void 0:window);var n=a(e,t),u=(0,o.useState)((function(){return!!n&&n.matches})),l=u[0],i=u[1];return(0,r.Z)((function(){var n=a(e,t);if(!n)return i(!1);var r=s.get(t),o=function(){i(n.matches)};return n.refCount++,n.addListener(o),o(),function(){n.removeListener(o),n.refCount--,n.refCount<=0&&(null==r||r.delete(n.media)),n=void 0}}),[e]),l}const l=function(e){var t=Object.keys(e);function n(e,t){return e===t?t:e?e+" and "+t:t}function r(n){var r=function(e){return t[Math.min(t.indexOf(e)+1,t.length-1)]}(n),o=e[r];return"(max-width: "+(o="number"==typeof o?o-.2+"px":"calc("+o+" - 0.2px)")+")"}return function(t,s,a){var l,i;"object"==typeof t?(l=t,a=s,s=!0):((i={})[t]=s=s||!0,l=i);var c=(0,o.useMemo)((function(){return Object.entries(l).reduce((function(t,o){var s,a=o[0],u=o[1];return"up"!==u&&!0!==u||(t=n(t,("number"==typeof(s=e[a])&&(s+="px"),"(min-width: "+s+")"))),"down"!==u&&!0!==u||(t=n(t,r(a))),t}),"")}),[JSON.stringify(l)]);return u(c,a)}}({xs:0,sm:576,md:768,lg:992,xl:1200,xxl:1400})},2092:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(7294);function o(){return(0,r.useState)(null)}},2029:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(7294);const o=function(e){var t=(0,r.useRef)(e);return(0,r.useEffect)((function(){t.current=e}),[e]),t}},8146:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(7294),o=n(2029);function s(e){var t=(0,o.Z)(e);return(0,r.useCallback)((function(){return t.current&&t.current.apply(t,arguments)}),[t])}},5111:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(7294),o=n(8146);function s(e,t,n,s){void 0===s&&(s=!1);var a=(0,o.Z)(n);(0,r.useEffect)((function(){var n="function"==typeof e?e():e;return n.addEventListener(t,a,s),function(){return n.removeEventListener(t,a,s)}}),[e])}},4357:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(7294);function o(){return(0,r.useReducer)((function(e){return!e}),!1)[1]}},9585:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(7294),o=void 0!==n.g&&n.g.navigator&&"ReactNative"===n.g.navigator.product;const s="undefined"!=typeof document||o?r.useLayoutEffect:r.useEffect},5654:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(7294),o=function(e){return e&&"function"!=typeof e?function(t){e.current=t}:e};const s=function(e,t){return(0,r.useMemo)((function(){return function(e,t){var n=o(e),r=o(t);return function(e){n&&n(e),r&&r(e)}}(e,t)}),[e,t])}},6454:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(7294);function o(){var e=(0,r.useRef)(!0),t=(0,r.useRef)((function(){return e.current}));return(0,r.useEffect)((function(){return e.current=!0,function(){e.current=!1}}),[]),t.current}},8833:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(7294);function o(e){var t=(0,r.useRef)(null);return(0,r.useEffect)((function(){t.current=e})),t.current}},3735:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7294),o=(n(2092),n(2029),n(8146));n(5111);n(6454),n(8833);n(9585),new WeakMap;var s=n(861),a=n(5893);const u=["onKeyDown"];const l=r.forwardRef(((e,t)=>{let{onKeyDown:n}=e,r=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,u);const[l]=(0,s.FT)(Object.assign({tagName:"a"},r)),i=(0,o.Z)((e=>{l.onKeyDown(e),null==n||n(e)}));return(c=r.href)&&"#"!==c.trim()&&"button"!==r.role?(0,a.jsx)("a",Object.assign({ref:t},r,{onKeyDown:n})):(0,a.jsx)("a",Object.assign({ref:t},r,l,{onKeyDown:i}));var c}));l.displayName="Anchor";const i=l},861:(e,t,n)=>{n.d(t,{FT:()=>a,ZP:()=>l});var r=n(7294),o=n(5893);const s=["as","disabled"];function a({tagName:e,disabled:t,href:n,target:r,rel:o,role:s,onClick:a,tabIndex:u=0,type:l}){e||(e=null!=n||null!=r||null!=o?"a":"button");const i={tagName:e};if("button"===e)return[{type:l||"button",disabled:t},i];const c=r=>{(t||"a"===e&&function(e){return!e||"#"===e.trim()}(n))&&r.preventDefault(),t?r.stopPropagation():null==a||a(r)};return"a"===e&&(n||(n="#"),t&&(n=void 0)),[{role:null!=s?s:"button",disabled:void 0,tabIndex:t?void 0:u,href:n,target:"a"===e?r:void 0,"aria-disabled":t||void 0,rel:"a"===e?o:void 0,onClick:c,onKeyDown:e=>{" "===e.key&&(e.preventDefault(),c(e))}},i]}const u=r.forwardRef(((e,t)=>{let{as:n,disabled:r}=e,u=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,s);const[l,{tagName:i}]=a(Object.assign({tagName:n,disabled:r},u));return(0,o.jsx)(i,Object.assign({},u,l,{ref:t}))}));u.displayName="Button";const l=u},2747:(e,t,n)=>{n.d(t,{$F:()=>o,PB:()=>r});function r(e){return`data-rr-ui-${e}`}function o(e){return`rrUi${e}`}},8534:(e,t,n)=>{n.d(t,{Z:()=>w});var r=n(930),o=n(9351),s=n(7294),a=n(8977),u=n(8833),l=n(4357),i=n(5111),c=n(8146),d=n(3577),f=n(3353),p=n(541),v=n(3910),m=n(7126),b=n(2747),g=n(2963),h=n(5893);function y(){const e=(0,l.Z)(),t=(0,s.useRef)(null),n=(0,s.useCallback)((n=>{t.current=n,e()}),[e]);return[t,n]}function Z({defaultShow:e,show:t,onSelect:n,onToggle:l,itemSelector:f=`* [${(0,b.PB)("dropdown-item")}]`,focusFirstItemOnShow:v,placement:Z="bottom-start",children:w}){const k=(0,g.Z)(),[x,O]=(0,a.$c)(t,e,l),[E,C]=y(),j=E.current,[D,R]=y(),M=D.current,P=(0,u.Z)(x),S=(0,s.useRef)(null),A=(0,s.useRef)(!1),K=(0,s.useContext)(m.Z),T=(0,s.useCallback)(((e,t,n=(null==t?void 0:t.type))=>{O(e,{originalEvent:t,source:n})}),[O]),N=(0,c.Z)(((e,t)=>{null==n||n(e,t),T(!1,t,"select"),t.isPropagationStopped()||null==K||K(e,t)})),B=(0,s.useMemo)((()=>({toggle:T,placement:Z,show:x,menuElement:j,toggleElement:M,setMenu:C,setToggle:R})),[T,Z,x,j,M,C,R]);j&&P&&!x&&(A.current=j.contains(j.ownerDocument.activeElement));const F=(0,c.Z)((()=>{M&&M.focus&&M.focus()})),I=(0,c.Z)((()=>{const e=S.current;let t=v;if(null==t&&(t=!(!E.current||!(0,p.bt)(E.current))&&"keyboard"),!1===t||"keyboard"===t&&!/^key.+$/.test(e))return;const n=(0,r.Z)(E.current,f)[0];n&&n.focus&&n.focus()}));(0,s.useEffect)((()=>{x?I():A.current&&(A.current=!1,F())}),[x,A,F,I]),(0,s.useEffect)((()=>{S.current=null}));const L=(e,t)=>{if(!E.current)return null;const n=(0,r.Z)(E.current,f);let o=n.indexOf(e)+t;return o=Math.max(0,Math.min(o,n.length)),n[o]};return(0,i.Z)((0,s.useCallback)((()=>k.document),[k]),"keydown",(e=>{var t,n;const{key:r}=e,s=e.target,a=null==(t=E.current)?void 0:t.contains(s),u=null==(n=D.current)?void 0:n.contains(s);if(/input|textarea/i.test(s.tagName)&&(" "===r||"Escape"!==r&&a||"Escape"===r&&"search"===s.type))return;if(!a&&!u)return;if(!("Tab"!==r||E.current&&x))return;S.current=e.type;const l={originalEvent:e,source:e.type};switch(r){case"ArrowUp":{const t=L(s,-1);return t&&t.focus&&t.focus(),void e.preventDefault()}case"ArrowDown":if(e.preventDefault(),x){const e=L(s,1);e&&e.focus&&e.focus()}else O(!0,l);return;case"Tab":(0,o.ZP)(s.ownerDocument,"keyup",(e=>{var t;("Tab"!==e.key||e.target)&&null!=(t=E.current)&&t.contains(e.target)||O(!1,l)}),{once:!0});break;case"Escape":"Escape"===r&&(e.preventDefault(),e.stopPropagation()),O(!1,l)}})),(0,h.jsx)(m.Z.Provider,{value:N,children:(0,h.jsx)(d.Z.Provider,{value:B,children:w})})}Z.displayName="Dropdown",Z.Menu=f.Z,Z.Toggle=p.ZP,Z.Item=v.Z;const w=Z},3577:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n(7294).createContext(null)},3910:(e,t,n)=>{n.d(t,{F:()=>d,Z:()=>p});var r=n(7294),o=n(8146),s=n(7126),a=n(6056),u=n(861),l=n(2747),i=n(5893);const c=["eventKey","disabled","onClick","active","as"];function d({key:e,href:t,active:n,disabled:u,onClick:i}){const c=(0,r.useContext)(s.Z),d=(0,r.useContext)(a.Z),{activeKey:f}=d||{},p=(0,s.h)(e,t),v=null==n&&null!=e?(0,s.h)(f)===p:n;return[{onClick:(0,o.Z)((e=>{u||(null==i||i(e),c&&!e.isPropagationStopped()&&c(p,e))})),"aria-disabled":u||void 0,"aria-selected":v,[(0,l.PB)("dropdown-item")]:""},{isActive:v}]}const f=r.forwardRef(((e,t)=>{let{eventKey:n,disabled:r,onClick:o,active:s,as:a=u.ZP}=e,l=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,c);const[f]=d({key:n,href:l.href,disabled:r,onClick:o,active:s});return(0,i.jsx)(a,Object.assign({},l,{ref:t},f))}));f.displayName="DropdownItem";const p=f},3353:(e,t,n)=>{n.d(t,{Z:()=>L,d:()=>F});var r=n(7294),o=n(2092),s=n(3577),a=n(8471),u=n(6454);const l=function(e){var t=(0,u.Z)();return[e[0],(0,r.useCallback)((function(n){if(t())return e[1](n)}),[t,e[1]])]};var i=n(6896),c=n(6531),d=n(2372),f=n(5228),p=n(9892),v=n(2122),m=n(7421),b=n(3920);const g=(0,n(8240).kZ)({defaultModifiers:[p.Z,m.Z,c.Z,d.Z,v.Z,f.Z,b.Z,i.Z]}),h=["enabled","placement","strategy","modifiers"];const y={name:"applyStyles",enabled:!1,phase:"afterWrite",fn:()=>{}},Z={name:"ariaDescribedBy",enabled:!0,phase:"afterWrite",effect:({state:e})=>()=>{const{reference:t,popper:n}=e.elements;if("removeAttribute"in t){const e=(t.getAttribute("aria-describedby")||"").split(",").filter((e=>e.trim()!==n.id));e.length?t.setAttribute("aria-describedby",e.join(",")):t.removeAttribute("aria-describedby")}},fn:({state:e})=>{var t;const{popper:n,reference:r}=e.elements,o=null==(t=n.getAttribute("role"))?void 0:t.toLowerCase();if(n.id&&"tooltip"===o&&"setAttribute"in r){const e=r.getAttribute("aria-describedby");if(e&&-1!==e.split(",").indexOf(n.id))return;r.setAttribute("aria-describedby",e?`${e},${n.id}`:n.id)}}},w=[];const k=function(e,t,n={}){let{enabled:o=!0,placement:s="bottom",strategy:u="absolute",modifiers:i=w}=n,c=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(n,h);const d=(0,r.useRef)(i),f=(0,r.useRef)(),p=(0,r.useCallback)((()=>{var e;null==(e=f.current)||e.update()}),[]),v=(0,r.useCallback)((()=>{var e;null==(e=f.current)||e.forceUpdate()}),[]),[m,b]=l((0,r.useState)({placement:s,update:p,forceUpdate:v,attributes:{},styles:{popper:{},arrow:{}}})),k=(0,r.useMemo)((()=>({name:"updateStateModifier",enabled:!0,phase:"write",requires:["computeStyles"],fn:({state:e})=>{const t={},n={};Object.keys(e.elements).forEach((r=>{t[r]=e.styles[r],n[r]=e.attributes[r]})),b({state:e,styles:t,attributes:n,update:p,forceUpdate:v,placement:e.placement})}})),[p,v,b]),x=(0,r.useMemo)((()=>((0,a.J)(d.current,i)||(d.current=i),d.current)),[i]);return(0,r.useEffect)((()=>{f.current&&o&&f.current.setOptions({placement:s,strategy:u,modifiers:[...x,k,y]})}),[u,s,k,o,x]),(0,r.useEffect)((()=>{if(o&&null!=e&&null!=t)return f.current=g(e,t,Object.assign({},c,{placement:s,strategy:u,modifiers:[...x,Z,k]})),()=>{null!=f.current&&(f.current.destroy(),f.current=void 0,b((e=>Object.assign({},e,{attributes:{},styles:{popper:{}}}))))}}),[o,e,t]),m};var x=n(424),O=n(3299),E=n(7216),C=n(8146),j=n(2473),D=n.n(j);const R=()=>{};const M=e=>e&&("current"in e?e.current:e),P={click:"mousedown",mouseup:"mousedown",pointerup:"pointerdown"};const S=function(e,t=R,{disabled:n,clickTrigger:o="click"}={}){const s=(0,r.useRef)(!1),a=(0,r.useRef)(!1),u=(0,r.useCallback)((t=>{const n=M(e);var r;D()(!!n,"ClickOutside captured a close event but does not have a ref to compare it to. useClickOutside(), should be passed a ref that resolves to a DOM node"),s.current=!n||!!((r=t).metaKey||r.altKey||r.ctrlKey||r.shiftKey)||!function(e){return 0===e.button}(t)||!!(0,x.Z)(n,t.target)||a.current,a.current=!1}),[e]),l=(0,C.Z)((t=>{const n=M(e);n&&(0,x.Z)(n,t.target)&&(a.current=!0)})),i=(0,C.Z)((e=>{s.current||t(e)}));(0,r.useEffect)((()=>{if(n||null==e)return;const t=(0,E.Z)(M(e));let r=(t.defaultView||window).event,s=null;P[o]&&(s=(0,O.Z)(t,P[o],l,!0));const a=(0,O.Z)(t,o,u,!0),c=(0,O.Z)(t,o,(e=>{e!==r?i(e):r=void 0}));let d=[];return"ontouchstart"in t.documentElement&&(d=[].slice.call(t.body.children).map((e=>(0,O.Z)(e,"mousemove",R)))),()=>{null==s||s(),a(),c(),d.forEach((e=>e()))}}),[e,n,o,u,l,i])};function A(e={}){return Array.isArray(e)?e:Object.keys(e).map((t=>(e[t].name=t,e[t])))}function K({enabled:e,enableEvents:t,placement:n,flip:r,offset:o,fixed:s,containerPadding:a,arrowElement:u,popperConfig:l={}}){var i,c,d,f;const p=function(e){const t={};return Array.isArray(e)?(null==e||e.forEach((e=>{t[e.name]=e})),t):e||t}(l.modifiers);return Object.assign({},l,{placement:n,enabled:e,strategy:s?"fixed":l.strategy,modifiers:A(Object.assign({},p,{eventListeners:{enabled:t},preventOverflow:Object.assign({},p.preventOverflow,{options:a?Object.assign({padding:a},null==(i=p.preventOverflow)?void 0:i.options):null==(c=p.preventOverflow)?void 0:c.options}),offset:{options:Object.assign({offset:o},null==(d=p.offset)?void 0:d.options)},arrow:Object.assign({},p.arrow,{enabled:!!u,options:Object.assign({},null==(f=p.arrow)?void 0:f.options,{element:u})}),flip:Object.assign({enabled:!!r},p.flip)}))})}var T=n(5893);const N=["children"];const B=()=>{};function F(e={}){const t=(0,r.useContext)(s.Z),[n,a]=(0,o.Z)(),u=(0,r.useRef)(!1),{flip:l,offset:i,rootCloseEvent:c,fixed:d=!1,placement:f,popperConfig:p={},enableEventListeners:v=!0,usePopper:m=!!t}=e,b=null==(null==t?void 0:t.show)?!!e.show:t.show;b&&!u.current&&(u.current=!0);const{placement:g,setMenu:h,menuElement:y,toggleElement:Z}=t||{},w=k(Z,y,K({placement:f||g||"bottom-start",enabled:m,enableEvents:null==v?b:v,offset:i,flip:l,fixed:d,arrowElement:n,popperConfig:p})),x=Object.assign({ref:h||B,"aria-labelledby":null==Z?void 0:Z.id},w.attributes.popper,{style:w.styles.popper}),O={show:b,placement:g,hasShown:u.current,toggle:null==t?void 0:t.toggle,popper:m?w:null,arrowProps:m?Object.assign({ref:a},w.attributes.arrow,{style:w.styles.arrow}):{}};return S(y,(e=>{null==t||t.toggle(!1,e)}),{clickTrigger:c,disabled:!b}),[x,O]}function I(e){let{children:t}=e,n=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,N);const[r,o]=F(n);return(0,T.jsx)(T.Fragment,{children:t(r,o)})}I.displayName="DropdownMenu",I.defaultProps={usePopper:!0};const L=I},541:(e,t,n)=>{n.d(t,{Jr:()=>i,ZP:()=>d,bt:()=>u});var r=n(7294),o=n(8831),s=n(3577),a=n(5893);const u=e=>{var t;return"menu"===(null==(t=e.getAttribute("role"))?void 0:t.toLowerCase())},l=()=>{};function i(){const e=(0,o.gP)(),{show:t=!1,toggle:n=l,setToggle:a,menuElement:i}=(0,r.useContext)(s.Z)||{},c=(0,r.useCallback)((e=>{n(!t,e)}),[t,n]),d={id:e,ref:a||l,onClick:c,"aria-expanded":!!t};return i&&u(i)&&(d["aria-haspopup"]=!0),[d,{show:t,toggle:n}]}function c({children:e}){const[t,n]=i();return(0,a.jsx)(a.Fragment,{children:e(t,n)})}c.displayName="DropdownToggle";const d=c},6401:(e,t,n)=>{n.d(t,{Z:()=>k});var r=n(9621),o=n(424),s=n(3004),a=n(3299),u=n(7294),l=n(3935),i=n(6454);function c(e){var t,n,r=(t=e,(n=(0,u.useRef)(t)).current=t,n);(0,u.useEffect)((function(){return function(){return r.current()}}),[])}var d=n(8833),f=n(8146),p=n(6039),v=n(7216),m=n(2963);const b=(e,t)=>{var n;return s.Z?null==e?(t||(0,v.Z)()).body:("function"==typeof e&&(e=e()),e&&"current"in e&&(e=e.current),null!=(n=e)&&n.nodeType&&e||null):null};var g=n(5893);const h=["show","role","className","style","children","backdrop","keyboard","onBackdropClick","onEscapeKeyDown","transition","backdropTransition","autoFocus","enforceFocus","restoreFocus","restoreFocusOptions","renderDialog","renderBackdrop","manager","container","onShow","onHide","onExit","onExited","onExiting","onEnter","onEntering","onEntered"];let y;function Z(e){const t=(0,m.Z)(),n=e||function(e){return y||(y=new p.Z({ownerDocument:null==e?void 0:e.document})),y}(t),r=(0,u.useRef)({dialog:null,backdrop:null});return Object.assign(r.current,{add:()=>n.add(r.current),remove:()=>n.remove(r.current),isTopModal:()=>n.isTopModal(r.current),setDialogRef:(0,u.useCallback)((e=>{r.current.dialog=e}),[]),setBackdropRef:(0,u.useCallback)((e=>{r.current.backdrop=e}),[])})}const w=(0,u.forwardRef)(((e,t)=>{let{show:n=!1,role:p="dialog",className:v,style:y,children:w,backdrop:k=!0,keyboard:x=!0,onBackdropClick:O,onEscapeKeyDown:E,transition:C,backdropTransition:j,autoFocus:D=!0,enforceFocus:R=!0,restoreFocus:M=!0,restoreFocusOptions:P,renderDialog:S,renderBackdrop:A=(e=>(0,g.jsx)("div",Object.assign({},e))),manager:K,container:T,onShow:N,onHide:B=(()=>{}),onExit:F,onExited:I,onExiting:L,onEnter:$,onEntering:W,onEntered:U}=e,q=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,h);const H=function(e,t){const n=(0,m.Z)(),[r,o]=(0,u.useState)((()=>b(e,null==n?void 0:n.document)));if(!r){const t=b(e);t&&o(t)}return(0,u.useEffect)((()=>{t&&r&&t(r)}),[t,r]),(0,u.useEffect)((()=>{const t=b(e);t!==r&&o(t)}),[e,r]),r}(T),J=Z(K),z=(0,i.Z)(),V=(0,d.Z)(n),[G,Q]=(0,u.useState)(!n),X=(0,u.useRef)(null);(0,u.useImperativeHandle)(t,(()=>J),[J]),s.Z&&!V&&n&&(X.current=(0,r.Z)()),C||n||G?n&&G&&Q(!1):Q(!0);const Y=(0,f.Z)((()=>{if(J.add(),oe.current=(0,a.Z)(document,"keydown",ne),re.current=(0,a.Z)(document,"focus",(()=>setTimeout(ee)),!0),N&&N(),D){const e=(0,r.Z)(document);J.dialog&&e&&!(0,o.Z)(J.dialog,e)&&(X.current=e,J.dialog.focus())}})),_=(0,f.Z)((()=>{var e;(J.remove(),null==oe.current||oe.current(),null==re.current||re.current(),M)&&(null==(e=X.current)||null==e.focus||e.focus(P),X.current=null)}));(0,u.useEffect)((()=>{n&&H&&Y()}),[n,H,Y]),(0,u.useEffect)((()=>{G&&_()}),[G,_]),c((()=>{_()}));const ee=(0,f.Z)((()=>{if(!R||!z()||!J.isTopModal())return;const e=(0,r.Z)();J.dialog&&e&&!(0,o.Z)(J.dialog,e)&&J.dialog.focus()})),te=(0,f.Z)((e=>{e.target===e.currentTarget&&(null==O||O(e),!0===k&&B())})),ne=(0,f.Z)((e=>{x&&27===e.keyCode&&J.isTopModal()&&(null==E||E(e),e.defaultPrevented||B())})),re=(0,u.useRef)(),oe=(0,u.useRef)(),se=(...e)=>{Q(!0),null==I||I(...e)},ae=C;if(!H||!(n||ae&&!G))return null;const ue=Object.assign({role:p,ref:J.setDialogRef,"aria-modal":"dialog"===p||void 0},q,{style:y,className:v,tabIndex:-1});let le=S?S(ue):(0,g.jsx)("div",Object.assign({},ue,{children:u.cloneElement(w,{role:"document"})}));ae&&(le=(0,g.jsx)(ae,{appear:!0,unmountOnExit:!0,in:!!n,onExit:F,onExiting:L,onExited:se,onEnter:$,onEntering:W,onEntered:U,children:le}));let ie=null;if(k){const e=j;ie=A({ref:J.setBackdropRef,onClick:te}),e&&(ie=(0,g.jsx)(e,{appear:!0,in:!!n,children:ie}))}return(0,g.jsx)(g.Fragment,{children:l.createPortal((0,g.jsxs)(g.Fragment,{children:[ie,le]}),H)})}));w.displayName="Modal";const k=Object.assign(w,{Manager:p.Z})},6039:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(3164);const o=(0,n(2747).PB)("modal-open");const s=class{constructor({ownerDocument:e,handleContainerOverflow:t=!0,isRTL:n=!1}={}){this.handleContainerOverflow=t,this.isRTL=n,this.modals=[],this.ownerDocument=e}getScrollbarWidth(){return function(e=document){const t=e.defaultView;return Math.abs(t.innerWidth-e.documentElement.clientWidth)}(this.ownerDocument)}getElement(){return(this.ownerDocument||document).body}setModalAttributes(e){}removeModalAttributes(e){}setContainerStyle(e){const t={overflow:"hidden"},n=this.isRTL?"paddingLeft":"paddingRight",s=this.getElement();e.style={overflow:s.style.overflow,[n]:s.style[n]},e.scrollBarWidth&&(t[n]=`${parseInt((0,r.Z)(s,n)||"0",10)+e.scrollBarWidth}px`),s.setAttribute(o,""),(0,r.Z)(s,t)}reset(){[...this.modals].forEach((e=>this.remove(e)))}removeContainerStyle(e){const t=this.getElement();t.removeAttribute(o),Object.assign(t.style,e.style)}add(e){let t=this.modals.indexOf(e);return-1!==t?t:(t=this.modals.length,this.modals.push(e),this.setModalAttributes(e),0!==t||(this.state={scrollBarWidth:this.getScrollbarWidth(),style:{}},this.handleContainerOverflow&&this.setContainerStyle(this.state)),t)}remove(e){const t=this.modals.indexOf(e);-1!==t&&(this.modals.splice(t,1),!this.modals.length&&this.handleContainerOverflow&&this.removeContainerStyle(this.state),this.removeModalAttributes(e))}isTopModal(e){return!!this.modals.length&&this.modals[this.modals.length-1]===e}}},5115:(e,t,n)=>{n.d(t,{Z:()=>g});var r=n(930),o=n(7294),s=n(4357),a=n(5654),u=n(6056),l=n(7126),i=n(6626),c=n(2747),d=n(3716),f=n(5893);const p=["as","onSelect","activeKey","role","onKeyDown"];const v=()=>{},m=(0,c.PB)("event-key"),b=o.forwardRef(((e,t)=>{let{as:n="div",onSelect:d,activeKey:b,role:g,onKeyDown:h}=e,y=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,p);const Z=(0,s.Z)(),w=(0,o.useRef)(!1),k=(0,o.useContext)(l.Z),x=(0,o.useContext)(i.Z);let O,E;x&&(g=g||"tablist",b=x.activeKey,O=x.getControlledId,E=x.getControllerId);const C=(0,o.useRef)(null),j=e=>{const t=C.current;if(!t)return null;const n=(0,r.Z)(t,`[${m}]:not([aria-disabled=true])`),o=t.querySelector("[aria-selected=true]");if(!o||o!==document.activeElement)return null;const s=n.indexOf(o);if(-1===s)return null;let a=s+e;return a>=n.length&&(a=0),a<0&&(a=n.length-1),n[a]},D=(e,t)=>{null!=e&&(null==d||d(e,t),null==k||k(e,t))};(0,o.useEffect)((()=>{if(C.current&&w.current){const e=C.current.querySelector(`[${m}][aria-selected=true]`);null==e||e.focus()}w.current=!1}));const R=(0,a.Z)(t,C);return(0,f.jsx)(l.Z.Provider,{value:D,children:(0,f.jsx)(u.Z.Provider,{value:{role:g,activeKey:(0,l.h)(b),getControlledId:O||v,getControllerId:E||v},children:(0,f.jsx)(n,Object.assign({},y,{onKeyDown:e=>{if(null==h||h(e),!x)return;let t;switch(e.key){case"ArrowLeft":case"ArrowUp":t=j(-1);break;case"ArrowRight":case"ArrowDown":t=j(1);break;default:return}t&&(e.preventDefault(),D(t.dataset[(0,c.$F)("EventKey")]||null,e),w.current=!0,Z())},ref:R,role:g}))})})}));b.displayName="Nav";const g=Object.assign(b,{Item:d.Z})},6056:(e,t,n)=>{n.d(t,{Z:()=>o});const r=n(7294).createContext(null);r.displayName="NavContext";const o=r},3716:(e,t,n)=>{n.d(t,{Z:()=>v,v:()=>f});var r=n(7294),o=n(8146),s=n(6056),a=n(7126),u=n(861),l=n(2747),i=n(6626),c=n(5893);const d=["as","active","eventKey"];function f({key:e,onClick:t,active:n,id:u,role:c,disabled:d}){const f=(0,r.useContext)(a.Z),p=(0,r.useContext)(s.Z),v=(0,r.useContext)(i.Z);let m=n;const b={role:c};if(p){c||"tablist"!==p.role||(b.role="tab");const t=p.getControllerId(null!=e?e:null),r=p.getControlledId(null!=e?e:null);b[(0,l.PB)("event-key")]=e,b.id=t||u,m=null==n&&null!=e?p.activeKey===e:n,!m&&(null!=v&&v.unmountOnExit||null!=v&&v.mountOnEnter)||(b["aria-controls"]=r)}return"tab"===b.role&&(b["aria-selected"]=m,m||(b.tabIndex=-1),d&&(b.tabIndex=-1,b["aria-disabled"]=!0)),b.onClick=(0,o.Z)((n=>{d||(null==t||t(n),null!=e&&f&&!n.isPropagationStopped()&&f(e,n))})),[b,{isActive:m}]}const p=r.forwardRef(((e,t)=>{let{as:n=u.ZP,active:r,eventKey:o}=e,s=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,d);const[i,p]=f(Object.assign({key:(0,a.h)(o,s.href),active:r},s));return i[(0,l.PB)("active")]=p.isActive,(0,c.jsx)(n,Object.assign({},s,i,{ref:t}))}));p.displayName="NavItem";const v=p},7126:(e,t,n)=>{n.d(t,{Z:()=>s,h:()=>o});var r=n(7294);const o=(e,t=null)=>null!=e?String(e):t||null,s=r.createContext(null)},6626:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n(7294).createContext(null)},2963:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(7294),o=n(3004);const s=(0,r.createContext)(o.Z?window:void 0);s.Provider;function a(){return(0,r.useContext)(s)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";(self.webpackChunktradeanalyzer=self.webpackChunktradeanalyzer||[]).push([[9993],{5391:(t,e,n)=>{e.Z=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.isImmutable,n=void 0===e?o.default:e,i=t.ignore,l=u.default.bind(null,n,i);return function(t){var e=t.getState,n=e(),o=l(n),u=void 0;return function(t){return function(i){n=e(),u=o.detectMutations(),o=l(n),(0,r.default)(!u.wasMutated,d,(u.path||[]).join("."));var s=t(i);return n=e(),u=o.detectMutations(),o=l(n),u.wasMutated&&(0,r.default)(!u.wasMutated,c,(u.path||[]).join("."),(0,a.default)(i)),s}}}};var r=i(n(1143)),a=i(n(4530)),o=i(n(8943)),u=i(n(1527));function i(t){return t&&t.__esModule?t:{default:t}}var d=["A state mutation was detected between dispatches, in the path `%s`.","This may cause incorrect behavior.","(http://redux.js.org/docs/Troubleshooting.html#never-mutate-reducer-arguments)"].join(" "),c=["A state mutation was detected inside a dispatch, in the path: `%s`.","Take a look at the reducer(s) handling the action %s.","(http://redux.js.org/docs/Troubleshooting.html#never-mutate-reducer-arguments)"].join(" ")},8943:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e.default=function(t){return"object"!==(void 0===t?"undefined":n(t))||null==t}},1527:(t,e)=>{function n(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=arguments[2],a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],o={value:r};if(!t(r))for(var u in o.children={},r){var i=a.concat(u);e.length&&-1!==e.indexOf(i.join("."))||(o.children[u]=n(t,e,r[u],i))}return o}function r(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments[2],a=arguments[3],o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[],i=n?n.value:void 0,d=i===a;if(o&&!d&&!Number.isNaN(a))return{wasMutated:!0,path:u};if(t(i)||t(a))return{wasMutated:!1};var c={};Object.keys(n.children).forEach((function(t){c[t]=!0})),Object.keys(a).forEach((function(t){c[t]=!0}));for(var l=Object.keys(c),s=0;s<l.length;s++){var f=l[s],h=u.concat(f);if(!e.length||-1===e.indexOf(h.join("."))){var v=r(t,e,n.children[f],a[f],d,h);if(v.wasMutated)return v}}return{wasMutated:!1}}Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,a){var o=n(t,e,a);return{detectMutations:function(){return r(t,e,o,a)}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
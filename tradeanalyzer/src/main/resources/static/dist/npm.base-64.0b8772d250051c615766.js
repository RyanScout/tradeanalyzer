/*! For license information please see npm.base-64.0b8772d250051c615766.js.LICENSE.txt */
(self.webpackChunktradeanalyzer=self.webpackChunktradeanalyzer||[]).push([[4714],{7501:function(r,t,e){var a;r=e.nmd(r),function(n){var c=t,o=(r&&r.exports,"object"==typeof e.g&&e.g);o.global!==o&&o.window;var h=function(r){this.message=r};(h.prototype=new Error).name="InvalidCharacterError";var d=function(r){throw new h(r)},i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",l=/[\t\n\f\r ]/g,s={encode:function(r){r=String(r),/[^\0-\xFF]/.test(r)&&d("The string to be encoded contains characters outside of the Latin1 range.");for(var t,e,a,n,c=r.length%3,o="",h=-1,l=r.length-c;++h<l;)t=r.charCodeAt(h)<<16,e=r.charCodeAt(++h)<<8,a=r.charCodeAt(++h),o+=i.charAt((n=t+e+a)>>18&63)+i.charAt(n>>12&63)+i.charAt(n>>6&63)+i.charAt(63&n);return 2==c?(t=r.charCodeAt(h)<<8,e=r.charCodeAt(++h),o+=i.charAt((n=t+e)>>10)+i.charAt(n>>4&63)+i.charAt(n<<2&63)+"="):1==c&&(n=r.charCodeAt(h),o+=i.charAt(n>>2)+i.charAt(n<<4&63)+"=="),o},decode:function(r){var t=(r=String(r).replace(l,"")).length;t%4==0&&(t=(r=r.replace(/==?$/,"")).length),(t%4==1||/[^+a-zA-Z0-9/]/.test(r))&&d("Invalid character: the string to be decoded is not correctly encoded.");for(var e,a,n=0,c="",o=-1;++o<t;)a=i.indexOf(r.charAt(o)),e=n%4?64*e+a:a,n++%4&&(c+=String.fromCharCode(255&e>>(-2*n&6)));return c},version:"1.0.0"};void 0===(a=function(){return s}.call(t,e,t,r))||(r.exports=a)}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";(self.webpackChunktradeanalyzer=self.webpackChunktradeanalyzer||[]).push([[4774],{4322:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=p;var r=c(n(7294)),a=c(n(5697)),o=n(342),u=c(n(8528)),l=n(7113),i=n(6245),f=["maxDate","minDate","month","year"];function c(e){return e&&e.__esModule?e:{default:e}}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s.apply(this,arguments)}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}function p(e){var t=e.maxDate,n=e.minDate,a=e.month,l=e.year,c=d(e,f),p=a?(0,o.getDaysInMonth)(new Date(l,a-1,1)):31;function y(e){return e&&l===(0,o.getYear)(e).toString()&&a===(0,o.getMonthHuman)(e).toString()}var m=(0,i.safeMin)(p,y(t)&&(0,o.getDate)(t)),b=(0,i.safeMax)(1,y(n)&&(0,o.getDate)(n));return r.default.createElement(u.default,s({max:m,min:b,name:"day"},c))}p.propTypes={ariaLabel:a.default.string,className:a.default.string.isRequired,disabled:a.default.bool,inputRef:l.isRef,maxDate:l.isMaxDate,minDate:l.isMinDate,month:a.default.string,onChange:a.default.func,onKeyDown:a.default.func,onKeyUp:a.default.func,placeholder:a.default.string,required:a.default.bool,showLeadingZeros:a.default.bool,value:a.default.string,year:a.default.string}},8528:(e,t,n)=>{function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=g;var a=s(n(7294)),o=s(n(5697)),u=s(n(9624)),l=s(n(2324)),i=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var n=c(t);if(n&&n.has(e))return n.get(e);var a={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var l=o?Object.getOwnPropertyDescriptor(e,u):null;l&&(l.get||l.set)?Object.defineProperty(a,u,l):a[u]=e[u]}a.default=e,n&&n.set(e,a);return a}(n(5174)),f=n(7113);function c(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(c=function(e){return e?n:t})(e)}function s(e){return e&&e.__esModule?e:{default:e}}var d="undefined"!=typeof window&&/(MSIE|Trident\/|Edge\/)/.test(window.navigator.userAgent),p="undefined"!=typeof window&&/Firefox/.test(window.navigator.userAgent);function y(e){var t=e.target;d?requestAnimationFrame((function(){return t.select()})):t.select()}function m(e){if(document.fonts){var t=(0,i.getFontShorthand)(e);if(t)document.fonts.check(t)||document.fonts.addEventListener("loadingdone",(function(){(0,i.default)(e)}))}}function b(e){return function(t){if(!p){var n=t.key,r=t.target,a=r.value,o=1===n.length&&/\d/.test(n),u=function(e){return e&&"selectionStart"in e&&null!==e.selectionStart?e.value.slice(e.selectionStart,e.selectionEnd):"getSelection"in window?window.getSelection().toString():null}(r);o&&(u||a.length<e)||t.preventDefault()}}}function g(e){var t=e.ariaLabel,n=e.autoFocus,r=e.className,o=e.disabled,f=e.inputRef,c=e.max,s=e.min,d=e.name,p=e.nameForClass,g=e.onChange,v=e.onKeyDown,h=e.onKeyUp,O=e.placeholder,w=void 0===O?"--":O,M=e.required,D=e.showLeadingZeros,S=e.step,j=e.value,x=D&&j&&j<10&&("0"===j||!j.toString().startsWith("0")),_=c?c.toString().length:null;return[x&&a.default.createElement("span",{key:"leadingZero",className:"".concat(r,"__leadingZero")},"0"),a.default.createElement("input",{key:"input","aria-label":t,autoComplete:"off",autoFocus:n,className:(0,u.default)("".concat(r,"__input"),"".concat(r,"__").concat(p||d),x&&"".concat(r,"__input--hasLeadingZero")),"data-input":"true",disabled:o,inputMode:"numeric",max:c,min:s,name:d,onChange:g,onFocus:y,onKeyDown:v,onKeyPress:b(_),onKeyUp:function(e){(0,i.default)(e.target),h&&h(e)},placeholder:w,ref:(0,l.default)(i.default,m,f),required:M,step:S,type:"number",value:null!==j?j:""})]}g.propTypes={ariaLabel:o.default.string,autoFocus:o.default.bool,className:o.default.string.isRequired,disabled:o.default.bool,inputRef:f.isRef,max:o.default.number,min:o.default.number,name:o.default.string,nameForClass:o.default.string,onChange:o.default.func,onKeyDown:o.default.func,onKeyUp:o.default.func,placeholder:o.default.string,required:o.default.bool,showLeadingZeros:o.default.bool,step:o.default.number,value:o.default.string}},629:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=p;var r=c(n(7294)),a=c(n(5697)),o=n(342),u=c(n(8528)),l=n(7113),i=n(6245),f=["maxDate","minDate","year"];function c(e){return e&&e.__esModule?e:{default:e}}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s.apply(this,arguments)}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}function p(e){var t=e.maxDate,n=e.minDate,a=e.year,l=d(e,f);function c(e){return e&&a===(0,o.getYear)(e).toString()}var p=(0,i.safeMin)(12,c(t)&&(0,o.getMonthHuman)(t)),y=(0,i.safeMax)(1,c(n)&&(0,o.getMonthHuman)(n));return r.default.createElement(u.default,s({max:p,min:y,name:"month"},l))}p.propTypes={ariaLabel:a.default.string,className:a.default.string.isRequired,disabled:a.default.bool,inputRef:l.isRef,maxDate:l.isMaxDate,minDate:l.isMinDate,onChange:a.default.func,onKeyDown:a.default.func,onKeyUp:a.default.func,placeholder:a.default.string,required:a.default.bool,showLeadingZeros:a.default.bool,value:a.default.string,year:a.default.string}},939:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=b;var r=s(n(7294)),a=s(n(5697)),o=s(n(9624)),u=n(342),l=n(2443),i=n(7113),f=n(6245),c=["ariaLabel","className","inputRef","locale","maxDate","minDate","placeholder","short","value","year"];function s(e){return e&&e.__esModule?e:{default:e}}function d(){return d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},d.apply(this,arguments)}function p(e){return function(e){if(Array.isArray(e))return y(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return y(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return y(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function y(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function m(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}function b(e){var t=e.ariaLabel,n=e.className,a=e.inputRef,i=e.locale,s=e.maxDate,y=e.minDate,b=e.placeholder,g=void 0===b?"--":b,v=e.short,h=e.value,O=e.year,w=m(e,c);function M(e){return e&&O===(0,u.getYear)(e).toString()}var D=(0,f.safeMin)(12,M(s)&&(0,u.getMonthHuman)(s)),S=(0,f.safeMax)(1,M(y)&&(0,u.getMonthHuman)(y)),j=p(Array(12)).map((function(e,t){return new Date(2019,t,1)})),x="month",_=v?l.formatShortMonth:l.formatMonth;return r.default.createElement("select",d({"aria-label":t,className:(0,o.default)("".concat(n,"__input"),"".concat(n,"__").concat(x)),"data-input":"true","data-select":"true",name:x,ref:a,value:null!==h?h:""},w),!h&&r.default.createElement("option",{value:""},g),j.map((function(e){var t=(0,u.getMonthHuman)(e),n=t<S||t>D;return r.default.createElement("option",{key:t,disabled:n,value:t},_(i,e))})))}b.propTypes={ariaLabel:a.default.string,className:a.default.string.isRequired,disabled:a.default.bool,inputRef:i.isRef,locale:a.default.string,maxDate:i.isMaxDate,minDate:i.isMinDate,onChange:a.default.func,onKeyDown:a.default.func,onKeyUp:a.default.func,placeholder:a.default.string,required:a.default.bool,short:a.default.bool,value:a.default.string,year:a.default.string}},6931:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=p;var r=c(n(7294)),a=c(n(5697)),o=n(342),u=c(n(8528)),l=n(7113),i=n(6245),f=["maxDate","minDate","placeholder","valueType"];function c(e){return e&&e.__esModule?e:{default:e}}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s.apply(this,arguments)}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}function p(e){var t=e.maxDate,n=e.minDate,a=e.placeholder,l=void 0===a?"----":a,c=e.valueType,p=d(e,f),y=(0,i.safeMin)(275760,t&&(0,o.getYear)(t)),m=(0,i.safeMax)(1,n&&(0,o.getYear)(n)),b="century"===c?10:1;return r.default.createElement(u.default,s({max:y,min:m,name:"year",placeholder:l,step:b},p))}p.propTypes={ariaLabel:a.default.string,className:a.default.string.isRequired,disabled:a.default.bool,inputRef:l.isRef,maxDate:l.isMaxDate,minDate:l.isMinDate,onChange:a.default.func,onKeyDown:a.default.func,onKeyUp:a.default.func,placeholder:a.default.string,required:a.default.bool,value:a.default.string,valueType:l.isValueType}},2443:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.formatShortMonth=t.formatMonth=void 0,t.getFormatter=u;var r,a=(r=n(5781))&&r.__esModule?r:{default:r};var o=new Map;function u(e){return function(t,n){var r=t||(0,a.default)();o.has(r)||o.set(r,new Map);var u=o.get(r);return u.has(e)||u.set(e,new Intl.DateTimeFormat(r,e).format),u.get(e)(n)}}function l(e){return function(t,n){return u(e)(t,function(e){var t=new Date(e);return new Date(t.setHours(12))}(n))}}var i=l({month:"long"});t.formatMonth=i;var f=l({month:"short"});t.formatShortMonth=f},7113:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isValueType=t.isRef=t.isMinDate=t.isMaxDate=void 0;var r,a=(r=n(5697))&&r.__esModule?r:{default:r};function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var l,i=[].concat(function(e){if(Array.isArray(e))return u(e)}(l=["century","decade","year","month"].slice(1))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(l)||function(e,t){if(e){if("string"==typeof e)return u(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?u(e,t):void 0}}(l)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),["day"]),f=a.default.oneOf(i);t.isValueType=f;t.isMinDate=function(e,t,n){var r=e[t];if(!r)return null;if(!(r instanceof Date))return new Error("Invalid prop `".concat(t,"` of type `").concat(o(r),"` supplied to `").concat(n,"`, expected instance of `Date`."));var a=e.maxDate;return a&&r>a?new Error("Invalid prop `".concat(t,"` of type `").concat(o(r),"` supplied to `").concat(n,"`, minDate cannot be larger than maxDate.")):null};t.isMaxDate=function(e,t,n){var r=e[t];if(!r)return null;if(!(r instanceof Date))return new Error("Invalid prop `".concat(t,"` of type `").concat(o(r),"` supplied to `").concat(n,"`, expected instance of `Date`."));var a=e.minDate;return a&&r<a?new Error("Invalid prop `".concat(t,"` of type `").concat(o(r),"` supplied to `").concat(n,"`, maxDate cannot be smaller than minDate.")):null};var c=a.default.oneOfType([a.default.func,a.default.shape({current:a.default.any})]);t.isRef=c},6245:(e,t)=>{function n(e){return function(e){if(Array.isArray(e))return r(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function a(e){return null!==e&&!1!==e&&!Number.isNaN(Number(e))}Object.defineProperty(t,"__esModule",{value:!0}),t.between=function(e,t,n){if(t&&t>e)return t;if(n&&n<e)return n;return e},t.safeMax=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return Math.max.apply(Math,n(t.filter(a)))},t.safeMin=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return Math.min.apply(Math,n(t.filter(a)))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
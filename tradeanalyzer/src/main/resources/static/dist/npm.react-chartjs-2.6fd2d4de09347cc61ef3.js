"use strict";(self.webpackChunktradeanalyzer=self.webpackChunktradeanalyzer||[]).push([[5440],{5376:(e,t,n)=>{n.d(t,{$Q:()=>b,kL:()=>i,x1:()=>p});var r=n(7294),s=n(2181);const a="label";function c(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function u(e,t){e.labels=t}function l(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a;const r=[];e.datasets=t.map((t=>{const s=e.datasets.find((e=>e[n]===t[n]));return s&&t.data&&!r.includes(s)?(r.push(s),Object.assign(s,t),s):{...t}}))}function f(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a;const n={labels:[],datasets:[]};return u(n,e.labels),l(n,e.datasets,t),n}function o(e,t){let{height:n=150,width:a=300,redraw:o=!1,datasetIdKey:i,type:d,data:p,options:b,plugins:g=[],fallbackContent:h,updateMode:k,...w}=e;const y=(0,r.useRef)(null),E=(0,r.useRef)(),m=()=>{y.current&&(E.current=new s.kL(y.current,{type:d,data:f(p,i),options:b&&{...b},plugins:g}),c(t,E.current))},v=()=>{c(t,null),E.current&&(E.current.destroy(),E.current=null)};return(0,r.useEffect)((()=>{var e,t;!o&&E.current&&b&&(e=E.current,t=b,Object.assign(e.options,t))}),[o,b]),(0,r.useEffect)((()=>{!o&&E.current&&u(E.current.config.data,p.labels)}),[o,p.labels]),(0,r.useEffect)((()=>{!o&&E.current&&p.datasets&&l(E.current.config.data,p.datasets,i)}),[o,p.datasets]),(0,r.useEffect)((()=>{E.current&&(o?(v(),setTimeout(m)):E.current.update(k))}),[o,b,p.labels,p.datasets,k]),(0,r.useEffect)((()=>{E.current&&(v(),setTimeout(m))}),[d]),(0,r.useEffect)((()=>(m(),()=>v())),[]),r.createElement("canvas",Object.assign({ref:y,role:"img",height:n,width:a},w),h)}const i=(0,r.forwardRef)(o);function d(e,t){return s.kL.register(t),(0,r.forwardRef)(((t,n)=>r.createElement(i,Object.assign({},t,{ref:n,type:e}))))}const p=d("line",s.ST),b=d("bar",s.vn)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
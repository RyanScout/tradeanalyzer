"use strict";(self.webpackChunktradeanalyzer=self.webpackChunktradeanalyzer||[]).push([[2591],{8240:(e,t,n)=>{n.d(t,{kZ:()=>b});var r=n(400),o=n(2163),i=n(2057),a=n(2556);var s=n(6333),f=n(4063),c=n(7252),p=n(611),u=n(138);function d(e,t,n){void 0===n&&(n=!1);var d,l,v=(0,a.Re)(t),h=(0,a.Re)(t)&&function(e){var t=e.getBoundingClientRect(),n=(0,u.NM)(t.width)/e.offsetWidth||1,r=(0,u.NM)(t.height)/e.offsetHeight||1;return 1!==n||1!==r}(t),m=(0,c.Z)(t),Z=(0,r.Z)(e,h),g={scrollLeft:0,scrollTop:0},y={x:0,y:0};return(v||!v&&!n)&&(("body"!==(0,s.Z)(t)||(0,p.Z)(m))&&(g=(d=t)!==(0,i.Z)(d)&&(0,a.Re)(d)?{scrollLeft:(l=d).scrollLeft,scrollTop:l.scrollTop}:(0,o.Z)(d)),(0,a.Re)(t)?((y=(0,r.Z)(t,!0)).x+=t.clientLeft,y.y+=t.clientTop):m&&(y.x=(0,f.Z)(m))),{x:Z.left+g.scrollLeft-y.x,y:Z.top+g.scrollTop-y.y,width:Z.width,height:Z.height}}var l=n(583),v=n(3624),h=n(3779),m=n(7701);function Z(e){var t=new Map,n=new Set,r=[];function o(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var r=t.get(e);r&&o(r)}})),r.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||o(e)})),r}var g={placement:"bottom",modifiers:[],strategy:"absolute"};function y(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function b(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,r=void 0===n?[]:n,o=t.defaultOptions,i=void 0===o?g:o;return function(e,t,n){void 0===n&&(n=i);var o,s,f={placement:"bottom",orderedModifiers:[],options:Object.assign({},g,i),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},c=[],p=!1,u={state:f,setOptions:function(n){var o="function"==typeof n?n(f.options):n;b(),f.options=Object.assign({},i,f.options,o),f.scrollParents={reference:(0,a.kK)(e)?(0,v.Z)(e):e.contextElement?(0,v.Z)(e.contextElement):[],popper:(0,v.Z)(t)};var s=function(e){var t=Z(e);return m.xs.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}(function(e){var t=e.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{});return Object.keys(t).map((function(e){return t[e]}))}([].concat(r,f.options.modifiers)));return f.orderedModifiers=s.filter((function(e){return e.enabled})),f.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,r=void 0===n?{}:n,o=e.effect;if("function"==typeof o){var i=o({state:f,name:t,instance:u,options:r}),a=function(){};c.push(i||a)}})),u.update()},forceUpdate:function(){if(!p){var e=f.elements,t=e.reference,n=e.popper;if(y(t,n)){f.rects={reference:d(t,(0,h.Z)(n),"fixed"===f.options.strategy),popper:(0,l.Z)(n)},f.reset=!1,f.placement=f.options.placement,f.orderedModifiers.forEach((function(e){return f.modifiersData[e.name]=Object.assign({},e.data)}));for(var r=0;r<f.orderedModifiers.length;r++)if(!0!==f.reset){var o=f.orderedModifiers[r],i=o.fn,a=o.options,s=void 0===a?{}:a,c=o.name;"function"==typeof i&&(f=i({state:f,options:s,name:c,instance:u})||f)}else f.reset=!1,r=-1}}},update:(o=function(){return new Promise((function(e){u.forceUpdate(),e(f)}))},function(){return s||(s=new Promise((function(e){Promise.resolve().then((function(){s=void 0,e(o())}))}))),s}),destroy:function(){b(),p=!0}};if(!y(e,t))return u;function b(){c.forEach((function(e){return e()})),c=[]}return u.setOptions(n).then((function(e){!p&&n.onFirstUpdate&&n.onFirstUpdate(e)})),u}}},4985:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(2556);function o(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&(0,r.Zq)(n)){var o=t;do{if(o&&e.isSameNode(o))return!0;o=o.parentNode||o.host}while(o)}return!1}},400:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(2556),o=n(138);function i(e,t){void 0===t&&(t=!1);var n=e.getBoundingClientRect(),i=1,a=1;if((0,r.Re)(e)&&t){var s=e.offsetHeight,f=e.offsetWidth;f>0&&(i=(0,o.NM)(n.width)/f||1),s>0&&(a=(0,o.NM)(n.height)/s||1)}return{width:n.width/i,height:n.height/a,top:n.top/a,right:n.right/i,bottom:n.bottom/a,left:n.left/i,x:n.left/i,y:n.top/a}}},3062:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(2057);function o(e){return(0,r.Z)(e).getComputedStyle(e)}},7252:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(2556);function o(e){return(((0,r.kK)(e)?e.ownerDocument:e.document)||window.document).documentElement}},583:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(400);function o(e){var t=(0,r.Z)(e),n=e.offsetWidth,o=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-o)<=1&&(o=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:o}}},6333:(e,t,n)=>{function r(e){return e?(e.nodeName||"").toLowerCase():null}n.d(t,{Z:()=>r})},3779:(e,t,n)=>{n.d(t,{Z:()=>p});var r=n(2057),o=n(6333),i=n(3062),a=n(2556);function s(e){return["table","td","th"].indexOf((0,o.Z)(e))>=0}var f=n(5923);function c(e){return(0,a.Re)(e)&&"fixed"!==(0,i.Z)(e).position?e.offsetParent:null}function p(e){for(var t=(0,r.Z)(e),n=c(e);n&&s(n)&&"static"===(0,i.Z)(n).position;)n=c(n);return n&&("html"===(0,o.Z)(n)||"body"===(0,o.Z)(n)&&"static"===(0,i.Z)(n).position)?t:n||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&(0,a.Re)(e)&&"fixed"===(0,i.Z)(e).position)return null;var n=(0,f.Z)(e);for((0,a.Zq)(n)&&(n=n.host);(0,a.Re)(n)&&["html","body"].indexOf((0,o.Z)(n))<0;){var r=(0,i.Z)(n);if("none"!==r.transform||"none"!==r.perspective||"paint"===r.contain||-1!==["transform","perspective"].indexOf(r.willChange)||t&&"filter"===r.willChange||t&&r.filter&&"none"!==r.filter)return n;n=n.parentNode}return null}(e)||t}},5923:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(6333),o=n(7252),i=n(2556);function a(e){return"html"===(0,r.Z)(e)?e:e.assignedSlot||e.parentNode||((0,i.Zq)(e)?e.host:null)||(0,o.Z)(e)}},2057:(e,t,n)=>{function r(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}n.d(t,{Z:()=>r})},2163:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(2057);function o(e){var t=(0,r.Z)(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}},4063:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(400),o=n(7252),i=n(2163);function a(e){return(0,r.Z)((0,o.Z)(e)).left+(0,i.Z)(e).scrollLeft}},2556:(e,t,n)=>{n.d(t,{Re:()=>i,Zq:()=>a,kK:()=>o});var r=n(2057);function o(e){return e instanceof(0,r.Z)(e).Element||e instanceof Element}function i(e){return e instanceof(0,r.Z)(e).HTMLElement||e instanceof HTMLElement}function a(e){return"undefined"!=typeof ShadowRoot&&(e instanceof(0,r.Z)(e).ShadowRoot||e instanceof ShadowRoot)}},611:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(3062);function o(e){var t=(0,r.Z)(e),n=t.overflow,o=t.overflowX,i=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+i+o)}},3624:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(5923),o=n(611),i=n(6333),a=n(2556);function s(e){return["html","body","#document"].indexOf((0,i.Z)(e))>=0?e.ownerDocument.body:(0,a.Re)(e)&&(0,o.Z)(e)?e:s((0,r.Z)(e))}var f=n(2057);function c(e,t){var n;void 0===t&&(t=[]);var i=s(e),a=i===(null==(n=e.ownerDocument)?void 0:n.body),p=(0,f.Z)(i),u=a?[p].concat(p.visualViewport||[],(0,o.Z)(i)?i:[]):i,d=t.concat(u);return a?d:d.concat(c((0,r.Z)(u)))}},7701:(e,t,n)=>{n.d(t,{BL:()=>c,Ct:()=>m,F2:()=>i,I:()=>o,Pj:()=>d,YP:()=>v,bw:()=>h,d7:()=>s,k5:()=>l,mv:()=>f,t$:()=>a,ut:()=>p,we:()=>r,xs:()=>Z,zV:()=>u});var r="top",o="bottom",i="right",a="left",s="auto",f=[r,o,i,a],c="start",p="end",u="clippingParents",d="viewport",l="popper",v="reference",h=f.reduce((function(e,t){return e.concat([t+"-"+c,t+"-"+p])}),[]),m=[].concat(f,[s]).reduce((function(e,t){return e.concat([t,t+"-"+c,t+"-"+p])}),[]),Z=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"]},6896:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(6206),o=n(583),i=n(4985),a=n(3779),s=n(1516),f=n(7516),c=n(3293),p=n(3706),u=n(7701);const d={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,i=e.name,d=e.options,l=n.elements.arrow,v=n.modifiersData.popperOffsets,h=(0,r.Z)(n.placement),m=(0,s.Z)(h),Z=[u.t$,u.F2].indexOf(h)>=0?"height":"width";if(l&&v){var g=function(e,t){return e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e,(0,c.Z)("number"!=typeof e?e:(0,p.Z)(e,u.mv))}(d.padding,n),y=(0,o.Z)(l),b="y"===m?u.we:u.t$,w="y"===m?u.I:u.F2,x=n.rects.reference[Z]+n.rects.reference[m]-v[m]-n.rects.popper[Z],O=v[m]-n.rects.reference[m],k=(0,a.Z)(l),j=k?"y"===m?k.clientHeight||0:k.clientWidth||0:0,E=x/2-O/2,D=g[b],R=j-y[Z]-g[w],A=j/2-y[Z]/2+E,L=(0,f.u)(D,A,R),M=m;n.modifiersData[i]=((t={})[M]=L,t.centerOffset=L-A,t)}},effect:function(e){var t=e.state,n=e.options.element,r=void 0===n?"[data-popper-arrow]":n;null!=r&&("string"!=typeof r||(r=t.elements.popper.querySelector(r)))&&(0,i.Z)(t.elements.popper,r)&&(t.elements.arrow=r)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]}},6531:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(7701),o=n(3779),i=n(2057),a=n(7252),s=n(3062),f=n(6206),c=n(4943),p=n(138),u={top:"auto",right:"auto",bottom:"auto",left:"auto"};function d(e){var t,n=e.popper,f=e.popperRect,c=e.placement,d=e.variation,l=e.offsets,v=e.position,h=e.gpuAcceleration,m=e.adaptive,Z=e.roundOffsets,g=e.isFixed,y=l.x,b=void 0===y?0:y,w=l.y,x=void 0===w?0:w,O="function"==typeof Z?Z({x:b,y:x}):{x:b,y:x};b=O.x,x=O.y;var k=l.hasOwnProperty("x"),j=l.hasOwnProperty("y"),E=r.t$,D=r.we,R=window;if(m){var A=(0,o.Z)(n),L="clientHeight",M="clientWidth";if(A===(0,i.Z)(n)&&(A=(0,a.Z)(n),"static"!==(0,s.Z)(A).position&&"absolute"===v&&(L="scrollHeight",M="scrollWidth")),c===r.we||(c===r.t$||c===r.F2)&&d===r.ut)D=r.I,x-=(g&&A===R&&R.visualViewport?R.visualViewport.height:A[L])-f.height,x*=h?1:-1;if(c===r.t$||(c===r.we||c===r.I)&&d===r.ut)E=r.F2,b-=(g&&A===R&&R.visualViewport?R.visualViewport.width:A[M])-f.width,b*=h?1:-1}var F,P=Object.assign({position:v},m&&u),B=!0===Z?function(e){var t=e.x,n=e.y,r=window.devicePixelRatio||1;return{x:(0,p.NM)(t*r)/r||0,y:(0,p.NM)(n*r)/r||0}}({x:b,y:x}):{x:b,y:x};return b=B.x,x=B.y,h?Object.assign({},P,((F={})[D]=j?"0":"",F[E]=k?"0":"",F.transform=(R.devicePixelRatio||1)<=1?"translate("+b+"px, "+x+"px)":"translate3d("+b+"px, "+x+"px, 0)",F)):Object.assign({},P,((t={})[D]=j?x+"px":"",t[E]=k?b+"px":"",t.transform="",t))}const l={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,r=n.gpuAcceleration,o=void 0===r||r,i=n.adaptive,a=void 0===i||i,s=n.roundOffsets,p=void 0===s||s,u={placement:(0,f.Z)(t.placement),variation:(0,c.Z)(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:o,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,d(Object.assign({},u,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:a,roundOffsets:p})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,d(Object.assign({},u,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:p})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}}},2372:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(2057),o={passive:!0};const i={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,i=e.options,a=i.scroll,s=void 0===a||a,f=i.resize,c=void 0===f||f,p=(0,r.Z)(t.elements.popper),u=[].concat(t.scrollParents.reference,t.scrollParents.popper);return s&&u.forEach((function(e){e.addEventListener("scroll",n.update,o)})),c&&p.addEventListener("resize",n.update,o),function(){s&&u.forEach((function(e){e.removeEventListener("scroll",n.update,o)})),c&&p.removeEventListener("resize",n.update,o)}},data:{}}},5228:(e,t,n)=>{n.d(t,{Z:()=>u});var r={left:"right",right:"left",bottom:"top",top:"bottom"};function o(e){return e.replace(/left|right|bottom|top/g,(function(e){return r[e]}))}var i=n(6206),a={start:"end",end:"start"};function s(e){return e.replace(/start|end/g,(function(e){return a[e]}))}var f=n(9966),c=n(4943),p=n(7701);const u={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name;if(!t.modifiersData[r]._skip){for(var a=n.mainAxis,u=void 0===a||a,d=n.altAxis,l=void 0===d||d,v=n.fallbackPlacements,h=n.padding,m=n.boundary,Z=n.rootBoundary,g=n.altBoundary,y=n.flipVariations,b=void 0===y||y,w=n.allowedAutoPlacements,x=t.options.placement,O=(0,i.Z)(x),k=v||(O===x||!b?[o(x)]:function(e){if((0,i.Z)(e)===p.d7)return[];var t=o(e);return[s(e),t,s(t)]}(x)),j=[x].concat(k).reduce((function(e,n){return e.concat((0,i.Z)(n)===p.d7?function(e,t){void 0===t&&(t={});var n=t,r=n.placement,o=n.boundary,a=n.rootBoundary,s=n.padding,u=n.flipVariations,d=n.allowedAutoPlacements,l=void 0===d?p.Ct:d,v=(0,c.Z)(r),h=v?u?p.bw:p.bw.filter((function(e){return(0,c.Z)(e)===v})):p.mv,m=h.filter((function(e){return l.indexOf(e)>=0}));0===m.length&&(m=h);var Z=m.reduce((function(t,n){return t[n]=(0,f.Z)(e,{placement:n,boundary:o,rootBoundary:a,padding:s})[(0,i.Z)(n)],t}),{});return Object.keys(Z).sort((function(e,t){return Z[e]-Z[t]}))}(t,{placement:n,boundary:m,rootBoundary:Z,padding:h,flipVariations:b,allowedAutoPlacements:w}):n)}),[]),E=t.rects.reference,D=t.rects.popper,R=new Map,A=!0,L=j[0],M=0;M<j.length;M++){var F=j[M],P=(0,i.Z)(F),B=(0,c.Z)(F)===p.BL,V=[p.we,p.I].indexOf(P)>=0,W=V?"width":"height",I=(0,f.Z)(t,{placement:F,boundary:m,rootBoundary:Z,altBoundary:g,padding:h}),q=V?B?p.F2:p.t$:B?p.I:p.we;E[W]>D[W]&&(q=o(q));var C=o(q),H=[];if(u&&H.push(I[P]<=0),l&&H.push(I[q]<=0,I[C]<=0),H.every((function(e){return e}))){L=F,A=!1;break}R.set(F,H)}if(A)for(var N=function(e){var t=j.find((function(t){var n=R.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return L=t,"break"},T=b?3:1;T>0;T--){if("break"===N(T))break}t.placement!==L&&(t.modifiersData[r]._skip=!0,t.placement=L,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}}},9892:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(7701),o=n(9966);function i(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function a(e){return[r.we,r.F2,r.I,r.t$].some((function(t){return e[t]>=0}))}const s={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,r=t.rects.reference,s=t.rects.popper,f=t.modifiersData.preventOverflow,c=(0,o.Z)(t,{elementContext:"reference"}),p=(0,o.Z)(t,{altBoundary:!0}),u=i(c,r),d=i(p,s,f),l=a(u),v=a(d);t.modifiersData[n]={referenceClippingOffsets:u,popperEscapeOffsets:d,isReferenceHidden:l,hasPopperEscaped:v},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":l,"data-popper-escaped":v})}}},2122:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(6206),o=n(7701);const i={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,i=e.name,a=n.offset,s=void 0===a?[0,0]:a,f=o.Ct.reduce((function(e,n){return e[n]=function(e,t,n){var i=(0,r.Z)(e),a=[o.t$,o.we].indexOf(i)>=0?-1:1,s="function"==typeof n?n(Object.assign({},t,{placement:e})):n,f=s[0],c=s[1];return f=f||0,c=(c||0)*a,[o.t$,o.F2].indexOf(i)>=0?{x:c,y:f}:{x:f,y:c}}(n,t.rects,s),e}),{}),c=f[t.placement],p=c.x,u=c.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=p,t.modifiersData.popperOffsets.y+=u),t.modifiersData[i]=f}}},7421:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(2581);const o={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=(0,r.Z)({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}}},3920:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(7701),o=n(6206),i=n(1516);var a=n(7516),s=n(583),f=n(3779),c=n(9966),p=n(4943),u=n(3607),d=n(138);const l={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,l=e.name,v=n.mainAxis,h=void 0===v||v,m=n.altAxis,Z=void 0!==m&&m,g=n.boundary,y=n.rootBoundary,b=n.altBoundary,w=n.padding,x=n.tether,O=void 0===x||x,k=n.tetherOffset,j=void 0===k?0:k,E=(0,c.Z)(t,{boundary:g,rootBoundary:y,padding:w,altBoundary:b}),D=(0,o.Z)(t.placement),R=(0,p.Z)(t.placement),A=!R,L=(0,i.Z)(D),M="x"===L?"y":"x",F=t.modifiersData.popperOffsets,P=t.rects.reference,B=t.rects.popper,V="function"==typeof j?j(Object.assign({},t.rects,{placement:t.placement})):j,W="number"==typeof V?{mainAxis:V,altAxis:V}:Object.assign({mainAxis:0,altAxis:0},V),I=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,q={x:0,y:0};if(F){if(h){var C,H="y"===L?r.we:r.t$,N="y"===L?r.I:r.F2,T="y"===L?"height":"width",$=F[L],S=$+E[H],z=$-E[N],K=O?-B[T]/2:0,U=R===r.BL?P[T]:B[T],Y=R===r.BL?-B[T]:-P[T],_=t.elements.arrow,X=O&&_?(0,s.Z)(_):{width:0,height:0},G=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:(0,u.Z)(),J=G[H],Q=G[N],ee=(0,a.u)(0,P[T],X[T]),te=A?P[T]/2-K-ee-J-W.mainAxis:U-ee-J-W.mainAxis,ne=A?-P[T]/2+K+ee+Q+W.mainAxis:Y+ee+Q+W.mainAxis,re=t.elements.arrow&&(0,f.Z)(t.elements.arrow),oe=re?"y"===L?re.clientTop||0:re.clientLeft||0:0,ie=null!=(C=null==I?void 0:I[L])?C:0,ae=$+te-ie-oe,se=$+ne-ie,fe=(0,a.u)(O?(0,d.VV)(S,ae):S,$,O?(0,d.Fp)(z,se):z);F[L]=fe,q[L]=fe-$}if(Z){var ce,pe="x"===L?r.we:r.t$,ue="x"===L?r.I:r.F2,de=F[M],le="y"===M?"height":"width",ve=de+E[pe],he=de-E[ue],me=-1!==[r.we,r.t$].indexOf(D),Ze=null!=(ce=null==I?void 0:I[M])?ce:0,ge=me?ve:de-P[le]-B[le]-Ze+W.altAxis,ye=me?de+P[le]+B[le]-Ze-W.altAxis:he,be=O&&me?(0,a.q)(ge,de,ye):(0,a.u)(O?ge:ve,de,O?ye:he);F[M]=be,q[M]=be-de}t.modifiersData[l]=q}},requiresIfExists:["offset"]}},8044:(e,t,n)=>{n.d(t,{fi:()=>m});var r=n(8240),o=n(2372),i=n(7421),a=n(6531),s=n(6333),f=n(2556);const c={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},r=t.attributes[e]||{},o=t.elements[e];(0,f.Re)(o)&&(0,s.Z)(o)&&(Object.assign(o.style,n),Object.keys(r).forEach((function(e){var t=r[e];!1===t?o.removeAttribute(e):o.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var r=t.elements[e],o=t.attributes[e]||{},i=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});(0,f.Re)(r)&&(0,s.Z)(r)&&(Object.assign(r.style,i),Object.keys(o).forEach((function(e){r.removeAttribute(e)})))}))}},requires:["computeStyles"]};var p=n(2122),u=n(5228),d=n(3920),l=n(6896),v=n(9892),h=[o.Z,i.Z,a.Z,c,p.Z,u.Z,d.Z,l.Z,v.Z],m=(0,r.kZ)({defaultModifiers:h})},2581:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(6206),o=n(4943),i=n(1516),a=n(7701);function s(e){var t,n=e.reference,s=e.element,f=e.placement,c=f?(0,r.Z)(f):null,p=f?(0,o.Z)(f):null,u=n.x+n.width/2-s.width/2,d=n.y+n.height/2-s.height/2;switch(c){case a.we:t={x:u,y:n.y-s.height};break;case a.I:t={x:u,y:n.y+n.height};break;case a.F2:t={x:n.x+n.width,y:d};break;case a.t$:t={x:n.x-s.width,y:d};break;default:t={x:n.x,y:n.y}}var l=c?(0,i.Z)(c):null;if(null!=l){var v="y"===l?"height":"width";switch(p){case a.BL:t[l]=t[l]-(n[v]/2-s[v]/2);break;case a.ut:t[l]=t[l]+(n[v]/2-s[v]/2)}}return t}},9966:(e,t,n)=>{n.d(t,{Z:()=>O});var r=n(7701),o=n(2057),i=n(7252),a=n(4063);var s=n(3062),f=n(2163),c=n(138);var p=n(3624),u=n(3779),d=n(2556),l=n(400),v=n(5923),h=n(4985),m=n(6333);function Z(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function g(e,t){return t===r.Pj?Z(function(e){var t=(0,o.Z)(e),n=(0,i.Z)(e),r=t.visualViewport,s=n.clientWidth,f=n.clientHeight,c=0,p=0;return r&&(s=r.width,f=r.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(c=r.offsetLeft,p=r.offsetTop)),{width:s,height:f,x:c+(0,a.Z)(e),y:p}}(e)):(0,d.kK)(t)?function(e){var t=(0,l.Z)(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):Z(function(e){var t,n=(0,i.Z)(e),r=(0,f.Z)(e),o=null==(t=e.ownerDocument)?void 0:t.body,p=(0,c.Fp)(n.scrollWidth,n.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),u=(0,c.Fp)(n.scrollHeight,n.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),d=-r.scrollLeft+(0,a.Z)(e),l=-r.scrollTop;return"rtl"===(0,s.Z)(o||n).direction&&(d+=(0,c.Fp)(n.clientWidth,o?o.clientWidth:0)-p),{width:p,height:u,x:d,y:l}}((0,i.Z)(e)))}function y(e,t,n){var r="clippingParents"===t?function(e){var t=(0,p.Z)((0,v.Z)(e)),n=["absolute","fixed"].indexOf((0,s.Z)(e).position)>=0&&(0,d.Re)(e)?(0,u.Z)(e):e;return(0,d.kK)(n)?t.filter((function(e){return(0,d.kK)(e)&&(0,h.Z)(e,n)&&"body"!==(0,m.Z)(e)})):[]}(e):[].concat(t),o=[].concat(r,[n]),i=o[0],a=o.reduce((function(t,n){var r=g(e,n);return t.top=(0,c.Fp)(r.top,t.top),t.right=(0,c.VV)(r.right,t.right),t.bottom=(0,c.VV)(r.bottom,t.bottom),t.left=(0,c.Fp)(r.left,t.left),t}),g(e,i));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}var b=n(2581),w=n(3293),x=n(3706);function O(e,t){void 0===t&&(t={});var n=t,o=n.placement,a=void 0===o?e.placement:o,s=n.boundary,f=void 0===s?r.zV:s,c=n.rootBoundary,p=void 0===c?r.Pj:c,u=n.elementContext,v=void 0===u?r.k5:u,h=n.altBoundary,m=void 0!==h&&h,g=n.padding,O=void 0===g?0:g,k=(0,w.Z)("number"!=typeof O?O:(0,x.Z)(O,r.mv)),j=v===r.k5?r.YP:r.k5,E=e.rects.popper,D=e.elements[m?j:v],R=y((0,d.kK)(D)?D:D.contextElement||(0,i.Z)(e.elements.popper),f,p),A=(0,l.Z)(e.elements.reference),L=(0,b.Z)({reference:A,element:E,strategy:"absolute",placement:a}),M=Z(Object.assign({},E,L)),F=v===r.k5?M:A,P={top:R.top-F.top+k.top,bottom:F.bottom-R.bottom+k.bottom,left:R.left-F.left+k.left,right:F.right-R.right+k.right},B=e.modifiersData.offset;if(v===r.k5&&B){var V=B[a];Object.keys(P).forEach((function(e){var t=[r.F2,r.I].indexOf(e)>=0?1:-1,n=[r.we,r.I].indexOf(e)>=0?"y":"x";P[e]+=V[n]*t}))}return P}},3706:(e,t,n)=>{function r(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}n.d(t,{Z:()=>r})},6206:(e,t,n)=>{function r(e){return e.split("-")[0]}n.d(t,{Z:()=>r})},3607:(e,t,n)=>{function r(){return{top:0,right:0,bottom:0,left:0}}n.d(t,{Z:()=>r})},1516:(e,t,n)=>{function r(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}n.d(t,{Z:()=>r})},4943:(e,t,n)=>{function r(e){return e.split("-")[1]}n.d(t,{Z:()=>r})},138:(e,t,n)=>{n.d(t,{Fp:()=>r,NM:()=>i,VV:()=>o});var r=Math.max,o=Math.min,i=Math.round},3293:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(3607);function o(e){return Object.assign({},(0,r.Z)(),e)}},7516:(e,t,n)=>{n.d(t,{q:()=>i,u:()=>o});var r=n(138);function o(e,t,n){return(0,r.Fp)(e,(0,r.VV)(t,n))}function i(e,t,n){var r=o(e,t,n);return r>n?n:r}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";(self.webpackChunktradeanalyzer=self.webpackChunktradeanalyzer||[]).push([[75],{8977:(r,t,e)=>{e.d(t,{Ch:()=>f,$c:()=>c});var n=e(7462),u=e(3366),a=e(7294);e(1143);function i(r){return"default"+r.charAt(0).toUpperCase()+r.substr(1)}function o(r){var t=function(r,t){if("object"!=typeof r||null===r)return r;var e=r[Symbol.toPrimitive];if(void 0!==e){var n=e.call(r,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(r)}(r,"string");return"symbol"==typeof t?t:String(t)}function c(r,t,e){var n=(0,a.useRef)(void 0!==r),u=(0,a.useState)(t),i=u[0],o=u[1],c=void 0!==r,f=n.current;return n.current=c,!c&&f&&i!==t&&o(t),[c?r:i,(0,a.useCallback)((function(r){for(var t=arguments.length,n=new Array(t>1?t-1:0),u=1;u<t;u++)n[u-1]=arguments[u];e&&e.apply(void 0,[r].concat(n)),o(r)}),[e])]}function f(r,t){return Object.keys(t).reduce((function(e,a){var f,l=e,s=l[i(a)],v=l[a],p=(0,u.Z)(l,[i(a),a].map(o)),y=t[a],b=c(v,s,r[y]),d=b[0],m=b[1];return(0,n.Z)({},p,((f={})[a]=d,f[y]=m,f))}),r)}e(6871)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
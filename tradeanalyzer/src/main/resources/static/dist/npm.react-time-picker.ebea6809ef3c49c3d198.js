"use strict";(self.webpackChunktradeanalyzer=self.webpackChunktradeanalyzer||[]).push([[7020],{5239:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=m;var r=s(n(7294)),a=s(n(5697)),o=s(n(9624)),u=n(342),i=n(125),l=n(2625),f=n(9412);function s(e){return e&&e.__esModule?e:{default:e}}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,a,o=[],u=!0,i=!1;try{for(n=n.call(e);!(u=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);u=!0);}catch(e){i=!0,a=e}finally{try{u||null==n.return||n.return()}finally{if(i)throw a}}return o}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return d(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function m(e){var t=e.ariaLabel,n=e.className,a=e.disabled,l=e.inputRef,s=e.locale,d=e.maxTime,m=e.minTime,p=e.onChange,y=e.required,b=e.value,g=m&&"pm"===(0,i.convert24to12)((0,u.getHours)(m))[1],v=d&&"am"===(0,i.convert24to12)((0,u.getHours)(d))[1],h="amPm",w=c((0,f.getAmPmLabels)(s),2),O=w[0],T=w[1];return r.default.createElement("select",{"aria-label":t,className:(0,o.default)("".concat(n,"__input"),"".concat(n,"__").concat(h)),"data-input":"true","data-select":"true",disabled:a,name:h,onChange:p,ref:l,required:y,value:null!==b?b:""},!b&&r.default.createElement("option",{value:""},"--"),r.default.createElement("option",{disabled:g,value:"am"},O),r.default.createElement("option",{disabled:v,value:"pm"},T))}m.propTypes={ariaLabel:a.default.string,className:a.default.string.isRequired,disabled:a.default.bool,inputRef:l.isRef,locale:a.default.string,maxTime:l.isTime,minTime:l.isTime,onChange:a.default.func,required:a.default.bool,value:a.default.oneOf(["am","pm"])}},688:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=b;var r=c(n(7294)),a=c(n(5697)),o=n(342),u=c(n(3501)),i=n(125),l=n(2625),f=n(9412),s=["amPm","hour","maxTime","minTime","value"];function c(e){return e&&e.__esModule?e:{default:e}}function d(){return d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},d.apply(this,arguments)}function m(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,a,o=[],u=!0,i=!1;try{for(n=n.call(e);!(u=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);u=!0);}catch(e){i=!0,a=e}finally{try{u||null==n.return||n.return()}finally{if(i)throw a}}return o}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return p(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return p(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function y(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}function b(e){var t,n,a,l,c=e.amPm,p=(e.hour,e.maxTime),b=e.minTime,g=e.value,v=y(e,s),h=(0,f.safeMin)(12,p&&(t=m((0,i.convert24to12)((0,o.getHours)(p)),2),n=t[0],t[1]!==c?null:n)),w=(0,f.safeMax)(1,b&&(a=m((0,i.convert24to12)((0,o.getHours)(b)),2),l=a[0],a[1]!==c||12===l?null:l)),O=g?(0,i.convert24to12)(g)[0].toString():"";return r.default.createElement(u.default,d({max:h,min:w,name:"hour12",nameForClass:"hour",value:O},v))}b.propTypes={amPm:a.default.string,ariaLabel:a.default.string,className:a.default.string.isRequired,disabled:a.default.bool,hour:a.default.string,inputRef:l.isRef,maxTime:l.isTime,minTime:l.isTime,onChange:a.default.func,onKeyDown:a.default.func,onKeyUp:a.default.func,placeholder:a.default.string,required:a.default.bool,showLeadingZeros:a.default.bool,value:a.default.string}},9452:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=m;var r=s(n(7294)),a=s(n(5697)),o=n(342),u=s(n(3501)),i=n(2625),l=n(9412),f=["hour","maxTime","minTime"];function s(e){return e&&e.__esModule?e:{default:e}}function c(){return c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c.apply(this,arguments)}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}function m(e){e.hour;var t=e.maxTime,n=e.minTime,a=d(e,f),i=(0,l.safeMin)(23,t&&(0,o.getHours)(t)),s=(0,l.safeMax)(0,n&&(0,o.getHours)(n));return r.default.createElement(u.default,c({max:i,min:s,name:"hour24",nameForClass:"hour"},a))}m.propTypes={ariaLabel:a.default.string,className:a.default.string.isRequired,disabled:a.default.bool,hour:a.default.string,inputRef:i.isRef,maxTime:i.isTime,minTime:i.isTime,onChange:a.default.func,onKeyDown:a.default.func,onKeyUp:a.default.func,placeholder:a.default.string,required:a.default.bool,showLeadingZeros:a.default.bool,value:a.default.string}},3501:(e,t,n)=>{function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=g;var a=c(n(7294)),o=c(n(5697)),u=c(n(9624)),i=c(n(2324)),l=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var n=s(t);if(n&&n.has(e))return n.get(e);var a={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=o?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(a,u,i):a[u]=e[u]}a.default=e,n&&n.set(e,a);return a}(n(5174)),f=n(2625);function s(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(s=function(e){return e?n:t})(e)}function c(e){return e&&e.__esModule?e:{default:e}}var d="undefined"!=typeof window&&/(MSIE|Trident\/|Edge\/)/.test(window.navigator.userAgent),m="undefined"!=typeof window&&/Firefox/.test(window.navigator.userAgent);function p(e){var t=e.target;d?requestAnimationFrame((function(){return t.select()})):t.select()}function y(e){if(document.fonts){var t=(0,l.getFontShorthand)(e);if(t)document.fonts.check(t)||document.fonts.addEventListener("loadingdone",(function(){(0,l.default)(e)}))}}function b(e){return function(t){if(!m){var n=t.key,r=t.target,a=r.value,o=1===n.length&&/\d/.test(n),u=function(e){return e&&"selectionStart"in e&&null!==e.selectionStart?e.value.slice(e.selectionStart,e.selectionEnd):"getSelection"in window?window.getSelection().toString():null}(r);o&&(u||a.length<e)||t.preventDefault()}}}function g(e){var t=e.ariaLabel,n=e.autoFocus,r=e.className,o=e.disabled,f=e.inputRef,s=e.max,c=e.min,d=e.name,m=e.nameForClass,g=e.onChange,v=e.onKeyDown,h=e.onKeyUp,w=e.placeholder,O=void 0===w?"--":w,T=e.required,S=e.showLeadingZeros,j=e.step,M=e.value,_=S&&M&&M<10&&("0"===M||!M.toString().startsWith("0")),x=s?s.toString().length:null;return[_&&a.default.createElement("span",{key:"leadingZero",className:"".concat(r,"__leadingZero")},"0"),a.default.createElement("input",{key:"input","aria-label":t,autoComplete:"off",autoFocus:n,className:(0,u.default)("".concat(r,"__input"),"".concat(r,"__").concat(m||d),_&&"".concat(r,"__input--hasLeadingZero")),"data-input":"true",disabled:o,inputMode:"numeric",max:s,min:c,name:d,onChange:g,onFocus:p,onKeyDown:v,onKeyPress:b(x),onKeyUp:function(e){(0,l.default)(e.target),h&&h(e)},placeholder:O,ref:(0,i.default)(l.default,y,f),required:T,step:j,type:"number",value:null!==M?M:""})]}g.propTypes={ariaLabel:o.default.string,autoFocus:o.default.bool,className:o.default.string.isRequired,disabled:o.default.bool,inputRef:f.isRef,max:o.default.number,min:o.default.number,name:o.default.string,nameForClass:o.default.string,onChange:o.default.func,onKeyDown:o.default.func,onKeyUp:o.default.func,placeholder:o.default.string,required:o.default.bool,showLeadingZeros:o.default.bool,step:o.default.number,value:o.default.string}},4075:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=m;var r=s(n(7294)),a=s(n(5697)),o=n(342),u=s(n(3501)),i=n(2625),l=n(9412),f=["hour","maxTime","minTime","showLeadingZeros"];function s(e){return e&&e.__esModule?e:{default:e}}function c(){return c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c.apply(this,arguments)}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}function m(e){var t=e.hour,n=e.maxTime,a=e.minTime,i=e.showLeadingZeros,s=void 0===i||i,m=d(e,f);function p(e){return e&&t===(0,o.getHours)(e).toString()}var y=(0,l.safeMin)(59,p(n)&&(0,o.getMinutes)(n)),b=(0,l.safeMax)(0,p(a)&&(0,o.getMinutes)(a));return r.default.createElement(u.default,c({max:y,min:b,name:"minute",showLeadingZeros:s},m))}m.propTypes={ariaLabel:a.default.string,className:a.default.string.isRequired,disabled:a.default.bool,hour:a.default.string,inputRef:i.isRef,maxTime:i.isTime,minTime:i.isTime,onChange:a.default.func,onKeyDown:a.default.func,onKeyUp:a.default.func,placeholder:a.default.string,required:a.default.bool,showLeadingZeros:a.default.bool,value:a.default.string}},7260:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=m;var r=s(n(7294)),a=s(n(5697)),o=n(342),u=s(n(3501)),i=n(2625),l=n(9412),f=["hour","maxTime","minTime","minute","showLeadingZeros"];function s(e){return e&&e.__esModule?e:{default:e}}function c(){return c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c.apply(this,arguments)}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}function m(e){var t=e.hour,n=e.maxTime,a=e.minTime,i=e.minute,s=e.showLeadingZeros,m=void 0===s||s,p=d(e,f);function y(e){return e&&t===(0,o.getHours)(e).toString()&&i===(0,o.getMinutes)(e).toString()}var b=(0,l.safeMin)(59,y(n)&&(0,o.getSeconds)(n)),g=(0,l.safeMax)(0,y(a)&&(0,o.getSeconds)(a));return r.default.createElement(u.default,c({max:b,min:g,name:"second",showLeadingZeros:m},p))}m.propTypes={ariaLabel:a.default.string,className:a.default.string.isRequired,disabled:a.default.bool,hour:a.default.string,inputRef:i.isRef,maxTime:i.isTime,minTime:i.isTime,minute:a.default.string,onChange:a.default.func,onKeyDown:a.default.func,onKeyUp:a.default.func,placeholder:a.default.string,required:a.default.bool,showLeadingZeros:a.default.bool,value:a.default.string}},4892:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getFormatter=function(e){return function(t,n){var r=t||(0,a.default)();o.has(r)||o.set(r,new Map);var u=o.get(r);return u.has(e)||u.set(e,new Intl.DateTimeFormat(r,e).format),u.get(e)(n)}},t.getNumberFormatter=function(e){return function(t,n){var r=t||(0,a.default)();u.has(r)||u.set(r,new Map);var o=u.get(r);return o.has(e)||o.set(e,new Intl.NumberFormat(r,e).format),o.get(e)(n)}};var r,a=(r=n(5781))&&r.__esModule?r:{default:r};var o=new Map;var u=new Map},125:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.convert12to24=function(e,t){var n=parseInt(e,10);"am"===t&&12===n?n=0:"pm"===t&&n<12&&(n+=12);return n},t.convert24to12=function(e){return[e%12||12,e<12?"am":"pm"]}},2625:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isValueType=t.isTime=t.isRef=void 0;var r,a=(r=n(5697))&&r.__esModule?r:{default:r};function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}var u=[].concat(["hour","minute","second"]),i=/^(([0-1])?[0-9]|2[0-3]):[0-5][0-9](:([0-5][0-9]))?$/;t.isTime=function(e,t,n){var r=e[t];return r&&!i.test(r)?new Error("Invalid prop `".concat(t,"` of type `").concat("undefined"==typeof minDate?"undefined":o(minDate),"` supplied to `").concat(n,"`, expected time in HH:mm(:ss) format.")):null};var l=a.default.oneOf(u);t.isValueType=l;var f=a.default.oneOfType([a.default.func,a.default.shape({current:a.default.any})]);t.isRef=f},9412:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getAmPmLabels=function(e){var t=f(e,new Date(2017,0,1,9)),n=f(e,new Date(2017,0,1,21)),r=o(t.split(l),2),a=r[0],u=r[1],i=o(n.split(l),2),s=i[0],c=i[1];if(void 0!==c){if(a!==s)return[a,s].map((function(e){return e.trim()}));if(u!==c)return[u,c].map((function(e){return e.trim()}))}return["AM","PM"]},t.safeMax=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Math.max.apply(Math,a(t.filter(s)))},t.safeMin=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Math.min.apply(Math,a(t.filter(s)))};var r=n(4892);function a(e){return function(e){if(Array.isArray(e))return i(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||u(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,a,o=[],u=!0,i=!1;try{for(n=n.call(e);!(u=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);u=!0);}catch(e){i=!0,a=e}finally{try{u||null==n.return||n.return()}finally{if(i)throw a}}return o}(e,t)||u(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t){if(e){if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,t):void 0}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var l=new RegExp("[".concat(["9","٩"].join(""),"]")),f=(0,r.getFormatter)({hour:"numeric"});function s(e){return null!==e&&!1!==e&&!Number.isNaN(Number(e))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
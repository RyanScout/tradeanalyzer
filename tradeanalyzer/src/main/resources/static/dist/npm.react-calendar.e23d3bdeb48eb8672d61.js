"use strict";(self.webpackChunktradeanalyzer=self.webpackChunktradeanalyzer||[]).push([[6151],{5299:(e,t,r)=>{r.d(t,{Z:()=>i});var n=r(7537),a=r.n(n),o=r(3645),c=r.n(o)()(a());c.push([e.id,".react-calendar {\n  width: 350px;\n  max-width: 100%;\n  background: white;\n  border: 1px solid #a0a096;\n  font-family: Arial, Helvetica, sans-serif;\n  line-height: 1.125em;\n}\n.react-calendar--doubleView {\n  width: 700px;\n}\n.react-calendar--doubleView .react-calendar__viewContainer {\n  display: flex;\n  margin: -0.5em;\n}\n.react-calendar--doubleView .react-calendar__viewContainer > * {\n  width: 50%;\n  margin: 0.5em;\n}\n.react-calendar,\n.react-calendar *,\n.react-calendar *:before,\n.react-calendar *:after {\n  -moz-box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n}\n.react-calendar button {\n  margin: 0;\n  border: 0;\n  outline: none;\n}\n.react-calendar button:enabled:hover {\n  cursor: pointer;\n}\n.react-calendar__navigation {\n  display: flex;\n  height: 44px;\n  margin-bottom: 1em;\n}\n.react-calendar__navigation button {\n  min-width: 44px;\n  background: none;\n}\n.react-calendar__navigation button:disabled {\n  background-color: #f0f0f0;\n}\n.react-calendar__navigation button:enabled:hover,\n.react-calendar__navigation button:enabled:focus {\n  background-color: #e6e6e6;\n}\n.react-calendar__month-view__weekdays {\n  text-align: center;\n  text-transform: uppercase;\n  font-weight: bold;\n  font-size: 0.75em;\n}\n.react-calendar__month-view__weekdays__weekday {\n  padding: 0.5em;\n}\n.react-calendar__month-view__weekNumbers .react-calendar__tile {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 0.75em;\n  font-weight: bold;\n}\n.react-calendar__month-view__days__day--weekend {\n  color: #d10000;\n}\n.react-calendar__month-view__days__day--neighboringMonth {\n  color: #757575;\n}\n.react-calendar__year-view .react-calendar__tile,\n.react-calendar__decade-view .react-calendar__tile,\n.react-calendar__century-view .react-calendar__tile {\n  padding: 2em 0.5em;\n}\n.react-calendar__tile {\n  max-width: 100%;\n  padding: 10px 6.6667px;\n  background: none;\n  text-align: center;\n  line-height: 16px;\n}\n.react-calendar__tile:disabled {\n  background-color: #f0f0f0;\n}\n.react-calendar__tile:enabled:hover,\n.react-calendar__tile:enabled:focus {\n  background-color: #e6e6e6;\n}\n.react-calendar__tile--now {\n  background: #ffff76;\n}\n.react-calendar__tile--now:enabled:hover,\n.react-calendar__tile--now:enabled:focus {\n  background: #ffffa9;\n}\n.react-calendar__tile--hasActive {\n  background: #76baff;\n}\n.react-calendar__tile--hasActive:enabled:hover,\n.react-calendar__tile--hasActive:enabled:focus {\n  background: #a9d4ff;\n}\n.react-calendar__tile--active {\n  background: #006edc;\n  color: white;\n}\n.react-calendar__tile--active:enabled:hover,\n.react-calendar__tile--active:enabled:focus {\n  background: #1087ff;\n}\n.react-calendar--selectRange .react-calendar__tile--hover {\n  background-color: #e6e6e6;\n}\n","",{version:3,sources:["webpack://./node_modules/react-calendar/dist/Calendar.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,eAAe;EACf,iBAAiB;EACjB,yBAAyB;EACzB,yCAAyC;EACzC,oBAAoB;AACtB;AACA;EACE,YAAY;AACd;AACA;EACE,aAAa;EACb,cAAc;AAChB;AACA;EACE,UAAU;EACV,aAAa;AACf;AACA;;;;EAIE,2BAA2B;EAC3B,8BAA8B;EAC9B,sBAAsB;AACxB;AACA;EACE,SAAS;EACT,SAAS;EACT,aAAa;AACf;AACA;EACE,eAAe;AACjB;AACA;EACE,aAAa;EACb,YAAY;EACZ,kBAAkB;AACpB;AACA;EACE,eAAe;EACf,gBAAgB;AAClB;AACA;EACE,yBAAyB;AAC3B;AACA;;EAEE,yBAAyB;AAC3B;AACA;EACE,kBAAkB;EAClB,yBAAyB;EACzB,iBAAiB;EACjB,iBAAiB;AACnB;AACA;EACE,cAAc;AAChB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,iBAAiB;EACjB,iBAAiB;AACnB;AACA;EACE,cAAc;AAChB;AACA;EACE,cAAc;AAChB;AACA;;;EAGE,kBAAkB;AACpB;AACA;EACE,eAAe;EACf,sBAAsB;EACtB,gBAAgB;EAChB,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,yBAAyB;AAC3B;AACA;;EAEE,yBAAyB;AAC3B;AACA;EACE,mBAAmB;AACrB;AACA;;EAEE,mBAAmB;AACrB;AACA;EACE,mBAAmB;AACrB;AACA;;EAEE,mBAAmB;AACrB;AACA;EACE,mBAAmB;EACnB,YAAY;AACd;AACA;;EAEE,mBAAmB;AACrB;AACA;EACE,yBAAyB;AAC3B",sourcesContent:[".react-calendar {\n  width: 350px;\n  max-width: 100%;\n  background: white;\n  border: 1px solid #a0a096;\n  font-family: Arial, Helvetica, sans-serif;\n  line-height: 1.125em;\n}\n.react-calendar--doubleView {\n  width: 700px;\n}\n.react-calendar--doubleView .react-calendar__viewContainer {\n  display: flex;\n  margin: -0.5em;\n}\n.react-calendar--doubleView .react-calendar__viewContainer > * {\n  width: 50%;\n  margin: 0.5em;\n}\n.react-calendar,\n.react-calendar *,\n.react-calendar *:before,\n.react-calendar *:after {\n  -moz-box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n}\n.react-calendar button {\n  margin: 0;\n  border: 0;\n  outline: none;\n}\n.react-calendar button:enabled:hover {\n  cursor: pointer;\n}\n.react-calendar__navigation {\n  display: flex;\n  height: 44px;\n  margin-bottom: 1em;\n}\n.react-calendar__navigation button {\n  min-width: 44px;\n  background: none;\n}\n.react-calendar__navigation button:disabled {\n  background-color: #f0f0f0;\n}\n.react-calendar__navigation button:enabled:hover,\n.react-calendar__navigation button:enabled:focus {\n  background-color: #e6e6e6;\n}\n.react-calendar__month-view__weekdays {\n  text-align: center;\n  text-transform: uppercase;\n  font-weight: bold;\n  font-size: 0.75em;\n}\n.react-calendar__month-view__weekdays__weekday {\n  padding: 0.5em;\n}\n.react-calendar__month-view__weekNumbers .react-calendar__tile {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 0.75em;\n  font-weight: bold;\n}\n.react-calendar__month-view__days__day--weekend {\n  color: #d10000;\n}\n.react-calendar__month-view__days__day--neighboringMonth {\n  color: #757575;\n}\n.react-calendar__year-view .react-calendar__tile,\n.react-calendar__decade-view .react-calendar__tile,\n.react-calendar__century-view .react-calendar__tile {\n  padding: 2em 0.5em;\n}\n.react-calendar__tile {\n  max-width: 100%;\n  padding: 10px 6.6667px;\n  background: none;\n  text-align: center;\n  line-height: 16px;\n}\n.react-calendar__tile:disabled {\n  background-color: #f0f0f0;\n}\n.react-calendar__tile:enabled:hover,\n.react-calendar__tile:enabled:focus {\n  background-color: #e6e6e6;\n}\n.react-calendar__tile--now {\n  background: #ffff76;\n}\n.react-calendar__tile--now:enabled:hover,\n.react-calendar__tile--now:enabled:focus {\n  background: #ffffa9;\n}\n.react-calendar__tile--hasActive {\n  background: #76baff;\n}\n.react-calendar__tile--hasActive:enabled:hover,\n.react-calendar__tile--hasActive:enabled:focus {\n  background: #a9d4ff;\n}\n.react-calendar__tile--active {\n  background: #006edc;\n  color: white;\n}\n.react-calendar__tile--active:enabled:hover,\n.react-calendar__tile--active:enabled:focus {\n  background: #1087ff;\n}\n.react-calendar--selectRange .react-calendar__tile--hover {\n  background-color: #e6e6e6;\n}\n"],sourceRoot:""}]);const i=c},2688:(e,t,r)=>{r.r(t),r.d(t,{Calendar:()=>wr,CenturyView:()=>He,DecadeView:()=>at,MonthView:()=>Ft,YearView:()=>mt,default:()=>_r});var n,a=r(7294),o=r(5697),c=r.n(o),i=r(9624),l=r(5781),u=r(342);function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function f(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var p,d={ARABIC:"Arabic",HEBREW:"Hebrew",ISO_8601:"ISO 8601",US:"US"},b=(f(n={},d.US,["en-CA","en-US","es-AR","es-BO","es-CL","es-CO","es-CR","es-DO","es-EC","es-GT","es-HN","es-MX","es-NI","es-PA","es-PE","es-PR","es-SV","es-VE","pt-BR"]),f(n,d.ARABIC,["ar","ar-AE","ar-BH","ar-DZ","ar-EG","ar-IQ","ar-JO","ar-KW","ar-LY","ar-OM","ar-QA","ar-SA","ar-SD","ar-SY","ar-YE","dv","dv-MV","ps","ps-AR"]),f(n,d.HEBREW,["he","he-IL"]),n),v=(p=Array(7),function(e){if(Array.isArray(e))return s(e)}(p)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(p)||function(e,t){if(e){if("string"==typeof e)return s(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?s(e,t):void 0}}(p)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(e,t){return t})),y=new Map;function m(e){return function(t,r){return function(e){return function(t,r){var n=t||(0,l.default)();y.has(n)||y.set(n,new Map);var a=y.get(n);return a.has(e)||a.set(e,new Intl.DateTimeFormat(n,e).format),a.get(e)(r)}}(e)(t,function(e){var t=new Date(e);return new Date(t.setHours(12))}(r))}}m({day:"numeric",month:"numeric",year:"numeric"});var h=m({day:"numeric"}),g=m({day:"numeric",month:"long",year:"numeric"}),O=m({month:"long"}),w=m({month:"long",year:"numeric"}),A=m({weekday:"short"}),D=m({weekday:"long"}),_=m({year:"numeric"}),j=v[0],E=v[5],C=v[6];function S(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:d.ISO_8601,r=e.getDay();switch(t){case d.ISO_8601:return(r+6)%7;case d.ARABIC:return(r+1)%7;case d.HEBREW:case d.US:return r;default:throw new Error("Unsupported calendar type.")}}function P(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:d.ISO_8601,r=(0,u.getYear)(e),n=(0,u.getMonth)(e),a=e.getDate()-S(e,t);return new Date(r,n,a)}function k(e,t){switch(e){case"century":return(0,u.getCenturyStart)(t);case"decade":return(0,u.getDecadeStart)(t);case"year":return(0,u.getYearStart)(t);case"month":return(0,u.getMonthStart)(t);case"day":return(0,u.getDayStart)(t);default:throw new Error("Invalid rangeType: ".concat(e))}}function x(e,t){switch(e){case"century":return(0,u.getNextCenturyStart)(t);case"decade":return(0,u.getNextDecadeStart)(t);case"year":return(0,u.getNextYearStart)(t);case"month":return(0,u.getNextMonthStart)(t);default:throw new Error("Invalid rangeType: ".concat(e))}}function T(e,t){switch(e){case"century":return(0,u.getCenturyEnd)(t);case"decade":return(0,u.getDecadeEnd)(t);case"year":return(0,u.getYearEnd)(t);case"month":return(0,u.getMonthEnd)(t);case"day":return(0,u.getDayEnd)(t);default:throw new Error("Invalid rangeType: ".concat(e))}}function B(e,t){switch(e){case"century":return(0,u.getCenturyRange)(t);case"decade":return(0,u.getDecadeRange)(t);case"year":return(0,u.getYearRange)(t);case"month":return(0,u.getMonthRange)(t);case"day":return(0,u.getDayRange)(t);default:throw new Error("Invalid rangeType: ".concat(e))}}function N(e,t,r){var n=[t,r].sort((function(e,t){return e-t}));return[k(e,n[0]),T(e,n[1])]}function M(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_,r=arguments.length>2?arguments[2]:void 0;return r.map((function(r){return t(e,r)})).join(" – ")}function L(e,t,r){return M(e,t,(0,u.getDecadeRange)(r))}function R(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:d.ISO_8601,r=e.getDay();switch(t){case d.ARABIC:case d.HEBREW:return r===E||r===C;case d.ISO_8601:case d.US:return r===C||r===j;default:throw new Error("Unsupported calendar type.")}}function I(e){return I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},I(e)}var Y=Object.values(d),W=["century","decade","year","month"],V=c().oneOf(Y),U=c().oneOfType([c().string,c().arrayOf(c().string)]),q=function(e,t,r){var n=e[t];if(!n)return null;if(!(n instanceof Date))return new Error("Invalid prop `".concat(t,"` of type `").concat(I(n),"` supplied to `").concat(r,"`, expected instance of `Date`."));var a=e.maxDate;return a&&n>a?new Error("Invalid prop `".concat(t,"` of type `").concat(I(n),"` supplied to `").concat(r,"`, minDate cannot be larger than maxDate.")):null},F=function(e,t,r){var n=e[t];if(!n)return null;if(!(n instanceof Date))return new Error("Invalid prop `".concat(t,"` of type `").concat(I(n),"` supplied to `").concat(r,"`, expected instance of `Date`."));var a=e.minDate;return a&&n<a?new Error("Invalid prop `".concat(t,"` of type `").concat(I(n),"` supplied to `").concat(r,"`, maxDate cannot be smaller than minDate.")):null},z=c().oneOfType([c().func,c().shape({current:c().any})]),H=c().oneOfType([c().instanceOf(Date),c().arrayOf(c().instanceOf(Date))]),Z=c().arrayOf(c().oneOf(W)),G=function(e,t,r){var n=e[t],a=e.views||W;return void 0!==n&&-1===a.indexOf(n)?new Error("Invalid prop `".concat(t,"` of value `").concat(n,"` supplied to `").concat(r,"`, expected one of [").concat(a.map((function(e){return'"'.concat(e,'"')})).join(", "),"].")):null};G.isRequired=function(e,t,r){var n=e[t];return n?G(e,t,r):new Error("The prop `".concat(t,"` is marked as required in `").concat(r,"`, but its value is `").concat(n,"`."))};var $={activeStartDate:c().instanceOf(Date).isRequired,hover:c().instanceOf(Date),locale:c().string,maxDate:F,minDate:q,onClick:c().func,onMouseOver:c().func,tileClassName:c().oneOfType([c().func,U]),tileContent:c().oneOfType([c().func,c().node]),value:H,valueType:c().string},Q={activeStartDate:c().instanceOf(Date).isRequired,classes:c().arrayOf(c().string).isRequired,date:c().instanceOf(Date).isRequired,locale:c().string,maxDate:F,minDate:q,onClick:c().func,onMouseOver:c().func,style:c().objectOf(c().oneOfType([c().string,c().number])),tileClassName:c().oneOfType([c().func,U]),tileContent:c().oneOfType([c().func,c().node]),tileDisabled:c().func},J="react-calendar__navigation";function K(e){var t,r=e.activeStartDate,n=e.drillUp,o=e.formatMonthYear,c=void 0===o?w:o,i=e.formatYear,s=void 0===i?_:i,f=e.locale,p=e.maxDate,d=e.minDate,b=e.navigationAriaLabel,v=void 0===b?"":b,y=e.navigationAriaLive,m=e.navigationLabel,h=e.next2AriaLabel,g=void 0===h?"":h,O=e.next2Label,A=void 0===O?"»":O,D=e.nextAriaLabel,j=void 0===D?"":D,E=e.nextLabel,C=void 0===E?"›":E,S=e.prev2AriaLabel,P=void 0===S?"":S,k=e.prev2Label,T=void 0===k?"«":k,B=e.prevAriaLabel,N=void 0===B?"":B,R=e.prevLabel,I=void 0===R?"‹":R,Y=e.setActiveStartDate,W=e.showDoubleView,V=e.view,U=e.views.indexOf(V)>0,q="century"!==V,F=function(e,t){switch(e){case"century":return(0,u.getPreviousCenturyStart)(t);case"decade":return(0,u.getPreviousDecadeStart)(t);case"year":return(0,u.getPreviousYearStart)(t);case"month":return(0,u.getPreviousMonthStart)(t);default:throw new Error("Invalid rangeType: ".concat(e))}}(V,r),z=q&&function(e,t){switch(e){case"decade":return(0,u.getPreviousDecadeStart)(t,-100);case"year":return(0,u.getPreviousYearStart)(t,-10);case"month":return(0,u.getPreviousMonthStart)(t,-12);default:throw new Error("Invalid rangeType: ".concat(e))}}(V,r),H=x(V,r),Z=q&&function(e,t){switch(e){case"decade":return(0,u.getNextDecadeStart)(t,100);case"year":return(0,u.getNextYearStart)(t,10);case"month":return(0,u.getNextMonthStart)(t,12);default:throw new Error("Invalid rangeType: ".concat(e))}}(V,r),G=function(){if(F.getFullYear()<0)return!0;var e=function(e,t){switch(e){case"century":return(0,u.getPreviousCenturyEnd)(t);case"decade":return(0,u.getPreviousDecadeEnd)(t);case"year":return(0,u.getPreviousYearEnd)(t);case"month":return(0,u.getPreviousMonthEnd)(t);default:throw new Error("Invalid rangeType: ".concat(e))}}(V,r);return d&&d>=e}(),$=q&&function(){if(z.getFullYear()<0)return!0;var e=function(e,t){switch(e){case"decade":return(0,u.getPreviousDecadeEnd)(t,-100);case"year":return(0,u.getPreviousYearEnd)(t,-10);case"month":return(0,u.getPreviousMonthEnd)(t,-12);default:throw new Error("Invalid rangeType: ".concat(e))}}(V,r);return d&&d>=e}(),Q=p&&p<H,K=q&&p&&p<Z;function X(e){var t=function(){switch(V){case"century":return function(e,t,r){return M(e,t,(0,u.getCenturyRange)(r))}(f,s,e);case"decade":return L(f,s,e);case"year":return s(f,e);case"month":return c(f,e);default:throw new Error("Invalid view: ".concat(V,"."))}}();return m?m({date:e,label:t,locale:f||(0,l.getUserLocale)(),view:V}):t}return a.createElement("div",{className:J},null!==T&&q&&a.createElement("button",{"aria-label":P,className:"".concat(J,"__arrow ").concat(J,"__prev2-button"),disabled:$,onClick:function(){Y(z,"prev2")},type:"button"},T),null!==I&&a.createElement("button",{"aria-label":N,className:"".concat(J,"__arrow ").concat(J,"__prev-button"),disabled:G,onClick:function(){Y(F,"prev")},type:"button"},I),(t="".concat(J,"__label"),a.createElement("button",{"aria-label":v,"aria-live":y,className:t,disabled:!U,onClick:n,style:{flexGrow:1},type:"button"},a.createElement("span",{className:"".concat(t,"__labelText ").concat(t,"__labelText--from")},X(r)),W&&a.createElement(a.Fragment,null,a.createElement("span",{className:"".concat(t,"__divider")}," – "),a.createElement("span",{className:"".concat(t,"__labelText ").concat(t,"__labelText--to")},X(H))))),null!==C&&a.createElement("button",{"aria-label":j,className:"".concat(J,"__arrow ").concat(J,"__next-button"),disabled:Q,onClick:function(){Y(H,"next")},type:"button"},C),null!==A&&q&&a.createElement("button",{"aria-label":g,className:"".concat(J,"__arrow ").concat(J,"__next2-button"),disabled:K,onClick:function(){Y(Z,"next2")},type:"button"},A))}K.propTypes={activeStartDate:c().instanceOf(Date).isRequired,drillUp:c().func.isRequired,formatMonthYear:c().func,formatYear:c().func,locale:c().string,maxDate:c().instanceOf(Date),minDate:c().instanceOf(Date),navigationAriaLabel:c().string,navigationAriaLive:c().string,navigationLabel:c().func,next2AriaLabel:c().string,next2Label:c().node,nextAriaLabel:c().string,nextLabel:c().node,prev2AriaLabel:c().string,prev2Label:c().node,prevAriaLabel:c().string,prevLabel:c().node,setActiveStartDate:c().func.isRequired,showDoubleView:c().bool,view:G.isRequired,views:Z.isRequired};var X=["children","className","direction","count","offset","style","wrap"];function ee(){return ee=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},ee.apply(this,arguments)}function te(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function re(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?te(Object(r),!0).forEach((function(t){ne(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):te(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function ne(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ae(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}function oe(e){return"".concat(e,"%")}function ce(e){var t=e.children,r=e.className,n=e.direction,o=e.count,c=e.offset,i=e.style,l=e.wrap,u=ae(e,X);return a.createElement("div",ee({className:r,style:re({display:"flex",flexDirection:n,flexWrap:l?"wrap":"no-wrap"},i)},u),a.Children.map(t,(function(e,t){return a.cloneElement(e,re(re({},e.props),{},{style:{flexBasis:oe(100/o),flexShrink:0,flexGrow:0,overflow:"hidden",marginLeft:c&&0===t?oe(100*c/o):null}}))})))}function ie(e){return function(e){if(Array.isArray(e))return le(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return le(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return le(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function le(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function ue(e,t){return t[0]<=e&&t[1]>=e}function se(e,t){return e[0]<=t[0]&&e[1]>=t[1]}function fe(e,t){return ue(e[0],t)||ue(e[1],t)}function pe(e,t,r){var n=[];if(fe(t,e)){n.push(r);var a=ue(e[0],t),o=ue(e[1],t);a&&n.push("".concat(r,"Start")),o&&n.push("".concat(r,"End")),a&&o&&n.push("".concat(r,"BothEnds"))}return n}function de(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.value,r=e.valueType,n=e.date,a=e.dateType,o=e.hover,c="react-calendar__tile",i=[c];if(!n)return i;if(!Array.isArray(n)&&!a)throw new Error("getTileClasses(): Unable to get tile activity classes because one or more required arguments were not passed.");var l=new Date,u=Array.isArray(n)?n:B(a,n);if(ue(l,u)&&i.push("".concat(c,"--now")),!t)return i;if(!Array.isArray(t)&&!r)throw new Error("getTileClasses(): Unable to get tile activity classes because one or more required arguments were not passed.");var s=Array.isArray(t)?t:B(r,t);se(s,u)?i.push("".concat(c,"--active")):fe(s,u)&&i.push("".concat(c,"--hasActive"));var f=pe(s,u,"".concat(c,"--range"));i.push.apply(i,ie(f));var p=[].concat(t);if(o&&1===p.length){var d=o>s[0]?[s[0],o]:[o,s[0]],b=pe(d,u,"".concat(c,"--hover"));i.push.apply(i,ie(b))}return i}ce.propTypes={children:c().node,className:c().string,count:c().number.isRequired,direction:c().string,offset:c().number,style:c().objectOf(c().oneOfType([c().string,c().number])),wrap:c().bool};var be=["className","count","dateTransform","dateType","end","hover","offset","start","step","tile","value","valueType"];function ve(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function ye(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ve(Object(r),!0).forEach((function(t){me(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ve(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function me(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function he(){return he=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},he.apply(this,arguments)}function ge(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}function Oe(e){for(var t=e.className,r=e.count,n=void 0===r?3:r,o=e.dateTransform,c=e.dateType,i=e.end,l=e.hover,u=e.offset,s=e.start,f=e.step,p=void 0===f?1:f,d=e.tile,b=e.value,v=e.valueType,y=ge(e,be),m=[],h=s;h<=i;h+=p){var g=o(h);m.push(a.createElement(d,he({key:g.getTime(),classes:de({value:b,valueType:v,date:g,dateType:c,hover:l}),date:g,point:h},y)))}return a.createElement(ce,{className:t,count:n,offset:u,wrap:!0},m)}function we(e){return we="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},we(e)}function Ae(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function De(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Ae(Object(r),!0).forEach((function(t){xe(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Ae(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function _e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function je(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Ee(e,t){return Ee=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},Ee(e,t)}function Ce(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=ke(e);if(t){var a=ke(this).constructor;r=Reflect.construct(n,arguments,a)}else r=n.apply(this,arguments);return Se(this,r)}}function Se(e,t){if(t&&("object"===we(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Pe(e)}function Pe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ke(e){return ke=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},ke(e)}function xe(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Te(e,t){return e&&!t||!e&&t||e&&t&&e.getTime()!==t.getTime()}function Be(e,t){var r=e.activeStartDate,n=e.date,a=e.view;return"function"==typeof t?t({activeStartDate:r,date:n,view:a}):t}Oe.propTypes=ye(ye({},$),{},{activeStartDate:c().instanceOf(Date),count:c().number,dateTransform:c().func.isRequired,dateType:c().string,offset:c().number,step:c().number,tile:c().func.isRequired});var Ne=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Ee(e,t)}(c,e);var t,r,n,o=Ce(c);function c(){var e;_e(this,c);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return xe(Pe(e=o.call.apply(o,[this].concat(r))),"state",{}),e}return t=c,n=[{key:"getDerivedStateFromProps",value:function(e,t){var r=e.activeStartDate,n=e.tileClassName,a=e.tileContent,o={};return(n!==t.tileClassNameProps||Te(r,t.activeStartDateProps))&&(o.tileClassName=Be(e,n),o.tileClassNameProps=n),(a!==t.tileContentProps||Te(r,t.activeStartDateProps))&&(o.tileContent=Be(e,a),o.tileContentProps=a),o.activeStartDateProps=r,o}}],(r=[{key:"render",value:function(){var e=this.props,t=e.activeStartDate,r=e.children,n=e.classes,o=e.date,c=e.formatAbbr,l=e.locale,u=e.maxDate,s=e.maxDateTransform,f=e.minDate,p=e.minDateTransform,d=e.onClick,b=e.onMouseOver,v=e.style,y=e.tileDisabled,m=e.view,h=this.state,g=h.tileClassName,O=h.tileContent;return a.createElement("button",{className:(0,i.default)(n,g),disabled:f&&p(f)>o||u&&s(u)<o||y&&y({activeStartDate:t,date:o,view:m}),onClick:d&&function(e){return d(o,e)},onFocus:b&&function(){return b(o)},onMouseOver:b&&function(){return b(o)},style:v,type:"button"},c?a.createElement("abbr",{"aria-label":c(l,o)},r):r,O)}}])&&je(t.prototype,r),n&&je(t,n),Object.defineProperty(t,"prototype",{writable:!1}),c}(a.Component);Ne.propTypes=De(De({},Q),{},{children:c().node.isRequired,formatAbbr:c().func,maxDateTransform:c().func.isRequired,minDateTransform:c().func.isRequired});var Me=["classes","formatYear"];function Le(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Re(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Le(Object(r),!0).forEach((function(t){Ie(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Le(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Ie(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Ye(){return Ye=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Ye.apply(this,arguments)}function We(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}function Ve(e){var t=e.classes,r=e.formatYear,n=void 0===r?_:r,o=We(e,Me),c=o.date,i=o.locale;return a.createElement(Ne,Ye({},o,{classes:[].concat(t,"react-calendar__century-view__decades__decade"),maxDateTransform:u.getDecadeEnd,minDateTransform:u.getDecadeStart,view:"century"}),L(i,n,c))}function Ue(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function qe(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Fe(){return Fe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Fe.apply(this,arguments)}function ze(e){var t,r,n=e.activeStartDate,o=(t=n,r=(0,u.getCenturyStart)(t),(0,u.getYear)(r)),c=o+99;return a.createElement(Oe,Fe({},e,{className:"react-calendar__century-view__decades",dateTransform:u.getDecadeStart,dateType:"decade",end:c,start:o,step:10,tile:Ve}))}function He(e){return a.createElement("div",{className:"react-calendar__century-view"},a.createElement(ze,e))}Ve.propTypes=Re(Re({},Q),{},{formatYear:c().func}),ze.propTypes=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Ue(Object(r),!0).forEach((function(t){qe(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Ue(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({},$);var Ze=["classes","formatYear"];function Ge(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function $e(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Ge(Object(r),!0).forEach((function(t){Qe(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Ge(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Qe(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Je(){return Je=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Je.apply(this,arguments)}function Ke(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}function Xe(e){var t=e.classes,r=e.formatYear,n=void 0===r?_:r,o=Ke(e,Ze),c=o.date,i=o.locale;return a.createElement(Ne,Je({},o,{classes:[].concat(t,"react-calendar__decade-view__years__year"),maxDateTransform:u.getYearEnd,minDateTransform:u.getYearStart,view:"decade"}),n(i,c))}function et(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function tt(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function rt(){return rt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},rt.apply(this,arguments)}function nt(e){var t,r,n=e.activeStartDate,o=(t=n,r=(0,u.getDecadeStart)(t),(0,u.getYear)(r)),c=o+9;return a.createElement(Oe,rt({},e,{className:"react-calendar__decade-view__years",dateTransform:function(e){var t=new Date;return t.setFullYear(e,0,1),t.setHours(0,0,0,0),t},dateType:"year",end:c,start:o,tile:Xe}))}function at(e){return a.createElement("div",{className:"react-calendar__decade-view"},a.createElement(nt,e))}Xe.propTypes=$e($e({},Q),{},{formatYear:c().func}),nt.propTypes=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?et(Object(r),!0).forEach((function(t){tt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):et(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({},$);var ot=["classes","formatMonth","formatMonthYear"];function ct(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function it(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ct(Object(r),!0).forEach((function(t){lt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ct(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function lt(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ut(){return ut=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},ut.apply(this,arguments)}function st(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}function ft(e){var t=e.classes,r=e.formatMonth,n=void 0===r?O:r,o=e.formatMonthYear,c=void 0===o?w:o,i=st(e,ot),l=i.date,s=i.locale;return a.createElement(Ne,ut({},i,{classes:[].concat(t,"react-calendar__year-view__months__month"),formatAbbr:c,maxDateTransform:u.getMonthEnd,minDateTransform:u.getMonthStart,view:"year"}),n(s,l))}function pt(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function dt(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?pt(Object(r),!0).forEach((function(t){bt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):pt(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function bt(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function vt(){return vt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},vt.apply(this,arguments)}function yt(e){var t=e.activeStartDate,r=(0,u.getYear)(t);return a.createElement(Oe,vt({},e,{className:"react-calendar__year-view__months",dateTransform:function(e){var t=new Date;return t.setFullYear(r,e,1),t.setHours(0,0,0,0),t},dateType:"month",end:11,start:0,tile:ft}))}function mt(e){return a.createElement("div",{className:"react-calendar__year-view"},a.createElement(yt,e))}ft.propTypes=it(it({},Q),{},{formatMonth:c().func,formatMonthYear:c().func}),yt.propTypes=dt(dt({},$),{},{locale:c().string});var ht=["formatDay","formatLongDate","calendarType","classes","currentMonthIndex"];function gt(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Ot(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?gt(Object(r),!0).forEach((function(t){wt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):gt(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function wt(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function At(){return At=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},At.apply(this,arguments)}function Dt(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var _t="react-calendar__month-view__days__day";function jt(e){var t=e.formatDay,r=void 0===t?h:t,n=e.formatLongDate,o=void 0===n?g:n,c=e.calendarType,i=e.classes,l=e.currentMonthIndex,s=Dt(e,ht),f=s.date,p=s.locale;return a.createElement(Ne,At({},s,{classes:[].concat(i,_t,R(f,c)?"".concat(_t,"--weekend"):null,f.getMonth()!==l?"".concat(_t,"--neighboringMonth"):null),formatAbbr:o,maxDateTransform:u.getDayEnd,minDateTransform:u.getDayStart,view:"month"}),r(p,f))}jt.propTypes=Ot(Ot({},Q),{},{currentMonthIndex:c().number.isRequired,formatDay:c().func,formatLongDate:c().func});var Et=["showFixedNumberOfWeeks","showNeighboringMonth"];function Ct(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function St(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Pt(){return Pt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Pt.apply(this,arguments)}function kt(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}function xt(e){var t=e.activeStartDate,r=e.calendarType,n=e.showFixedNumberOfWeeks,o=e.showNeighboringMonth,c=kt(e,Et),i=(0,u.getYear)(t),l=(0,u.getMonth)(t),s=n||o,f=S(t,r),p=s?0:f,d=1+(s?-f:0),b=function(){if(n)return d+42-1;var e=(0,u.getDaysInMonth)(t);if(o){var a=new Date;return a.setFullYear(i,l,e),a.setHours(0,0,0,0),e+(7-S(a,r)-1)}return e}();return a.createElement(Oe,Pt({},c,{className:"react-calendar__month-view__days",count:7,currentMonthIndex:l,dateTransform:function(e){var t=new Date;return t.setFullYear(i,l,e),t.setHours(0,0,0,0),t},dateType:"day",end:b,offset:p,start:d,tile:jt}))}xt.propTypes=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Ct(Object(r),!0).forEach((function(t){St(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Ct(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({calendarType:V.isRequired,showFixedNumberOfWeeks:c().bool,showNeighboringMonth:c().bool},$);var Tt="react-calendar__month-view__weekdays";function Bt(e){for(var t=e.calendarType,r=e.formatShortWeekday,n=void 0===r?A:r,o=e.locale,c=e.onMouseLeave,i=new Date,l=(0,u.getMonthStart)(i),s=(0,u.getYear)(l),f=(0,u.getMonth)(l),p=[],d=1;d<=7;d+=1){var b=new Date(s,f,d-S(l,t)),v=D(o,b);p.push(a.createElement("div",{key:d,className:"".concat(Tt,"__weekday")},a.createElement("abbr",{"aria-label":v,title:v},n(o,b).replace(".",""))))}return a.createElement(ce,{className:Tt,count:7,onFocus:c,onMouseOver:c},p)}Bt.propTypes={calendarType:V.isRequired,formatShortWeekday:c().func,locale:c().string,onMouseLeave:c().func};var Nt=["date","onClickWeekNumber","weekNumber"];function Mt(){return Mt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Mt.apply(this,arguments)}function Lt(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Rt(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function It(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}function Yt(e){var t=e.date,r=e.onClickWeekNumber,n=e.weekNumber,o=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Lt(Object(r),!0).forEach((function(t){Rt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Lt(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({className:"react-calendar__tile"},It(e,Nt)),c=a.createElement("span",null,n);return r?a.createElement("button",Mt({},o,{onClick:function(e){return r(n,t,e)},type:"button"}),c):a.createElement("div",o,c)}function Wt(e){var t=e.activeStartDate,r=e.calendarType,n=e.onClickWeekNumber,o=e.onMouseLeave,c=e.showFixedNumberOfWeeks,i=function(){if(c)return 6;var e=(0,u.getDaysInMonth)(t)-(7-S(t,r));return 1+Math.ceil(e/7)}(),l=function(){for(var e=(0,u.getYear)(t),n=(0,u.getMonth)(t),a=(0,u.getDate)(t),o=[],c=0;c<i;c+=1)o.push(P(new Date(e,n,a+7*c),r));return o}(),s=l.map((function(e){return function(e){var t,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:d.ISO_8601,n=r===d.US?d.US:d.ISO_8601,a=P(e,r),o=(0,u.getYear)(e)+1;do{t=P(new Date(o,0,n===d.ISO_8601?4:1),r),o-=1}while(e<t);return Math.round((a-t)/6048e5)+1}(e,r)}));return a.createElement(ce,{className:"react-calendar__month-view__weekNumbers",count:i,direction:"column",onFocus:o,onMouseOver:o,style:{flexBasis:"calc(100% * (1 / 8)",flexShrink:0}},s.map((function(e,t){return a.createElement(Yt,{key:e,date:l[t],onClickWeekNumber:n,weekNumber:e})})))}Yt.propTypes={date:c().instanceOf(Date).isRequired,onClickWeekNumber:c().func,weekNumber:c().node.isRequired},Wt.propTypes={activeStartDate:c().instanceOf(Date).isRequired,calendarType:V.isRequired,onClickWeekNumber:c().func,onMouseLeave:c().func,showFixedNumberOfWeeks:c().bool};var Vt=["calendarType","formatShortWeekday","onClickWeekNumber","showWeekNumbers"];function Ut(){return Ut=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Ut.apply(this,arguments)}function qt(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}function Ft(e){var t=e.activeStartDate,r=e.locale,n=e.onMouseLeave,o=e.showFixedNumberOfWeeks,c=e.calendarType,l=void 0===c?function(e){return Object.keys(b).find((function(t){return b[t].includes(e)}))||d.ISO_8601}(r):c,u=e.formatShortWeekday,s=e.onClickWeekNumber,f=e.showWeekNumbers,p=qt(e,Vt);var v="react-calendar__month-view";return a.createElement("div",{className:(0,i.default)(v,f?"".concat(v,"--weekNumbers"):"")},a.createElement("div",{style:{display:"flex",alignItems:"flex-end"}},f?a.createElement(Wt,{activeStartDate:t,calendarType:l,onClickWeekNumber:s,onMouseLeave:n,showFixedNumberOfWeeks:o}):null,a.createElement("div",{style:{flexGrow:1,width:"100%"}},a.createElement(Bt,{calendarType:l,formatShortWeekday:u,locale:r,onMouseLeave:n}),a.createElement(xt,Ut({calendarType:l},p)))))}Ft.propTypes={activeStartDate:c().instanceOf(Date).isRequired,calendarType:V,formatShortWeekday:c().func,locale:c().string,onClickWeekNumber:c().func,onMouseLeave:c().func,showFixedNumberOfWeeks:c().bool,showWeekNumbers:c().bool};var zt=["activeStartDate","defaultActiveStartDate","defaultValue","defaultView","maxDetail","minDetail","value","view"];function Ht(){return Ht=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Ht.apply(this,arguments)}function Zt(e){return Zt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zt(e)}function Gt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function $t(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Qt(e,t){return Qt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},Qt(e,t)}function Jt(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=er(e);if(t){var a=er(this).constructor;r=Reflect.construct(n,arguments,a)}else r=n.apply(this,arguments);return Kt(this,r)}}function Kt(e,t){if(t&&("object"===Zt(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Xt(e)}function Xt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function er(e){return er=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},er(e)}function tr(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function rr(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?tr(Object(r),!0).forEach((function(t){nr(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):tr(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function nr(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ar(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}function or(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var cr=new Date;cr.setFullYear(1,0,1),cr.setHours(0,0,0,0);var ir=new Date(864e13),lr="react-calendar",ur=["century","decade","year","month"],sr=[].concat(function(e){return function(e){if(Array.isArray(e))return or(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return or(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return or(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(ur.slice(1)),["day"]);function fr(e,t){return ur.slice(ur.indexOf(e),ur.indexOf(t)+1)}function pr(e,t,r){return function(e,t,r){return-1!==fr(t,r).indexOf(e)}(e,t,r)?e:r}function dr(e){return sr[ur.indexOf(e)]}function br(e,t){if(!e)return null;var r=Array.isArray(e)&&2===e.length?e[t]:e;if(!r)return null;var n=function(e){return e instanceof Date?e:new Date(e)}(r);if(isNaN(n.getTime()))throw new Error("Invalid date: ".concat(e));return n}function vr(e,t){var r=e.value,n=e.minDate,a=e.maxDate,o=e.maxDetail,c=br(r,t);if(!c)return null;var i=dr(o);return function(e,t,r){return t&&t>e?t:r&&r<e?r:e}([k,T][t](i,c),n,a)}var yr=function(e){return vr(e,0)},mr=function(e){return vr(e,1)},hr=function(e){var t=e.value;return Array.isArray(t)?t:[yr,mr].map((function(t){return t(e)}))};function gr(e){var t=e.maxDate,r=e.maxDetail,n=e.minDate,a=e.minDetail,o=e.value;return k(pr(e.view,a,r),yr({value:o,minDate:n,maxDate:t,maxDetail:r})||new Date)}var Or=function(e){return e&&1===[].concat(e).length},wr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Qt(e,t)}(c,e);var t,r,n,o=Jt(c);function c(){var e;Gt(this,c);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return nr(Xt(e=o.call.apply(o,[this].concat(r))),"state",{activeStartDate:e.props.defaultActiveStartDate,value:e.props.defaultValue,view:e.props.defaultView}),nr(Xt(e),"setStateAndCallCallbacks",(function(t,r,n){var a=Xt(e),o=a.activeStartDate,c=a.view,i=e.props,l=i.allowPartialRange,u=i.onActiveStartDateChange,s=i.onChange,f=i.onViewChange,p=i.selectRange,d={activeStartDate:o,view:c};e.setState(t,(function(){var a={action:t.action,activeStartDate:t.activeStartDate||e.activeStartDate,value:t.value||e.value,view:t.view||e.view};function o(e){return e in t&&(Zt(t[e])!==Zt(d[e])||(t[e]instanceof Date?t[e].getTime()!==d[e].getTime():t[e]!==d[e]))}(o("activeStartDate")&&u&&u(a),o("view")&&f&&f(a),o("value"))&&(s&&(p&&Or(t.value)?l&&s([t.value],r):s(t.value,r)));n&&n(a)}))})),nr(Xt(e),"setActiveStartDate",(function(t,r){e.setStateAndCallCallbacks({action:r,activeStartDate:t})})),nr(Xt(e),"drillDown",(function(t,r){if(e.drillDownAvailable){e.onClickTile(t,r);var n=Xt(e),a=n.view,o=n.views,c=e.props.onDrillDown,i=o[o.indexOf(a)+1];e.setStateAndCallCallbacks({action:"drillDown",activeStartDate:t,view:i},void 0,c)}})),nr(Xt(e),"drillUp",(function(){if(e.drillUpAvailable){var t=Xt(e),r=t.activeStartDate,n=t.view,a=t.views,o=e.props.onDrillUp,c=a[a.indexOf(n)-1],i=k(c,r);e.setStateAndCallCallbacks({action:"drillUp",activeStartDate:i,view:c},void 0,o)}})),nr(Xt(e),"onChange",(function(t,r){var n,a=e.props.selectRange;if(e.onClickTile(t,r),a){var o=Xt(e),c=o.value,i=o.valueType;n=Or(c)?N(i,c,t):k(i,t)}else n=e.getProcessedValue(t);var l=gr(rr(rr({},e.props),{},{value:n}));r.persist(),e.setStateAndCallCallbacks({action:"onChange",activeStartDate:l,value:n},r)})),nr(Xt(e),"onClickTile",(function(t,r){var n=Xt(e).view,a=e.props,o=a.onClickDay,c=a.onClickDecade,i=a.onClickMonth,l=a.onClickYear,u=function(){switch(n){case"century":return c;case"decade":return l;case"year":return i;case"month":return o;default:throw new Error("Invalid view: ".concat(n,"."))}}();u&&u(t,r)})),nr(Xt(e),"onMouseOver",(function(t){e.setState((function(e){return e.hover&&e.hover.getTime()===t.getTime()?null:{hover:t}}))})),nr(Xt(e),"onMouseLeave",(function(){e.setState({hover:null})})),e}return t=c,r=[{key:"activeStartDate",get:function(){var e,t,r,n,a,o,c,i,l,u,s,f,p=this.props.activeStartDate,d=this.state.activeStartDate;return p||d||(e=this.props,t=e.activeStartDate,r=e.defaultActiveStartDate,n=e.defaultValue,a=e.defaultView,o=e.maxDetail,c=e.minDetail,i=e.value,l=e.view,u=ar(e,zt),s=pr(l,c,o),(f=t||r)?k(s,f):gr(rr({maxDetail:o,minDetail:c,value:i||n,view:l||a},u)))}},{key:"value",get:function(){var e=this.props,t=e.selectRange,r=e.value,n=this.state.value;return t&&Or(n)?n:void 0!==r?r:n}},{key:"valueType",get:function(){return dr(this.props.maxDetail)}},{key:"view",get:function(){var e=this.props,t=e.minDetail,r=e.maxDetail,n=e.view,a=this.state.view;return pr(n||a,t,r)}},{key:"views",get:function(){var e=this.props;return fr(e.minDetail,e.maxDetail)}},{key:"hover",get:function(){var e=this.props.selectRange,t=this.state.hover;return e?t:null}},{key:"drillDownAvailable",get:function(){var e=this.view,t=this.views;return t.indexOf(e)<t.length-1}},{key:"drillUpAvailable",get:function(){var e=this.view;return this.views.indexOf(e)>0}},{key:"getProcessedValue",value:function(e){var t=this.props,r=t.minDate,n=t.maxDate,a=t.maxDetail,o=t.returnValue;return function(){switch(o){case"start":return yr;case"end":return mr;case"range":return hr;default:throw new Error("Invalid returnValue.")}}()({value:e,minDate:r,maxDate:n,maxDetail:a})}},{key:"renderContent",value:function(e){var t=this.activeStartDate,r=this.onMouseOver,n=this.valueType,o=this.value,c=this.view,i=this.props,l=i.calendarType,u=i.locale,s=i.maxDate,f=i.minDate,p=i.selectRange,d=i.tileClassName,b=i.tileContent,v=i.tileDisabled,y=this.hover,m={activeStartDate:e?x(c,t):k(c,t),hover:y,locale:u,maxDate:s,minDate:f,onClick:this.drillDownAvailable?this.drillDown:this.onChange,onMouseOver:p?r:null,tileClassName:d,tileContent:b,tileDisabled:v,value:o,valueType:n};switch(c){case"century":var h=this.props.formatYear;return a.createElement(He,Ht({formatYear:h},m));case"decade":var g=this.props.formatYear;return a.createElement(at,Ht({formatYear:g},m));case"year":var O=this.props,w=O.formatMonth,A=O.formatMonthYear;return a.createElement(mt,Ht({formatMonth:w,formatMonthYear:A},m));case"month":var D=this.props,_=D.formatDay,j=D.formatLongDate,E=D.formatShortWeekday,C=D.onClickWeekNumber,S=D.showDoubleView,P=D.showFixedNumberOfWeeks,T=D.showNeighboringMonth,B=D.showWeekNumbers,N=this.onMouseLeave;return a.createElement(Ft,Ht({calendarType:l,formatDay:_,formatLongDate:j,formatShortWeekday:E,onClickWeekNumber:C,onMouseLeave:p?N:null,showFixedNumberOfWeeks:void 0!==P?P:S,showNeighboringMonth:T,showWeekNumbers:B},m));default:throw new Error("Invalid view: ".concat(c,"."))}}},{key:"renderNavigation",value:function(){if(!this.props.showNavigation)return null;var e=this.activeStartDate,t=this.view,r=this.views,n=this.props,o=n.formatMonthYear,c=n.formatYear,i=n.locale,l=n.maxDate,u=n.minDate,s=n.navigationAriaLabel,f=n.navigationAriaLive,p=n.navigationLabel,d=n.next2AriaLabel,b=n.next2Label,v=n.nextAriaLabel,y=n.nextLabel,m=n.prev2AriaLabel,h=n.prev2Label,g=n.prevAriaLabel,O=n.prevLabel,w=n.showDoubleView;return a.createElement(K,{activeStartDate:e,drillUp:this.drillUp,formatMonthYear:o,formatYear:c,locale:i,maxDate:l,minDate:u,navigationAriaLabel:s,navigationAriaLive:f,navigationLabel:p,next2AriaLabel:d,next2Label:b,nextAriaLabel:v,nextLabel:y,prev2AriaLabel:m,prev2Label:h,prevAriaLabel:g,prevLabel:O,setActiveStartDate:this.setActiveStartDate,showDoubleView:w,view:t,views:r})}},{key:"render",value:function(){var e=this.props,t=e.className,r=e.inputRef,n=e.selectRange,o=e.showDoubleView,c=this.onMouseLeave,l=this.value,u=[].concat(l);return a.createElement("div",{className:(0,i.default)(lr,n&&1===u.length&&"".concat(lr,"--selectRange"),o&&"".concat(lr,"--doubleView"),t),ref:r},this.renderNavigation(),a.createElement("div",{className:"".concat(lr,"__viewContainer"),onBlur:n?c:null,onMouseLeave:n?c:null},this.renderContent(),o&&this.renderContent(!0)))}}],r&&$t(t.prototype,r),n&&$t(t,n),Object.defineProperty(t,"prototype",{writable:!1}),c}(a.Component);wr.defaultProps={maxDate:ir,maxDetail:"month",minDate:cr,minDetail:"century",returnValue:"start",showNavigation:!0,showNeighboringMonth:!0};var Ar=c().instanceOf(Date),Dr=c().oneOfType([c().string,H]);wr.propTypes={activeStartDate:Ar,allowPartialRange:c().bool,calendarType:V,className:U,defaultActiveStartDate:Ar,defaultValue:Dr,defaultView:G,formatDay:c().func,formatLongDate:c().func,formatMonth:c().func,formatMonthYear:c().func,formatShortWeekday:c().func,formatYear:c().func,inputRef:z,locale:c().string,maxDate:F,maxDetail:c().oneOf(ur),minDate:q,minDetail:c().oneOf(ur),navigationAriaLabel:c().string,navigationAriaLive:c().oneOf(["off","polite","assertive"]),navigationLabel:c().func,next2AriaLabel:c().string,next2Label:c().node,nextAriaLabel:c().string,nextLabel:c().node,onActiveStartDateChange:c().func,onChange:c().func,onClickDay:c().func,onClickDecade:c().func,onClickMonth:c().func,onClickWeekNumber:c().func,onClickYear:c().func,onDrillDown:c().func,onDrillUp:c().func,onViewChange:c().func,prev2AriaLabel:c().string,prev2Label:c().node,prevAriaLabel:c().string,prevLabel:c().node,returnValue:c().oneOf(["start","end","range"]),selectRange:c().bool,showDoubleView:c().bool,showFixedNumberOfWeeks:c().bool,showNavigation:c().bool,showNeighboringMonth:c().bool,showWeekNumbers:c().bool,tileClassName:c().oneOfType([c().func,U]),tileContent:c().oneOfType([c().func,c().node]),tileDisabled:c().func,value:Dr,view:G};const _r=wr},8687:(e,t,r)=>{r.r(t),r.d(t,{default:()=>m});var n=r(3379),a=r.n(n),o=r(7795),c=r.n(o),i=r(569),l=r.n(i),u=r(3565),s=r.n(u),f=r(9216),p=r.n(f),d=r(4589),b=r.n(d),v=r(5299),y={};y.styleTagTransform=b(),y.setAttributes=s(),y.insert=l().bind(null,"head"),y.domAPI=c(),y.insertStyleElement=p();a()(v.Z,y);const m=v.Z&&v.Z.locals?v.Z.locals:void 0}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBtLnJlYWN0LWNhbGVuZGFyLjcxYWU3YTYzNzQ4MWRmMjM3YTUxLmpzIiwibWFwcGluZ3MiOiJnS0FHSUEsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSw4eUZBQSt5RixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyw2REFBNkQsTUFBUSxHQUFHLFNBQVcsbzVCQUFvNUIsZUFBaUIsQ0FBQywreUZBQSt5RixXQUFhLE1BRXhxTixTLDBJQ1BJQyxFLDBEQVlKLFNBQVNDLEVBQWtCQyxFQUFLQyxJQUFrQixNQUFQQSxHQUFlQSxFQUFNRCxFQUFJRSxVQUFRRCxFQUFNRCxFQUFJRSxRQUFRLElBQUssSUFBSUMsRUFBSSxFQUFHQyxFQUFPLElBQUlDLE1BQU1KLEdBQU1FLEVBQUlGLEVBQUtFLElBQU9DLEVBQUtELEdBQUtILEVBQUlHLEdBQU0sT0FBT0MsQ0FBTSxDQUV0TCxTQUFTRSxFQUFnQkMsRUFBS0MsRUFBS0MsR0FBaUssT0FBcEpELEtBQU9ELEVBQU9HLE9BQU9DLGVBQWVKLEVBQUtDLEVBQUssQ0FBRUMsTUFBT0EsRUFBT0csWUFBWSxFQUFNQyxjQUFjLEVBQU1DLFVBQVUsSUFBa0JQLEVBQUlDLEdBQU9DLEVBQWdCRixDQUFLLENBRXpNLElBZHFCUCxFQWNqQmUsRUFBaUIsQ0FDMUJDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxTQUFVLFdBQ1ZDLEdBQUksTUFFS0MsR0FBcURkLEVBQTVCUixFQUF3QixDQUFDLEVBQTBDaUIsRUFBZUksR0FBSSxDQUFDLFFBQVMsUUFBUyxRQUFTLFFBQVMsUUFBUyxRQUFTLFFBQVMsUUFBUyxRQUFTLFFBQVMsUUFBUyxRQUFTLFFBQVMsUUFBUyxRQUFTLFFBQVMsUUFBUyxRQUFTLFVBQVdiLEVBQWdCUixFQUF1QmlCLEVBQWVDLE9BQVEsQ0FDdFcsS0FBTSxRQUFTLFFBQVMsUUFBUyxRQUFTLFFBQVMsUUFBUyxRQUFTLFFBQVMsUUFBUyxRQUFTLFFBQVMsUUFBUyxRQUFT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U0FDYkcsVUFBVyxTQUNYYixhQUFjLFNBQ2RwUixlQUFnQixXQUNoQkUsV0FBWSxTQUNaRSxjQUFlLFdBQ2ZFLFVBQVcsU0FDWGdULFlBQWEsVUFBZ0IsQ0FBQyxRQUFTLE1BQU8sVUFDOUNqQyxZQUFhLFNBQ2I3USxlQUFnQixTQUNoQitMLHVCQUF3QixTQUN4QnlILGVBQWdCLFNBQ2hCeEgscUJBQXNCLFNBQ3RCcUMsZ0JBQWlCLFNBQ2pCelEsY0FBZSxjQUFvQixDQUFDLFNBQWdCdkIsSUFDcER3QixZQUFhLGNBQW9CLENBQUMsU0FBZ0IsV0FDbERLLGFBQWMsU0FDZGxKLE1BQU9rZixHQUNQaFgsS0FBTUQsR0Nud0JSLFcsOEtDTUkxRixFQUFVLENBQUMsRUFFZkEsRUFBUTRjLGtCQUFvQixJQUM1QjVjLEVBQVE2YyxjQUFnQixJQUVsQjdjLEVBQVE4YyxPQUFTLFNBQWMsS0FBTSxRQUUzQzljLEVBQVErYyxPQUFTLElBQ2pCL2MsRUFBUWdkLG1CQUFxQixJQUVoQixJQUFJLElBQVNoZCxHQUtuQixRQUFlLEtBQVcsV0FBaUIsZ0JBQWlCMkIsQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RyYWRlYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXIvZGlzdC9DYWxlbmRhci5jc3MiLCJ3ZWJwYWNrOi8vdHJhZGVhbmFseXplci8uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci9kaXN0L2VzbS9zaGFyZWQvY29uc3QuanMiLCJ3ZWJwYWNrOi8vdHJhZGVhbmFseXplci8uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci9kaXN0L2VzbS9zaGFyZWQvZGF0ZUZvcm1hdHRlci5qcyIsIndlYnBhY2s6Ly90cmFkZWFuYWx5emVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyL2Rpc3QvZXNtL3NoYXJlZC9kYXRlcy5qcyIsIndlYnBhY2s6Ly90cmFkZWFuYWx5emVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyL2Rpc3QvZXNtL3NoYXJlZC9wcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vdHJhZGVhbmFseXplci8uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci9kaXN0L2VzbS9DYWxlbmRhci9OYXZpZ2F0aW9uLmpzIiwid2VicGFjazovL3RyYWRlYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXIvZGlzdC9lc20vRmxleC5qcyIsIndlYnBhY2s6Ly90cmFkZWFuYWx5emVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyL2Rpc3QvZXNtL3NoYXJlZC91dGlscy5qcyIsIndlYnBhY2s6Ly90cmFkZWFuYWx5emVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyL2Rpc3QvZXNtL1RpbGVHcm91cC5qcyIsIndlYnBhY2s6Ly90cmFkZWFuYWx5emVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyL2Rpc3QvZXNtL1RpbGUuanMiLCJ3ZWJwYWNrOi8vdHJhZGVhbmFseXplci8uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci9kaXN0L2VzbS9DZW50dXJ5Vmlldy9EZWNhZGUuanMiLCJ3ZWJwYWNrOi8vdHJhZGVhbmFseXplci8uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci9kaXN0L2VzbS9DZW50dXJ5Vmlldy9EZWNhZGVzLmpzIiwid2VicGFjazovL3RyYWRlYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXIvZGlzdC9lc20vQ2VudHVyeVZpZXcuanMiLCJ3ZWJwYWNrOi8vdHJhZGVhbmFseXplci8uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci9kaXN0L2VzbS9EZWNhZGVWaWV3L1llYXIuanMiLCJ3ZWJwYWNrOi8vdHJhZGVhbmFseXplci8uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci9kaXN0L2VzbS9EZWNhZGVWaWV3L1llYXJzLmpzIiwid2VicGFjazovL3RyYWRlYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXIvZGlzdC9lc20vRGVjYWRlVmlldy5qcyIsIndlYnBhY2s6Ly90cmFkZWFuYWx5emVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyL2Rpc3QvZXNtL1llYXJWaWV3L01vbnRoLmpzIiwid2VicGFjazovL3RyYWRlYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXIvZGlzdC9lc20vWWVhclZpZXcvTW9udGhzLmpzIiwid2VicGFjazovL3RyYWRlYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXIvZGlzdC9lc20vWWVhclZpZXcuanMiLCJ3ZWJwYWNrOi8vdHJhZGVhbmFseXplci8uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci9kaXN0L2VzbS9Nb250aFZpZXcvRGF5LmpzIiwid2VicGFjazovL3RyYWRlYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXIvZGlzdC9lc20vTW9udGhWaWV3L0RheXMuanMiLCJ3ZWJwYWNrOi8vdHJhZGVhbmFseXplci8uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci9kaXN0L2VzbS9Nb250aFZpZXcvV2Vla2RheXMuanMiLCJ3ZWJwYWNrOi8vdHJhZGVhbmFseXplci8uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci9kaXN0L2VzbS9Nb250aFZpZXcvV2Vla051bWJlci5qcyIsIndlYnBhY2s6Ly90cmFkZWFuYWx5emVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyL2Rpc3QvZXNtL01vbnRoVmlldy9XZWVrTnVtYmVycy5qcyIsIndlYnBhY2s6Ly90cmFkZWFuYWx5emVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyL2Rpc3QvZXNtL01vbnRoVmlldy5qcyIsIndlYnBhY2s6Ly90cmFkZWFuYWx5emVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNhbGVuZGFyL2Rpc3QvZXNtL0NhbGVuZGFyLmpzIiwid2VicGFjazovL3RyYWRlYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtY2FsZW5kYXIvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdHJhZGVhbmFseXplci8uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci9kaXN0L0NhbGVuZGFyLmNzcz9hOWE2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5yZWFjdC1jYWxlbmRhciB7XFxuICB3aWR0aDogMzUwcHg7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNhMGEwOTY7XFxuICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXG4gIGxpbmUtaGVpZ2h0OiAxLjEyNWVtO1xcbn1cXG4ucmVhY3QtY2FsZW5kYXItLWRvdWJsZVZpZXcge1xcbiAgd2lkdGg6IDcwMHB4O1xcbn1cXG4ucmVhY3QtY2FsZW5kYXItLWRvdWJsZVZpZXcgLnJlYWN0LWNhbGVuZGFyX192aWV3Q29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBtYXJnaW46IC0wLjVlbTtcXG59XFxuLnJlYWN0LWNhbGVuZGFyLS1kb3VibGVWaWV3IC5yZWFjdC1jYWxlbmRhcl9fdmlld0NvbnRhaW5lciA+ICoge1xcbiAgd2lkdGg6IDUwJTtcXG4gIG1hcmdpbjogMC41ZW07XFxufVxcbi5yZWFjdC1jYWxlbmRhcixcXG4ucmVhY3QtY2FsZW5kYXIgKixcXG4ucmVhY3QtY2FsZW5kYXIgKjpiZWZvcmUsXFxuLnJlYWN0LWNhbGVuZGFyICo6YWZ0ZXIge1xcbiAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuLnJlYWN0LWNhbGVuZGFyIGJ1dHRvbiB7XFxuICBtYXJnaW46IDA7XFxuICBib3JkZXI6IDA7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG4ucmVhY3QtY2FsZW5kYXIgYnV0dG9uOmVuYWJsZWQ6aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4ucmVhY3QtY2FsZW5kYXJfX25hdmlnYXRpb24ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogNDRweDtcXG4gIG1hcmdpbi1ib3R0b206IDFlbTtcXG59XFxuLnJlYWN0LWNhbGVuZGFyX19uYXZpZ2F0aW9uIGJ1dHRvbiB7XFxuICBtaW4td2lkdGg6IDQ0cHg7XFxuICBiYWNrZ3JvdW5kOiBub25lO1xcbn1cXG4ucmVhY3QtY2FsZW5kYXJfX25hdmlnYXRpb24gYnV0dG9uOmRpc2FibGVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XFxufVxcbi5yZWFjdC1jYWxlbmRhcl9fbmF2aWdhdGlvbiBidXR0b246ZW5hYmxlZDpob3ZlcixcXG4ucmVhY3QtY2FsZW5kYXJfX25hdmlnYXRpb24gYnV0dG9uOmVuYWJsZWQ6Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U2ZTZlNjtcXG59XFxuLnJlYWN0LWNhbGVuZGFyX19tb250aC12aWV3X193ZWVrZGF5cyB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDAuNzVlbTtcXG59XFxuLnJlYWN0LWNhbGVuZGFyX19tb250aC12aWV3X193ZWVrZGF5c19fd2Vla2RheSB7XFxuICBwYWRkaW5nOiAwLjVlbTtcXG59XFxuLnJlYWN0LWNhbGVuZGFyX19tb250aC12aWV3X193ZWVrTnVtYmVycyAucmVhY3QtY2FsZW5kYXJfX3RpbGUge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogMC43NWVtO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcbi5yZWFjdC1jYWxlbmRhcl9fbW9udGgtdmlld19fZGF5c19fZGF5LS13ZWVrZW5kIHtcXG4gIGNvbG9yOiAjZDEwMDAwO1xcbn1cXG4ucmVhY3QtY2FsZW5kYXJfX21vbnRoLXZpZXdfX2RheXNfX2RheS0tbmVpZ2hib3JpbmdNb250aCB7XFxuICBjb2xvcjogIzc1NzU3NTtcXG59XFxuLnJlYWN0LWNhbGVuZGFyX195ZWFyLXZpZXcgLnJlYWN0LWNhbGVuZGFyX190aWxlLFxcbi5yZWFjdC1jYWxlbmRhcl9fZGVjYWRlLXZpZXcgLnJlYWN0LWNhbGVuZGFyX190aWxlLFxcbi5yZWFjdC1jYWxlbmRhcl9fY2VudHVyeS12aWV3IC5yZWFjdC1jYWxlbmRhcl9fdGlsZSB7XFxuICBwYWRkaW5nOiAyZW0gMC41ZW07XFxufVxcbi5yZWFjdC1jYWxlbmRhcl9fdGlsZSB7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAxMHB4IDYuNjY2N3B4O1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGxpbmUtaGVpZ2h0OiAxNnB4O1xcbn1cXG4ucmVhY3QtY2FsZW5kYXJfX3RpbGU6ZGlzYWJsZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YwZjBmMDtcXG59XFxuLnJlYWN0LWNhbGVuZGFyX190aWxlOmVuYWJsZWQ6aG92ZXIsXFxuLnJlYWN0LWNhbGVuZGFyX190aWxlOmVuYWJsZWQ6Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U2ZTZlNjtcXG59XFxuLnJlYWN0LWNhbGVuZGFyX190aWxlLS1ub3cge1xcbiAgYmFja2dyb3VuZDogI2ZmZmY3NjtcXG59XFxuLnJlYWN0LWNhbGVuZGFyX190aWxlLS1ub3c6ZW5hYmxlZDpob3ZlcixcXG4ucmVhY3QtY2FsZW5kYXJfX3RpbGUtLW5vdzplbmFibGVkOmZvY3VzIHtcXG4gIGJhY2tncm91bmQ6ICNmZmZmYTk7XFxufVxcbi5yZWFjdC1jYWxlbmRhcl9fdGlsZS0taGFzQWN0aXZlIHtcXG4gIGJhY2tncm91bmQ6ICM3NmJhZmY7XFxufVxcbi5yZWFjdC1jYWxlbmRhcl9fdGlsZS0taGFzQWN0aXZlOmVuYWJsZWQ6aG92ZXIsXFxuLnJlYWN0LWNhbGVuZGFyX190aWxlLS1oYXNBY3RpdmU6ZW5hYmxlZDpmb2N1cyB7XFxuICBiYWNrZ3JvdW5kOiAjYTlkNGZmO1xcbn1cXG4ucmVhY3QtY2FsZW5kYXJfX3RpbGUtLWFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kOiAjMDA2ZWRjO1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cXG4ucmVhY3QtY2FsZW5kYXJfX3RpbGUtLWFjdGl2ZTplbmFibGVkOmhvdmVyLFxcbi5yZWFjdC1jYWxlbmRhcl9fdGlsZS0tYWN0aXZlOmVuYWJsZWQ6Zm9jdXMge1xcbiAgYmFja2dyb3VuZDogIzEwODdmZjtcXG59XFxuLnJlYWN0LWNhbGVuZGFyLS1zZWxlY3RSYW5nZSAucmVhY3QtY2FsZW5kYXJfX3RpbGUtLWhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlNmU2ZTY7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9yZWFjdC1jYWxlbmRhci9kaXN0L0NhbGVuZGFyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFlBQVk7RUFDWixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLHlCQUF5QjtFQUN6Qix5Q0FBeUM7RUFDekMsb0JBQW9CO0FBQ3RCO0FBQ0E7RUFDRSxZQUFZO0FBQ2Q7QUFDQTtFQUNFLGFBQWE7RUFDYixjQUFjO0FBQ2hCO0FBQ0E7RUFDRSxVQUFVO0VBQ1YsYUFBYTtBQUNmO0FBQ0E7Ozs7RUFJRSwyQkFBMkI7RUFDM0IsOEJBQThCO0VBQzlCLHNCQUFzQjtBQUN4QjtBQUNBO0VBQ0UsU0FBUztFQUNULFNBQVM7RUFDVCxhQUFhO0FBQ2Y7QUFDQTtFQUNFLGVBQWU7QUFDakI7QUFDQTtFQUNFLGFBQWE7RUFDYixZQUFZO0VBQ1osa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxlQUFlO0VBQ2YsZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSx5QkFBeUI7QUFDM0I7QUFDQTs7RUFFRSx5QkFBeUI7QUFDM0I7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQix5QkFBeUI7RUFDekIsaUJBQWlCO0VBQ2pCLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsY0FBYztBQUNoQjtBQUNBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQix1QkFBdUI7RUFDdkIsaUJBQWlCO0VBQ2pCLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsY0FBYztBQUNoQjtBQUNBO0VBQ0UsY0FBYztBQUNoQjtBQUNBOzs7RUFHRSxrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLGVBQWU7RUFDZixzQkFBc0I7RUFDdEIsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtFQUNsQixpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLHlCQUF5QjtBQUMzQjtBQUNBOztFQUVFLHlCQUF5QjtBQUMzQjtBQUNBO0VBQ0UsbUJBQW1CO0FBQ3JCO0FBQ0E7O0VBRUUsbUJBQW1CO0FBQ3JCO0FBQ0E7RUFDRSxtQkFBbUI7QUFDckI7QUFDQTs7RUFFRSxtQkFBbUI7QUFDckI7QUFDQTtFQUNFLG1CQUFtQjtFQUNuQixZQUFZO0FBQ2Q7QUFDQTs7RUFFRSxtQkFBbUI7QUFDckI7QUFDQTtFQUNFLHlCQUF5QjtBQUMzQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucmVhY3QtY2FsZW5kYXIge1xcbiAgd2lkdGg6IDM1MHB4O1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgYmFja2dyb3VuZDogd2hpdGU7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjYTBhMDk2O1xcbiAgZm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XFxuICBsaW5lLWhlaWdodDogMS4xMjVlbTtcXG59XFxuLnJlYWN0LWNhbGVuZGFyLS1kb3VibGVWaWV3IHtcXG4gIHdpZHRoOiA3MDBweDtcXG59XFxuLnJlYWN0LWNhbGVuZGFyLS1kb3VibGVWaWV3IC5yZWFjdC1jYWxlbmRhcl9fdmlld0NvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgbWFyZ2luOiAtMC41ZW07XFxufVxcbi5yZWFjdC1jYWxlbmRhci0tZG91YmxlVmlldyAucmVhY3QtY2FsZW5kYXJfX3ZpZXdDb250YWluZXIgPiAqIHtcXG4gIHdpZHRoOiA1MCU7XFxuICBtYXJnaW46IDAuNWVtO1xcbn1cXG4ucmVhY3QtY2FsZW5kYXIsXFxuLnJlYWN0LWNhbGVuZGFyICosXFxuLnJlYWN0LWNhbGVuZGFyICo6YmVmb3JlLFxcbi5yZWFjdC1jYWxlbmRhciAqOmFmdGVyIHtcXG4gIC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbi5yZWFjdC1jYWxlbmRhciBidXR0b24ge1xcbiAgbWFyZ2luOiAwO1xcbiAgYm9yZGVyOiAwO1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuLnJlYWN0LWNhbGVuZGFyIGJ1dHRvbjplbmFibGVkOmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLnJlYWN0LWNhbGVuZGFyX19uYXZpZ2F0aW9uIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuICBtYXJnaW4tYm90dG9tOiAxZW07XFxufVxcbi5yZWFjdC1jYWxlbmRhcl9fbmF2aWdhdGlvbiBidXR0b24ge1xcbiAgbWluLXdpZHRoOiA0NHB4O1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG59XFxuLnJlYWN0LWNhbGVuZGFyX19uYXZpZ2F0aW9uIGJ1dHRvbjpkaXNhYmxlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwO1xcbn1cXG4ucmVhY3QtY2FsZW5kYXJfX25hdmlnYXRpb24gYnV0dG9uOmVuYWJsZWQ6aG92ZXIsXFxuLnJlYWN0LWNhbGVuZGFyX19uYXZpZ2F0aW9uIGJ1dHRvbjplbmFibGVkOmZvY3VzIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlNmU2ZTY7XFxufVxcbi5yZWFjdC1jYWxlbmRhcl9fbW9udGgtdmlld19fd2Vla2RheXMge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgZm9udC1zaXplOiAwLjc1ZW07XFxufVxcbi5yZWFjdC1jYWxlbmRhcl9fbW9udGgtdmlld19fd2Vla2RheXNfX3dlZWtkYXkge1xcbiAgcGFkZGluZzogMC41ZW07XFxufVxcbi5yZWFjdC1jYWxlbmRhcl9fbW9udGgtdmlld19fd2Vla051bWJlcnMgLnJlYWN0LWNhbGVuZGFyX190aWxlIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBmb250LXNpemU6IDAuNzVlbTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG4ucmVhY3QtY2FsZW5kYXJfX21vbnRoLXZpZXdfX2RheXNfX2RheS0td2Vla2VuZCB7XFxuICBjb2xvcjogI2QxMDAwMDtcXG59XFxuLnJlYWN0LWNhbGVuZGFyX19tb250aC12aWV3X19kYXlzX19kYXktLW5laWdoYm9yaW5nTW9udGgge1xcbiAgY29sb3I6ICM3NTc1NzU7XFxufVxcbi5yZWFjdC1jYWxlbmRhcl9feWVhci12aWV3IC5yZWFjdC1jYWxlbmRhcl9fdGlsZSxcXG4ucmVhY3QtY2FsZW5kYXJfX2RlY2FkZS12aWV3IC5yZWFjdC1jYWxlbmRhcl9fdGlsZSxcXG4ucmVhY3QtY2FsZW5kYXJfX2NlbnR1cnktdmlldyAucmVhY3QtY2FsZW5kYXJfX3RpbGUge1xcbiAgcGFkZGluZzogMmVtIDAuNWVtO1xcbn1cXG4ucmVhY3QtY2FsZW5kYXJfX3RpbGUge1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMTBweCA2LjY2NjdweDtcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBsaW5lLWhlaWdodDogMTZweDtcXG59XFxuLnJlYWN0LWNhbGVuZGFyX190aWxlOmRpc2FibGVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XFxufVxcbi5yZWFjdC1jYWxlbmRhcl9fdGlsZTplbmFibGVkOmhvdmVyLFxcbi5yZWFjdC1jYWxlbmRhcl9fdGlsZTplbmFibGVkOmZvY3VzIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlNmU2ZTY7XFxufVxcbi5yZWFjdC1jYWxlbmRhcl9fdGlsZS0tbm93IHtcXG4gIGJhY2tncm91bmQ6ICNmZmZmNzY7XFxufVxcbi5yZWFjdC1jYWxlbmRhcl9fdGlsZS0tbm93OmVuYWJsZWQ6aG92ZXIsXFxuLnJlYWN0LWNhbGVuZGFyX190aWxlLS1ub3c6ZW5hYmxlZDpmb2N1cyB7XFxuICBiYWNrZ3JvdW5kOiAjZmZmZmE5O1xcbn1cXG4ucmVhY3QtY2FsZW5kYXJfX3RpbGUtLWhhc0FjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kOiAjNzZiYWZmO1xcbn1cXG4ucmVhY3QtY2FsZW5kYXJfX3RpbGUtLWhhc0FjdGl2ZTplbmFibGVkOmhvdmVyLFxcbi5yZWFjdC1jYWxlbmRhcl9fdGlsZS0taGFzQWN0aXZlOmVuYWJsZWQ6Zm9jdXMge1xcbiAgYmFja2dyb3VuZDogI2E5ZDRmZjtcXG59XFxuLnJlYWN0LWNhbGVuZGFyX190aWxlLS1hY3RpdmUge1xcbiAgYmFja2dyb3VuZDogIzAwNmVkYztcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuLnJlYWN0LWNhbGVuZGFyX190aWxlLS1hY3RpdmU6ZW5hYmxlZDpob3ZlcixcXG4ucmVhY3QtY2FsZW5kYXJfX3RpbGUtLWFjdGl2ZTplbmFibGVkOmZvY3VzIHtcXG4gIGJhY2tncm91bmQ6ICMxMDg3ZmY7XFxufVxcbi5yZWFjdC1jYWxlbmRhci0tc2VsZWN0UmFuZ2UgLnJlYWN0LWNhbGVuZGFyX190aWxlLS1ob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTZlNmU2O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwidmFyIF9DQUxFTkRBUl9UWVBFX0xPQ0FMRTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5leHBvcnQgdmFyIENBTEVOREFSX1RZUEVTID0ge1xuICBBUkFCSUM6ICdBcmFiaWMnLFxuICBIRUJSRVc6ICdIZWJyZXcnLFxuICBJU09fODYwMTogJ0lTTyA4NjAxJyxcbiAgVVM6ICdVUydcbn07XG5leHBvcnQgdmFyIENBTEVOREFSX1RZUEVfTE9DQUxFUyA9IChfQ0FMRU5EQVJfVFlQRV9MT0NBTEUgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9DQUxFTkRBUl9UWVBFX0xPQ0FMRSwgQ0FMRU5EQVJfVFlQRVMuVVMsIFsnZW4tQ0EnLCAnZW4tVVMnLCAnZXMtQVInLCAnZXMtQk8nLCAnZXMtQ0wnLCAnZXMtQ08nLCAnZXMtQ1InLCAnZXMtRE8nLCAnZXMtRUMnLCAnZXMtR1QnLCAnZXMtSE4nLCAnZXMtTVgnLCAnZXMtTkknLCAnZXMtUEEnLCAnZXMtUEUnLCAnZXMtUFInLCAnZXMtU1YnLCAnZXMtVkUnLCAncHQtQlInXSksIF9kZWZpbmVQcm9wZXJ0eShfQ0FMRU5EQVJfVFlQRV9MT0NBTEUsIENBTEVOREFSX1RZUEVTLkFSQUJJQywgWy8vIGFyLUxCLCBhci1NQSBpbnRlbnRpb25hbGx5IG1pc3NpbmdcbidhcicsICdhci1BRScsICdhci1CSCcsICdhci1EWicsICdhci1FRycsICdhci1JUScsICdhci1KTycsICdhci1LVycsICdhci1MWScsICdhci1PTScsICdhci1RQScsICdhci1TQScsICdhci1TRCcsICdhci1TWScsICdhci1ZRScsICdkdicsICdkdi1NVicsICdwcycsICdwcy1BUiddKSwgX2RlZmluZVByb3BlcnR5KF9DQUxFTkRBUl9UWVBFX0xPQ0FMRSwgQ0FMRU5EQVJfVFlQRVMuSEVCUkVXLCBbJ2hlJywgJ2hlLUlMJ10pLCBfQ0FMRU5EQVJfVFlQRV9MT0NBTEUpO1xuZXhwb3J0IHZhciBXRUVLREFZUyA9IF90b0NvbnN1bWFibGVBcnJheShBcnJheSg3KSkubWFwKGZ1bmN0aW9uIChlbCwgaW5kZXgpIHtcbiAgcmV0dXJuIGluZGV4O1xufSk7IiwiaW1wb3J0IGdldFVzZXJMb2NhbGUgZnJvbSAnZ2V0LXVzZXItbG9jYWxlJztcbnZhciBmb3JtYXR0ZXJDYWNoZSA9IG5ldyBNYXAoKTtcblxuZnVuY3Rpb24gZ2V0Rm9ybWF0dGVyKG9wdGlvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChsb2NhbGUsIGRhdGUpIHtcbiAgICB2YXIgbG9jYWxlV2l0aERlZmF1bHQgPSBsb2NhbGUgfHwgZ2V0VXNlckxvY2FsZSgpO1xuXG4gICAgaWYgKCFmb3JtYXR0ZXJDYWNoZS5oYXMobG9jYWxlV2l0aERlZmF1bHQpKSB7XG4gICAgICBmb3JtYXR0ZXJDYWNoZS5zZXQobG9jYWxlV2l0aERlZmF1bHQsIG5ldyBNYXAoKSk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdHRlckNhY2hlTG9jYWxlID0gZm9ybWF0dGVyQ2FjaGUuZ2V0KGxvY2FsZVdpdGhEZWZhdWx0KTtcblxuICAgIGlmICghZm9ybWF0dGVyQ2FjaGVMb2NhbGUuaGFzKG9wdGlvbnMpKSB7XG4gICAgICBmb3JtYXR0ZXJDYWNoZUxvY2FsZS5zZXQob3B0aW9ucywgbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlV2l0aERlZmF1bHQsIG9wdGlvbnMpLmZvcm1hdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvcm1hdHRlckNhY2hlTG9jYWxlLmdldChvcHRpb25zKShkYXRlKTtcbiAgfTtcbn1cbi8qKlxuICogQ2hhbmdlcyB0aGUgaG91ciBpbiBhIERhdGUgdG8gZW5zdXJlIHJpZ2h0IGRhdGUgZm9ybWF0dGluZyBldmVuIGlmIERTVCBpcyBtZXNzZWQgdXAuXG4gKiBXb3JrYXJvdW5kIGZvciBidWcgaW4gV2ViS2l0IGFuZCBGaXJlZm94IHdpdGggaGlzdG9yaWNhbCBkYXRlcy5cbiAqIEZvciBtb3JlIGRldGFpbHMsIHNlZTpcbiAqIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTc1MDQ2NVxuICogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM4NTY0M1xuICpcbiAqIEBwYXJhbSB7RGF0ZX0gZGF0ZSBEYXRlLlxuICovXG5cblxuZnVuY3Rpb24gdG9TYWZlSG91cihkYXRlKSB7XG4gIHZhciBzYWZlRGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICByZXR1cm4gbmV3IERhdGUoc2FmZURhdGUuc2V0SG91cnMoMTIpKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2FmZUZvcm1hdHRlcihvcHRpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobG9jYWxlLCBkYXRlKSB7XG4gICAgcmV0dXJuIGdldEZvcm1hdHRlcihvcHRpb25zKShsb2NhbGUsIHRvU2FmZUhvdXIoZGF0ZSkpO1xuICB9O1xufVxuXG52YXIgZm9ybWF0RGF0ZU9wdGlvbnMgPSB7XG4gIGRheTogJ251bWVyaWMnLFxuICBtb250aDogJ251bWVyaWMnLFxuICB5ZWFyOiAnbnVtZXJpYydcbn07XG52YXIgZm9ybWF0RGF5T3B0aW9ucyA9IHtcbiAgZGF5OiAnbnVtZXJpYydcbn07XG52YXIgZm9ybWF0TG9uZ0RhdGVPcHRpb25zID0ge1xuICBkYXk6ICdudW1lcmljJyxcbiAgbW9udGg6ICdsb25nJyxcbiAgeWVhcjogJ251bWVyaWMnXG59O1xudmFyIGZvcm1hdE1vbnRoT3B0aW9ucyA9IHtcbiAgbW9udGg6ICdsb25nJ1xufTtcbnZhciBmb3JtYXRNb250aFllYXJPcHRpb25zID0ge1xuICBtb250aDogJ2xvbmcnLFxuICB5ZWFyOiAnbnVtZXJpYydcbn07XG52YXIgZm9ybWF0U2hvcnRXZWVrZGF5T3B0aW9ucyA9IHtcbiAgd2Vla2RheTogJ3Nob3J0J1xufTtcbnZhciBmb3JtYXRXZWVrZGF5T3B0aW9ucyA9IHtcbiAgd2Vla2RheTogJ2xvbmcnXG59O1xudmFyIGZvcm1hdFllYXJPcHRpb25zID0ge1xuICB5ZWFyOiAnbnVtZXJpYydcbn07XG5leHBvcnQgdmFyIGZvcm1hdERhdGUgPSBnZXRTYWZlRm9ybWF0dGVyKGZvcm1hdERhdGVPcHRpb25zKTtcbmV4cG9ydCB2YXIgZm9ybWF0RGF5ID0gZ2V0U2FmZUZvcm1hdHRlcihmb3JtYXREYXlPcHRpb25zKTtcbmV4cG9ydCB2YXIgZm9ybWF0TG9uZ0RhdGUgPSBnZXRTYWZlRm9ybWF0dGVyKGZvcm1hdExvbmdEYXRlT3B0aW9ucyk7XG5leHBvcnQgdmFyIGZvcm1hdE1vbnRoID0gZ2V0U2FmZUZvcm1hdHRlcihmb3JtYXRNb250aE9wdGlvbnMpO1xuZXhwb3J0IHZhciBmb3JtYXRNb250aFllYXIgPSBnZXRTYWZlRm9ybWF0dGVyKGZvcm1hdE1vbnRoWWVhck9wdGlvbnMpO1xuZXhwb3J0IHZhciBmb3JtYXRTaG9ydFdlZWtkYXkgPSBnZXRTYWZlRm9ybWF0dGVyKGZvcm1hdFNob3J0V2Vla2RheU9wdGlvbnMpO1xuZXhwb3J0IHZhciBmb3JtYXRXZWVrZGF5ID0gZ2V0U2FmZUZvcm1hdHRlcihmb3JtYXRXZWVrZGF5T3B0aW9ucyk7XG5leHBvcnQgdmFyIGZvcm1hdFllYXIgPSBnZXRTYWZlRm9ybWF0dGVyKGZvcm1hdFllYXJPcHRpb25zKTsiLCJpbXBvcnQgeyBnZXRZZWFyLCBnZXRNb250aCBhcyBnZXRNb250aEluZGV4LCBnZXRDZW50dXJ5U3RhcnQsIGdldFByZXZpb3VzQ2VudHVyeVN0YXJ0LCBnZXROZXh0Q2VudHVyeVN0YXJ0LCBnZXRDZW50dXJ5RW5kLCBnZXRQcmV2aW91c0NlbnR1cnlFbmQsIGdldENlbnR1cnlSYW5nZSwgZ2V0RGVjYWRlU3RhcnQsIGdldFByZXZpb3VzRGVjYWRlU3RhcnQsIGdldE5leHREZWNhZGVTdGFydCwgZ2V0RGVjYWRlRW5kLCBnZXRQcmV2aW91c0RlY2FkZUVuZCwgZ2V0RGVjYWRlUmFuZ2UsIGdldFllYXJTdGFydCwgZ2V0UHJldmlvdXNZZWFyU3RhcnQsIGdldE5leHRZZWFyU3RhcnQsIGdldFllYXJFbmQsIGdldFByZXZpb3VzWWVhckVuZCwgZ2V0WWVhclJhbmdlLCBnZXRNb250aFN0YXJ0LCBnZXRQcmV2aW91c01vbnRoU3RhcnQsIGdldE5leHRNb250aFN0YXJ0LCBnZXRNb250aEVuZCwgZ2V0UHJldmlvdXNNb250aEVuZCwgZ2V0TW9udGhSYW5nZSwgZ2V0RGF5U3RhcnQsIGdldERheUVuZCwgZ2V0RGF5UmFuZ2UgfSBmcm9tICdAd29qdGVrbWFqL2RhdGUtdXRpbHMnO1xuaW1wb3J0IHsgQ0FMRU5EQVJfVFlQRVMsIFdFRUtEQVlTIH0gZnJvbSAnLi9jb25zdCc7XG5pbXBvcnQgeyBmb3JtYXRZZWFyIGFzIGRlZmF1bHRGb3JtYXRZZWFyIH0gZnJvbSAnLi9kYXRlRm9ybWF0dGVyJztcbnZhciBTVU5EQVkgPSBXRUVLREFZU1swXTtcbnZhciBGUklEQVkgPSBXRUVLREFZU1s1XTtcbnZhciBTQVRVUkRBWSA9IFdFRUtEQVlTWzZdO1xuLyogU2ltcGxlIGdldHRlcnMgLSBnZXR0aW5nIGEgcHJvcGVydHkgb2YgYSBnaXZlbiBwb2ludCBpbiB0aW1lICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXlPZldlZWsoZGF0ZSkge1xuICB2YXIgY2FsZW5kYXJUeXBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBDQUxFTkRBUl9UWVBFUy5JU09fODYwMTtcbiAgdmFyIHdlZWtkYXkgPSBkYXRlLmdldERheSgpO1xuXG4gIHN3aXRjaCAoY2FsZW5kYXJUeXBlKSB7XG4gICAgY2FzZSBDQUxFTkRBUl9UWVBFUy5JU09fODYwMTpcbiAgICAgIC8vIFNoaWZ0cyBkYXlzIG9mIHRoZSB3ZWVrIHNvIHRoYXQgTW9uZGF5IGlzIDAsIFN1bmRheSBpcyA2XG4gICAgICByZXR1cm4gKHdlZWtkYXkgKyA2KSAlIDc7XG5cbiAgICBjYXNlIENBTEVOREFSX1RZUEVTLkFSQUJJQzpcbiAgICAgIHJldHVybiAod2Vla2RheSArIDEpICUgNztcblxuICAgIGNhc2UgQ0FMRU5EQVJfVFlQRVMuSEVCUkVXOlxuICAgIGNhc2UgQ0FMRU5EQVJfVFlQRVMuVVM6XG4gICAgICByZXR1cm4gd2Vla2RheTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIGNhbGVuZGFyIHR5cGUuJyk7XG4gIH1cbn1cbi8qKlxuICogQ2VudHVyeVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCZWdpbk9mQ2VudHVyeVllYXIoZGF0ZSkge1xuICB2YXIgYmVnaW5PZkNlbnR1cnkgPSBnZXRDZW50dXJ5U3RhcnQoZGF0ZSk7XG4gIHJldHVybiBnZXRZZWFyKGJlZ2luT2ZDZW50dXJ5KTtcbn1cbi8qKlxuICogRGVjYWRlXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJlZ2luT2ZEZWNhZGVZZWFyKGRhdGUpIHtcbiAgdmFyIGJlZ2luT2ZEZWNhZGUgPSBnZXREZWNhZGVTdGFydChkYXRlKTtcbiAgcmV0dXJuIGdldFllYXIoYmVnaW5PZkRlY2FkZSk7XG59XG4vKipcbiAqIFdlZWtcbiAqL1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGJlZ2lubmluZyBvZiBhIGdpdmVuIHdlZWsuXG4gKlxuICogQHBhcmFtIHtEYXRlfSBkYXRlIERhdGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gY2FsZW5kYXJUeXBlIENhbGVuZGFyIHR5cGUuIENhbiBiZSBJU08gODYwMSBvciBVUy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmVnaW5PZldlZWsoZGF0ZSkge1xuICB2YXIgY2FsZW5kYXJUeXBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBDQUxFTkRBUl9UWVBFUy5JU09fODYwMTtcbiAgdmFyIHllYXIgPSBnZXRZZWFyKGRhdGUpO1xuICB2YXIgbW9udGhJbmRleCA9IGdldE1vbnRoSW5kZXgoZGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldERhdGUoKSAtIGdldERheU9mV2VlayhkYXRlLCBjYWxlbmRhclR5cGUpO1xuICByZXR1cm4gbmV3IERhdGUoeWVhciwgbW9udGhJbmRleCwgZGF5KTtcbn1cbi8qKlxuICogR2V0cyB3ZWVrIG51bWJlciBhY2NvcmRpbmcgdG8gSVNPIDg2MDEgb3IgVVMgc3RhbmRhcmQuXG4gKiBJbiBJU08gODYwMSwgQXJhYmljIGFuZCBIZWJyZXcgd2VlayAxIGlzIHRoZSBvbmUgd2l0aCBKYW51YXJ5IDQuXG4gKiBJbiBVUyBjYWxlbmRhciB3ZWVrIDEgaXMgdGhlIG9uZSB3aXRoIEphbnVhcnkgMS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV9IGRhdGUgRGF0ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjYWxlbmRhclR5cGUgQ2FsZW5kYXIgdHlwZS4gQ2FuIGJlIElTTyA4NjAxIG9yIFVTLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWVrTnVtYmVyKGRhdGUpIHtcbiAgdmFyIGNhbGVuZGFyVHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogQ0FMRU5EQVJfVFlQRVMuSVNPXzg2MDE7XG4gIHZhciBjYWxlbmRhclR5cGVGb3JXZWVrTnVtYmVyID0gY2FsZW5kYXJUeXBlID09PSBDQUxFTkRBUl9UWVBFUy5VUyA/IENBTEVOREFSX1RZUEVTLlVTIDogQ0FMRU5EQVJfVFlQRVMuSVNPXzg2MDE7XG4gIHZhciBiZWdpbk9mV2VlayA9IGdldEJlZ2luT2ZXZWVrKGRhdGUsIGNhbGVuZGFyVHlwZSk7XG4gIHZhciB5ZWFyID0gZ2V0WWVhcihkYXRlKSArIDE7XG4gIHZhciBkYXlJbldlZWtPbmU7XG4gIHZhciBiZWdpbk9mRmlyc3RXZWVrOyAvLyBMb29rIGZvciB0aGUgZmlyc3Qgd2VlayBvbmUgdGhhdCBkb2VzIG5vdCBjb21lIGFmdGVyIGEgZ2l2ZW4gZGF0ZVxuXG4gIGRvIHtcbiAgICBkYXlJbldlZWtPbmUgPSBuZXcgRGF0ZSh5ZWFyLCAwLCBjYWxlbmRhclR5cGVGb3JXZWVrTnVtYmVyID09PSBDQUxFTkRBUl9UWVBFUy5JU09fODYwMSA/IDQgOiAxKTtcbiAgICBiZWdpbk9mRmlyc3RXZWVrID0gZ2V0QmVnaW5PZldlZWsoZGF5SW5XZWVrT25lLCBjYWxlbmRhclR5cGUpO1xuICAgIHllYXIgLT0gMTtcbiAgfSB3aGlsZSAoZGF0ZSA8IGJlZ2luT2ZGaXJzdFdlZWspO1xuXG4gIHJldHVybiBNYXRoLnJvdW5kKChiZWdpbk9mV2VlayAtIGJlZ2luT2ZGaXJzdFdlZWspIC8gKDguNjRlNyAqIDcpKSArIDE7XG59XG4vKipcbiAqIE90aGVyc1xuICovXG5cbi8qKlxuICogUmV0dXJucyB0aGUgYmVnaW5uaW5nIG9mIGEgZ2l2ZW4gcmFuZ2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJhbmdlVHlwZSBSYW5nZSB0eXBlIChlLmcuICdkYXknKVxuICogQHBhcmFtIHtEYXRlfSBkYXRlIERhdGUuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJlZ2luKHJhbmdlVHlwZSwgZGF0ZSkge1xuICBzd2l0Y2ggKHJhbmdlVHlwZSkge1xuICAgIGNhc2UgJ2NlbnR1cnknOlxuICAgICAgcmV0dXJuIGdldENlbnR1cnlTdGFydChkYXRlKTtcblxuICAgIGNhc2UgJ2RlY2FkZSc6XG4gICAgICByZXR1cm4gZ2V0RGVjYWRlU3RhcnQoZGF0ZSk7XG5cbiAgICBjYXNlICd5ZWFyJzpcbiAgICAgIHJldHVybiBnZXRZZWFyU3RhcnQoZGF0ZSk7XG5cbiAgICBjYXNlICdtb250aCc6XG4gICAgICByZXR1cm4gZ2V0TW9udGhTdGFydChkYXRlKTtcblxuICAgIGNhc2UgJ2RheSc6XG4gICAgICByZXR1cm4gZ2V0RGF5U3RhcnQoZGF0ZSk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCByYW5nZVR5cGU6IFwiLmNvbmNhdChyYW5nZVR5cGUpKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEJlZ2luUHJldmlvdXMocmFuZ2VUeXBlLCBkYXRlKSB7XG4gIHN3aXRjaCAocmFuZ2VUeXBlKSB7XG4gICAgY2FzZSAnY2VudHVyeSc6XG4gICAgICByZXR1cm4gZ2V0UHJldmlvdXNDZW50dXJ5U3RhcnQoZGF0ZSk7XG5cbiAgICBjYXNlICdkZWNhZGUnOlxuICAgICAgcmV0dXJuIGdldFByZXZpb3VzRGVjYWRlU3RhcnQoZGF0ZSk7XG5cbiAgICBjYXNlICd5ZWFyJzpcbiAgICAgIHJldHVybiBnZXRQcmV2aW91c1llYXJTdGFydChkYXRlKTtcblxuICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgIHJldHVybiBnZXRQcmV2aW91c01vbnRoU3RhcnQoZGF0ZSk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCByYW5nZVR5cGU6IFwiLmNvbmNhdChyYW5nZVR5cGUpKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEJlZ2luTmV4dChyYW5nZVR5cGUsIGRhdGUpIHtcbiAgc3dpdGNoIChyYW5nZVR5cGUpIHtcbiAgICBjYXNlICdjZW50dXJ5JzpcbiAgICAgIHJldHVybiBnZXROZXh0Q2VudHVyeVN0YXJ0KGRhdGUpO1xuXG4gICAgY2FzZSAnZGVjYWRlJzpcbiAgICAgIHJldHVybiBnZXROZXh0RGVjYWRlU3RhcnQoZGF0ZSk7XG5cbiAgICBjYXNlICd5ZWFyJzpcbiAgICAgIHJldHVybiBnZXROZXh0WWVhclN0YXJ0KGRhdGUpO1xuXG4gICAgY2FzZSAnbW9udGgnOlxuICAgICAgcmV0dXJuIGdldE5leHRNb250aFN0YXJ0KGRhdGUpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcmFuZ2VUeXBlOiBcIi5jb25jYXQocmFuZ2VUeXBlKSk7XG4gIH1cbn1cbmV4cG9ydCB2YXIgZ2V0QmVnaW5QcmV2aW91czIgPSBmdW5jdGlvbiBnZXRCZWdpblByZXZpb3VzMihyYW5nZVR5cGUsIGRhdGUpIHtcbiAgc3dpdGNoIChyYW5nZVR5cGUpIHtcbiAgICBjYXNlICdkZWNhZGUnOlxuICAgICAgcmV0dXJuIGdldFByZXZpb3VzRGVjYWRlU3RhcnQoZGF0ZSwgLTEwMCk7XG5cbiAgICBjYXNlICd5ZWFyJzpcbiAgICAgIHJldHVybiBnZXRQcmV2aW91c1llYXJTdGFydChkYXRlLCAtMTApO1xuXG4gICAgY2FzZSAnbW9udGgnOlxuICAgICAgcmV0dXJuIGdldFByZXZpb3VzTW9udGhTdGFydChkYXRlLCAtMTIpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcmFuZ2VUeXBlOiBcIi5jb25jYXQocmFuZ2VUeXBlKSk7XG4gIH1cbn07XG5leHBvcnQgdmFyIGdldEJlZ2luTmV4dDIgPSBmdW5jdGlvbiBnZXRCZWdpbk5leHQyKHJhbmdlVHlwZSwgZGF0ZSkge1xuICBzd2l0Y2ggKHJhbmdlVHlwZSkge1xuICAgIGNhc2UgJ2RlY2FkZSc6XG4gICAgICByZXR1cm4gZ2V0TmV4dERlY2FkZVN0YXJ0KGRhdGUsIDEwMCk7XG5cbiAgICBjYXNlICd5ZWFyJzpcbiAgICAgIHJldHVybiBnZXROZXh0WWVhclN0YXJ0KGRhdGUsIDEwKTtcblxuICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgIHJldHVybiBnZXROZXh0TW9udGhTdGFydChkYXRlLCAxMik7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCByYW5nZVR5cGU6IFwiLmNvbmNhdChyYW5nZVR5cGUpKTtcbiAgfVxufTtcbi8qKlxuICogUmV0dXJucyB0aGUgZW5kIG9mIGEgZ2l2ZW4gcmFuZ2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJhbmdlVHlwZSBSYW5nZSB0eXBlIChlLmcuICdkYXknKVxuICogQHBhcmFtIHtEYXRlfSBkYXRlIERhdGUuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVuZChyYW5nZVR5cGUsIGRhdGUpIHtcbiAgc3dpdGNoIChyYW5nZVR5cGUpIHtcbiAgICBjYXNlICdjZW50dXJ5JzpcbiAgICAgIHJldHVybiBnZXRDZW50dXJ5RW5kKGRhdGUpO1xuXG4gICAgY2FzZSAnZGVjYWRlJzpcbiAgICAgIHJldHVybiBnZXREZWNhZGVFbmQoZGF0ZSk7XG5cbiAgICBjYXNlICd5ZWFyJzpcbiAgICAgIHJldHVybiBnZXRZZWFyRW5kKGRhdGUpO1xuXG4gICAgY2FzZSAnbW9udGgnOlxuICAgICAgcmV0dXJuIGdldE1vbnRoRW5kKGRhdGUpO1xuXG4gICAgY2FzZSAnZGF5JzpcbiAgICAgIHJldHVybiBnZXREYXlFbmQoZGF0ZSk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCByYW5nZVR5cGU6IFwiLmNvbmNhdChyYW5nZVR5cGUpKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEVuZFByZXZpb3VzKHJhbmdlVHlwZSwgZGF0ZSkge1xuICBzd2l0Y2ggKHJhbmdlVHlwZSkge1xuICAgIGNhc2UgJ2NlbnR1cnknOlxuICAgICAgcmV0dXJuIGdldFByZXZpb3VzQ2VudHVyeUVuZChkYXRlKTtcblxuICAgIGNhc2UgJ2RlY2FkZSc6XG4gICAgICByZXR1cm4gZ2V0UHJldmlvdXNEZWNhZGVFbmQoZGF0ZSk7XG5cbiAgICBjYXNlICd5ZWFyJzpcbiAgICAgIHJldHVybiBnZXRQcmV2aW91c1llYXJFbmQoZGF0ZSk7XG5cbiAgICBjYXNlICdtb250aCc6XG4gICAgICByZXR1cm4gZ2V0UHJldmlvdXNNb250aEVuZChkYXRlKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHJhbmdlVHlwZTogXCIuY29uY2F0KHJhbmdlVHlwZSkpO1xuICB9XG59XG5leHBvcnQgdmFyIGdldEVuZFByZXZpb3VzMiA9IGZ1bmN0aW9uIGdldEVuZFByZXZpb3VzMihyYW5nZVR5cGUsIGRhdGUpIHtcbiAgc3dpdGNoIChyYW5nZVR5cGUpIHtcbiAgICBjYXNlICdkZWNhZGUnOlxuICAgICAgcmV0dXJuIGdldFByZXZpb3VzRGVjYWRlRW5kKGRhdGUsIC0xMDApO1xuXG4gICAgY2FzZSAneWVhcic6XG4gICAgICByZXR1cm4gZ2V0UHJldmlvdXNZZWFyRW5kKGRhdGUsIC0xMCk7XG5cbiAgICBjYXNlICdtb250aCc6XG4gICAgICByZXR1cm4gZ2V0UHJldmlvdXNNb250aEVuZChkYXRlLCAtMTIpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcmFuZ2VUeXBlOiBcIi5jb25jYXQocmFuZ2VUeXBlKSk7XG4gIH1cbn07XG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgd2l0aCB0aGUgYmVnaW5uaW5nIGFuZCB0aGUgZW5kIG9mIGEgZ2l2ZW4gcmFuZ2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJhbmdlVHlwZSBSYW5nZSB0eXBlIChlLmcuICdkYXknKVxuICogQHBhcmFtIHtEYXRlfSBkYXRlIERhdGUuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmdlKHJhbmdlVHlwZSwgZGF0ZSkge1xuICBzd2l0Y2ggKHJhbmdlVHlwZSkge1xuICAgIGNhc2UgJ2NlbnR1cnknOlxuICAgICAgcmV0dXJuIGdldENlbnR1cnlSYW5nZShkYXRlKTtcblxuICAgIGNhc2UgJ2RlY2FkZSc6XG4gICAgICByZXR1cm4gZ2V0RGVjYWRlUmFuZ2UoZGF0ZSk7XG5cbiAgICBjYXNlICd5ZWFyJzpcbiAgICAgIHJldHVybiBnZXRZZWFyUmFuZ2UoZGF0ZSk7XG5cbiAgICBjYXNlICdtb250aCc6XG4gICAgICByZXR1cm4gZ2V0TW9udGhSYW5nZShkYXRlKTtcblxuICAgIGNhc2UgJ2RheSc6XG4gICAgICByZXR1cm4gZ2V0RGF5UmFuZ2UoZGF0ZSk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCByYW5nZVR5cGU6IFwiLmNvbmNhdChyYW5nZVR5cGUpKTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgcmFuZ2Ugb3V0IG9mIHR3byB2YWx1ZXMsIGVuc3VyaW5nIHRoZXkgYXJlIGluIG9yZGVyIGFuZCBjb3ZlcmluZyBlbnRpcmUgcGVyaW9kIHJhbmdlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmFuZ2VUeXBlIFJhbmdlIHR5cGUgKGUuZy4gJ2RheScpXG4gKiBAcGFyYW0ge0RhdGV9IGRhdGUxIEZpcnN0IGRhdGUuXG4gKiBAcGFyYW0ge0RhdGV9IGRhdGUyIFNlY29uZCBkYXRlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRWYWx1ZVJhbmdlKHJhbmdlVHlwZSwgZGF0ZTEsIGRhdGUyKSB7XG4gIHZhciByYXdOZXh0VmFsdWUgPSBbZGF0ZTEsIGRhdGUyXS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGEgLSBiO1xuICB9KTtcbiAgcmV0dXJuIFtnZXRCZWdpbihyYW5nZVR5cGUsIHJhd05leHRWYWx1ZVswXSksIGdldEVuZChyYW5nZVR5cGUsIHJhd05leHRWYWx1ZVsxXSldO1xufVxuXG5mdW5jdGlvbiB0b1llYXJMYWJlbChsb2NhbGUpIHtcbiAgdmFyIGZvcm1hdFllYXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGRlZmF1bHRGb3JtYXRZZWFyO1xuICB2YXIgZGF0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIGRhdGVzLm1hcChmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBmb3JtYXRZZWFyKGxvY2FsZSwgZGF0ZSk7XG4gIH0pLmpvaW4oJyDigJMgJyk7XG59XG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgbGFiZWxsaW5nIGEgY2VudHVyeSBvZiBhIGdpdmVuIGRhdGUuXG4gKiBGb3IgZXhhbXBsZSwgZm9yIDIwMTcgaXQgd2lsbCByZXR1cm4gMjAwMS0yMTAwLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxTdHJpbmd8TnVtYmVyfSBkYXRlIERhdGUgb3IgYSB5ZWFyIGFzIGEgc3RyaW5nIG9yIGFzIGEgbnVtYmVyLlxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENlbnR1cnlMYWJlbChsb2NhbGUsIGZvcm1hdFllYXIsIGRhdGUpIHtcbiAgcmV0dXJuIHRvWWVhckxhYmVsKGxvY2FsZSwgZm9ybWF0WWVhciwgZ2V0Q2VudHVyeVJhbmdlKGRhdGUpKTtcbn1cbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyBsYWJlbGxpbmcgYSBjZW50dXJ5IG9mIGEgZ2l2ZW4gZGF0ZS5cbiAqIEZvciBleGFtcGxlLCBmb3IgMjAxNyBpdCB3aWxsIHJldHVybiAyMDExLTIwMjAuXG4gKlxuICogQHBhcmFtIHtEYXRlfFN0cmluZ3xOdW1iZXJ9IGRhdGUgRGF0ZSBvciBhIHllYXIgYXMgYSBzdHJpbmcgb3IgYXMgYSBudW1iZXIuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlY2FkZUxhYmVsKGxvY2FsZSwgZm9ybWF0WWVhciwgZGF0ZSkge1xuICByZXR1cm4gdG9ZZWFyTGFiZWwobG9jYWxlLCBmb3JtYXRZZWFyLCBnZXREZWNhZGVSYW5nZShkYXRlKSk7XG59XG4vKipcbiAqIFJldHVybnMgYSBib29sZWFuIGRldGVybWluaW5nIHdoZXRoZXIgYSBnaXZlbiBkYXRlIGlzIG9uIFNhdHVyZGF5IG9yIFN1bmRheS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV9IGRhdGUgRGF0ZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNXZWVrZW5kKGRhdGUpIHtcbiAgdmFyIGNhbGVuZGFyVHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogQ0FMRU5EQVJfVFlQRVMuSVNPXzg2MDE7XG4gIHZhciB3ZWVrZGF5ID0gZGF0ZS5nZXREYXkoKTtcblxuICBzd2l0Y2ggKGNhbGVuZGFyVHlwZSkge1xuICAgIGNhc2UgQ0FMRU5EQVJfVFlQRVMuQVJBQklDOlxuICAgIGNhc2UgQ0FMRU5EQVJfVFlQRVMuSEVCUkVXOlxuICAgICAgcmV0dXJuIHdlZWtkYXkgPT09IEZSSURBWSB8fCB3ZWVrZGF5ID09PSBTQVRVUkRBWTtcblxuICAgIGNhc2UgQ0FMRU5EQVJfVFlQRVMuSVNPXzg2MDE6XG4gICAgY2FzZSBDQUxFTkRBUl9UWVBFUy5VUzpcbiAgICAgIHJldHVybiB3ZWVrZGF5ID09PSBTQVRVUkRBWSB8fCB3ZWVrZGF5ID09PSBTVU5EQVk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBjYWxlbmRhciB0eXBlLicpO1xuICB9XG59IiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIF90eXBlb2Yob2JqKTsgfVxuXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgQ0FMRU5EQVJfVFlQRVMgfSBmcm9tICcuL2NvbnN0JztcbnZhciBjYWxlbmRhclR5cGVzID0gT2JqZWN0LnZhbHVlcyhDQUxFTkRBUl9UWVBFUyk7XG52YXIgYWxsVmlld3MgPSBbJ2NlbnR1cnknLCAnZGVjYWRlJywgJ3llYXInLCAnbW9udGgnXTtcbmV4cG9ydCB2YXIgaXNDYWxlbmRhclR5cGUgPSBQcm9wVHlwZXMub25lT2YoY2FsZW5kYXJUeXBlcyk7XG5leHBvcnQgdmFyIGlzQ2xhc3NOYW1lID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKTtcbmV4cG9ydCB2YXIgaXNNaW5EYXRlID0gZnVuY3Rpb24gaXNNaW5EYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICB2YXIgbWluRGF0ZSA9IHByb3BzW3Byb3BOYW1lXTtcblxuICBpZiAoIW1pbkRhdGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICghKG1pbkRhdGUgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AgYFwiLmNvbmNhdChwcm9wTmFtZSwgXCJgIG9mIHR5cGUgYFwiKS5jb25jYXQoX3R5cGVvZihtaW5EYXRlKSwgXCJgIHN1cHBsaWVkIHRvIGBcIikuY29uY2F0KGNvbXBvbmVudE5hbWUsIFwiYCwgZXhwZWN0ZWQgaW5zdGFuY2Ugb2YgYERhdGVgLlwiKSk7XG4gIH1cblxuICB2YXIgbWF4RGF0ZSA9IHByb3BzLm1heERhdGU7XG5cbiAgaWYgKG1heERhdGUgJiYgbWluRGF0ZSA+IG1heERhdGUpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wIGBcIi5jb25jYXQocHJvcE5hbWUsIFwiYCBvZiB0eXBlIGBcIikuY29uY2F0KF90eXBlb2YobWluRGF0ZSksIFwiYCBzdXBwbGllZCB0byBgXCIpLmNvbmNhdChjb21wb25lbnROYW1lLCBcImAsIG1pbkRhdGUgY2Fubm90IGJlIGxhcmdlciB0aGFuIG1heERhdGUuXCIpKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcbmV4cG9ydCB2YXIgaXNNYXhEYXRlID0gZnVuY3Rpb24gaXNNYXhEYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICB2YXIgbWF4RGF0ZSA9IHByb3BzW3Byb3BOYW1lXTtcblxuICBpZiAoIW1heERhdGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICghKG1heERhdGUgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AgYFwiLmNvbmNhdChwcm9wTmFtZSwgXCJgIG9mIHR5cGUgYFwiKS5jb25jYXQoX3R5cGVvZihtYXhEYXRlKSwgXCJgIHN1cHBsaWVkIHRvIGBcIikuY29uY2F0KGNvbXBvbmVudE5hbWUsIFwiYCwgZXhwZWN0ZWQgaW5zdGFuY2Ugb2YgYERhdGVgLlwiKSk7XG4gIH1cblxuICB2YXIgbWluRGF0ZSA9IHByb3BzLm1pbkRhdGU7XG5cbiAgaWYgKG1pbkRhdGUgJiYgbWF4RGF0ZSA8IG1pbkRhdGUpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wIGBcIi5jb25jYXQocHJvcE5hbWUsIFwiYCBvZiB0eXBlIGBcIikuY29uY2F0KF90eXBlb2YobWF4RGF0ZSksIFwiYCBzdXBwbGllZCB0byBgXCIpLmNvbmNhdChjb21wb25lbnROYW1lLCBcImAsIG1heERhdGUgY2Fubm90IGJlIHNtYWxsZXIgdGhhbiBtaW5EYXRlLlwiKSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5leHBvcnQgdmFyIGlzUmVmID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gIGN1cnJlbnQ6IFByb3BUeXBlcy5hbnlcbn0pXSk7XG5leHBvcnQgdmFyIGlzVmFsdWUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSwgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSkpXSk7XG5leHBvcnQgdmFyIGlzVmlld3MgPSBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2YoYWxsVmlld3MpKTtcbmV4cG9ydCB2YXIgaXNWaWV3ID0gZnVuY3Rpb24gaXNWaWV3KHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICB2YXIgdmlldyA9IHByb3BzW3Byb3BOYW1lXTtcbiAgdmFyIHZpZXdzID0gcHJvcHMudmlld3M7XG4gIHZhciBhbGxvd2VkVmlld3MgPSB2aWV3cyB8fCBhbGxWaWV3cztcblxuICBpZiAodmlldyAhPT0gdW5kZWZpbmVkICYmIGFsbG93ZWRWaWV3cy5pbmRleE9mKHZpZXcpID09PSAtMSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AgYFwiLmNvbmNhdChwcm9wTmFtZSwgXCJgIG9mIHZhbHVlIGBcIikuY29uY2F0KHZpZXcsIFwiYCBzdXBwbGllZCB0byBgXCIpLmNvbmNhdChjb21wb25lbnROYW1lLCBcImAsIGV4cGVjdGVkIG9uZSBvZiBbXCIpLmNvbmNhdChhbGxvd2VkVmlld3MubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KGEsIFwiXFxcIlwiKTtcbiAgICB9KS5qb2luKCcsICcpLCBcIl0uXCIpKTtcbiAgfSAvLyBFdmVyeXRoaW5nIGlzIGZpbmVcblxuXG4gIHJldHVybiBudWxsO1xufTtcblxuaXNWaWV3LmlzUmVxdWlyZWQgPSBmdW5jdGlvbiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gIHZhciB2aWV3ID0gcHJvcHNbcHJvcE5hbWVdO1xuXG4gIGlmICghdmlldykge1xuICAgIHJldHVybiBuZXcgRXJyb3IoXCJUaGUgcHJvcCBgXCIuY29uY2F0KHByb3BOYW1lLCBcImAgaXMgbWFya2VkIGFzIHJlcXVpcmVkIGluIGBcIikuY29uY2F0KGNvbXBvbmVudE5hbWUsIFwiYCwgYnV0IGl0cyB2YWx1ZSBpcyBgXCIpLmNvbmNhdCh2aWV3LCBcImAuXCIpKTtcbiAgfVxuXG4gIHJldHVybiBpc1ZpZXcocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKTtcbn07XG5cbmV4cG9ydCB2YXIgdGlsZUdyb3VwUHJvcHMgPSB7XG4gIGFjdGl2ZVN0YXJ0RGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSkuaXNSZXF1aXJlZCxcbiAgaG92ZXI6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICBsb2NhbGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG1heERhdGU6IGlzTWF4RGF0ZSxcbiAgbWluRGF0ZTogaXNNaW5EYXRlLFxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Nb3VzZU92ZXI6IFByb3BUeXBlcy5mdW5jLFxuICB0aWxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgaXNDbGFzc05hbWVdKSxcbiAgdGlsZUNvbnRlbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICB2YWx1ZTogaXNWYWx1ZSxcbiAgdmFsdWVUeXBlOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuZXhwb3J0IHZhciB0aWxlUHJvcHMgPSB7XG4gIGFjdGl2ZVN0YXJ0RGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSkuaXNSZXF1aXJlZCxcbiAgY2xhc3NlczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZykuaXNSZXF1aXJlZCxcbiAgZGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSkuaXNSZXF1aXJlZCxcbiAgbG9jYWxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBtYXhEYXRlOiBpc01heERhdGUsXG4gIG1pbkRhdGU6IGlzTWluRGF0ZSxcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTW91c2VPdmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSkpLFxuICB0aWxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgaXNDbGFzc05hbWVdKSxcbiAgdGlsZUNvbnRlbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICB0aWxlRGlzYWJsZWQ6IFByb3BUeXBlcy5mdW5jXG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZ2V0VXNlckxvY2FsZSB9IGZyb20gJ2dldC11c2VyLWxvY2FsZSc7XG5pbXBvcnQgeyBnZXRDZW50dXJ5TGFiZWwsIGdldERlY2FkZUxhYmVsLCBnZXRCZWdpbk5leHQsIGdldEJlZ2luTmV4dDIsIGdldEJlZ2luUHJldmlvdXMsIGdldEJlZ2luUHJldmlvdXMyLCBnZXRFbmRQcmV2aW91cywgZ2V0RW5kUHJldmlvdXMyIH0gZnJvbSAnLi4vc2hhcmVkL2RhdGVzJztcbmltcG9ydCB7IGZvcm1hdE1vbnRoWWVhciBhcyBkZWZhdWx0Rm9ybWF0TW9udGhZZWFyLCBmb3JtYXRZZWFyIGFzIGRlZmF1bHRGb3JtYXRZZWFyIH0gZnJvbSAnLi4vc2hhcmVkL2RhdGVGb3JtYXR0ZXInO1xuaW1wb3J0IHsgaXNWaWV3LCBpc1ZpZXdzIH0gZnJvbSAnLi4vc2hhcmVkL3Byb3BUeXBlcyc7XG52YXIgY2xhc3NOYW1lID0gJ3JlYWN0LWNhbGVuZGFyX19uYXZpZ2F0aW9uJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE5hdmlnYXRpb24oX3JlZikge1xuICB2YXIgYWN0aXZlU3RhcnREYXRlID0gX3JlZi5hY3RpdmVTdGFydERhdGUsXG4gICAgICBkcmlsbFVwID0gX3JlZi5kcmlsbFVwLFxuICAgICAgX3JlZiRmb3JtYXRNb250aFllYXIgPSBfcmVmLmZvcm1hdE1vbnRoWWVhcixcbiAgICAgIGZvcm1hdE1vbnRoWWVhciA9IF9yZWYkZm9ybWF0TW9udGhZZWFyID09PSB2b2lkIDAgPyBkZWZhdWx0Rm9ybWF0TW9udGhZZWFyIDogX3JlZiRmb3JtYXRNb250aFllYXIsXG4gICAgICBfcmVmJGZvcm1hdFllYXIgPSBfcmVmLmZvcm1hdFllYXIsXG4gICAgICBmb3JtYXRZZWFyID0gX3JlZiRmb3JtYXRZZWFyID09PSB2b2lkIDAgPyBkZWZhdWx0Rm9ybWF0WWVhciA6IF9yZWYkZm9ybWF0WWVhcixcbiAgICAgIGxvY2FsZSA9IF9yZWYubG9jYWxlLFxuICAgICAgbWF4RGF0ZSA9IF9yZWYubWF4RGF0ZSxcbiAgICAgIG1pbkRhdGUgPSBfcmVmLm1pbkRhdGUsXG4gICAgICBfcmVmJG5hdmlnYXRpb25BcmlhTGEgPSBfcmVmLm5hdmlnYXRpb25BcmlhTGFiZWwsXG4gICAgICBuYXZpZ2F0aW9uQXJpYUxhYmVsID0gX3JlZiRuYXZpZ2F0aW9uQXJpYUxhID09PSB2b2lkIDAgPyAnJyA6IF9yZWYkbmF2aWdhdGlvbkFyaWFMYSxcbiAgICAgIG5hdmlnYXRpb25BcmlhTGl2ZSA9IF9yZWYubmF2aWdhdGlvbkFyaWFMaXZlLFxuICAgICAgbmF2aWdhdGlvbkxhYmVsID0gX3JlZi5uYXZpZ2F0aW9uTGFiZWwsXG4gICAgICBfcmVmJG5leHQyQXJpYUxhYmVsID0gX3JlZi5uZXh0MkFyaWFMYWJlbCxcbiAgICAgIG5leHQyQXJpYUxhYmVsID0gX3JlZiRuZXh0MkFyaWFMYWJlbCA9PT0gdm9pZCAwID8gJycgOiBfcmVmJG5leHQyQXJpYUxhYmVsLFxuICAgICAgX3JlZiRuZXh0MkxhYmVsID0gX3JlZi5uZXh0MkxhYmVsLFxuICAgICAgbmV4dDJMYWJlbCA9IF9yZWYkbmV4dDJMYWJlbCA9PT0gdm9pZCAwID8gJ8K7JyA6IF9yZWYkbmV4dDJMYWJlbCxcbiAgICAgIF9yZWYkbmV4dEFyaWFMYWJlbCA9IF9yZWYubmV4dEFyaWFMYWJlbCxcbiAgICAgIG5leHRBcmlhTGFiZWwgPSBfcmVmJG5leHRBcmlhTGFiZWwgPT09IHZvaWQgMCA/ICcnIDogX3JlZiRuZXh0QXJpYUxhYmVsLFxuICAgICAgX3JlZiRuZXh0TGFiZWwgPSBfcmVmLm5leHRMYWJlbCxcbiAgICAgIG5leHRMYWJlbCA9IF9yZWYkbmV4dExhYmVsID09PSB2b2lkIDAgPyAn4oC6JyA6IF9yZWYkbmV4dExhYmVsLFxuICAgICAgX3JlZiRwcmV2MkFyaWFMYWJlbCA9IF9yZWYucHJldjJBcmlhTGFiZWwsXG4gICAgICBwcmV2MkFyaWFMYWJlbCA9IF9yZWYkcHJldjJBcmlhTGFiZWwgPT09IHZvaWQgMCA/ICcnIDogX3JlZiRwcmV2MkFyaWFMYWJlbCxcbiAgICAgIF9yZWYkcHJldjJMYWJlbCA9IF9yZWYucHJldjJMYWJlbCxcbiAgICAgIHByZXYyTGFiZWwgPSBfcmVmJHByZXYyTGFiZWwgPT09IHZvaWQgMCA/ICfCqycgOiBfcmVmJHByZXYyTGFiZWwsXG4gICAgICBfcmVmJHByZXZBcmlhTGFiZWwgPSBfcmVmLnByZXZBcmlhTGFiZWwsXG4gICAgICBwcmV2QXJpYUxhYmVsID0gX3JlZiRwcmV2QXJpYUxhYmVsID09PSB2b2lkIDAgPyAnJyA6IF9yZWYkcHJldkFyaWFMYWJlbCxcbiAgICAgIF9yZWYkcHJldkxhYmVsID0gX3JlZi5wcmV2TGFiZWwsXG4gICAgICBwcmV2TGFiZWwgPSBfcmVmJHByZXZMYWJlbCA9PT0gdm9pZCAwID8gJ+KAuScgOiBfcmVmJHByZXZMYWJlbCxcbiAgICAgIHNldEFjdGl2ZVN0YXJ0RGF0ZSA9IF9yZWYuc2V0QWN0aXZlU3RhcnREYXRlLFxuICAgICAgc2hvd0RvdWJsZVZpZXcgPSBfcmVmLnNob3dEb3VibGVWaWV3LFxuICAgICAgdmlldyA9IF9yZWYudmlldyxcbiAgICAgIHZpZXdzID0gX3JlZi52aWV3cztcbiAgdmFyIGRyaWxsVXBBdmFpbGFibGUgPSB2aWV3cy5pbmRleE9mKHZpZXcpID4gMDtcbiAgdmFyIHNob3VsZFNob3dQcmV2TmV4dDJCdXR0b25zID0gdmlldyAhPT0gJ2NlbnR1cnknO1xuICB2YXIgcHJldmlvdXNBY3RpdmVTdGFydERhdGUgPSBnZXRCZWdpblByZXZpb3VzKHZpZXcsIGFjdGl2ZVN0YXJ0RGF0ZSk7XG4gIHZhciBwcmV2aW91c0FjdGl2ZVN0YXJ0RGF0ZTIgPSBzaG91bGRTaG93UHJldk5leHQyQnV0dG9ucyAmJiBnZXRCZWdpblByZXZpb3VzMih2aWV3LCBhY3RpdmVTdGFydERhdGUpO1xuICB2YXIgbmV4dEFjdGl2ZVN0YXJ0RGF0ZSA9IGdldEJlZ2luTmV4dCh2aWV3LCBhY3RpdmVTdGFydERhdGUpO1xuICB2YXIgbmV4dEFjdGl2ZVN0YXJ0RGF0ZTIgPSBzaG91bGRTaG93UHJldk5leHQyQnV0dG9ucyAmJiBnZXRCZWdpbk5leHQyKHZpZXcsIGFjdGl2ZVN0YXJ0RGF0ZSk7XG5cbiAgdmFyIHByZXZCdXR0b25EaXNhYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocHJldmlvdXNBY3RpdmVTdGFydERhdGUuZ2V0RnVsbFllYXIoKSA8IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91c0FjdGl2ZUVuZERhdGUgPSBnZXRFbmRQcmV2aW91cyh2aWV3LCBhY3RpdmVTdGFydERhdGUpO1xuICAgIHJldHVybiBtaW5EYXRlICYmIG1pbkRhdGUgPj0gcHJldmlvdXNBY3RpdmVFbmREYXRlO1xuICB9KCk7XG5cbiAgdmFyIHByZXYyQnV0dG9uRGlzYWJsZWQgPSBzaG91bGRTaG93UHJldk5leHQyQnV0dG9ucyAmJiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHByZXZpb3VzQWN0aXZlU3RhcnREYXRlMi5nZXRGdWxsWWVhcigpIDwgMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzQWN0aXZlRW5kRGF0ZSA9IGdldEVuZFByZXZpb3VzMih2aWV3LCBhY3RpdmVTdGFydERhdGUpO1xuICAgIHJldHVybiBtaW5EYXRlICYmIG1pbkRhdGUgPj0gcHJldmlvdXNBY3RpdmVFbmREYXRlO1xuICB9KCk7XG5cbiAgdmFyIG5leHRCdXR0b25EaXNhYmxlZCA9IG1heERhdGUgJiYgbWF4RGF0ZSA8IG5leHRBY3RpdmVTdGFydERhdGU7XG4gIHZhciBuZXh0MkJ1dHRvbkRpc2FibGVkID0gc2hvdWxkU2hvd1ByZXZOZXh0MkJ1dHRvbnMgJiYgbWF4RGF0ZSAmJiBtYXhEYXRlIDwgbmV4dEFjdGl2ZVN0YXJ0RGF0ZTI7XG5cbiAgZnVuY3Rpb24gb25DbGlja1ByZXZpb3VzKCkge1xuICAgIHNldEFjdGl2ZVN0YXJ0RGF0ZShwcmV2aW91c0FjdGl2ZVN0YXJ0RGF0ZSwgJ3ByZXYnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2xpY2tQcmV2aW91czIoKSB7XG4gICAgc2V0QWN0aXZlU3RhcnREYXRlKHByZXZpb3VzQWN0aXZlU3RhcnREYXRlMiwgJ3ByZXYyJyk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNsaWNrTmV4dCgpIHtcbiAgICBzZXRBY3RpdmVTdGFydERhdGUobmV4dEFjdGl2ZVN0YXJ0RGF0ZSwgJ25leHQnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2xpY2tOZXh0MigpIHtcbiAgICBzZXRBY3RpdmVTdGFydERhdGUobmV4dEFjdGl2ZVN0YXJ0RGF0ZTIsICduZXh0MicpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVuZGVyTGFiZWwoZGF0ZSkge1xuICAgIHZhciBsYWJlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHN3aXRjaCAodmlldykge1xuICAgICAgICBjYXNlICdjZW50dXJ5JzpcbiAgICAgICAgICByZXR1cm4gZ2V0Q2VudHVyeUxhYmVsKGxvY2FsZSwgZm9ybWF0WWVhciwgZGF0ZSk7XG5cbiAgICAgICAgY2FzZSAnZGVjYWRlJzpcbiAgICAgICAgICByZXR1cm4gZ2V0RGVjYWRlTGFiZWwobG9jYWxlLCBmb3JtYXRZZWFyLCBkYXRlKTtcblxuICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICByZXR1cm4gZm9ybWF0WWVhcihsb2NhbGUsIGRhdGUpO1xuXG4gICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICByZXR1cm4gZm9ybWF0TW9udGhZZWFyKGxvY2FsZSwgZGF0ZSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZpZXc6IFwiLmNvbmNhdCh2aWV3LCBcIi5cIikpO1xuICAgICAgfVxuICAgIH0oKTtcblxuICAgIHJldHVybiBuYXZpZ2F0aW9uTGFiZWwgPyBuYXZpZ2F0aW9uTGFiZWwoe1xuICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgIGxvY2FsZTogbG9jYWxlIHx8IGdldFVzZXJMb2NhbGUoKSxcbiAgICAgIHZpZXc6IHZpZXdcbiAgICB9KSA6IGxhYmVsO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVuZGVyQnV0dG9uKCkge1xuICAgIHZhciBsYWJlbENsYXNzTmFtZSA9IFwiXCIuY29uY2F0KGNsYXNzTmFtZSwgXCJfX2xhYmVsXCIpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XG4gICAgICBcImFyaWEtbGFiZWxcIjogbmF2aWdhdGlvbkFyaWFMYWJlbCxcbiAgICAgIFwiYXJpYS1saXZlXCI6IG5hdmlnYXRpb25BcmlhTGl2ZSxcbiAgICAgIGNsYXNzTmFtZTogbGFiZWxDbGFzc05hbWUsXG4gICAgICBkaXNhYmxlZDogIWRyaWxsVXBBdmFpbGFibGUsXG4gICAgICBvbkNsaWNrOiBkcmlsbFVwLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgZmxleEdyb3c6IDFcbiAgICAgIH0sXG4gICAgICB0eXBlOiBcImJ1dHRvblwiXG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQobGFiZWxDbGFzc05hbWUsIFwiX19sYWJlbFRleHQgXCIpLmNvbmNhdChsYWJlbENsYXNzTmFtZSwgXCJfX2xhYmVsVGV4dC0tZnJvbVwiKVxuICAgIH0sIHJlbmRlckxhYmVsKGFjdGl2ZVN0YXJ0RGF0ZSkpLCBzaG93RG91YmxlVmlldyAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQobGFiZWxDbGFzc05hbWUsIFwiX19kaXZpZGVyXCIpXG4gICAgfSwgXCIgXFx1MjAxMyBcIiksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGxhYmVsQ2xhc3NOYW1lLCBcIl9fbGFiZWxUZXh0IFwiKS5jb25jYXQobGFiZWxDbGFzc05hbWUsIFwiX19sYWJlbFRleHQtLXRvXCIpXG4gICAgfSwgcmVuZGVyTGFiZWwobmV4dEFjdGl2ZVN0YXJ0RGF0ZSkpKSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0sIHByZXYyTGFiZWwgIT09IG51bGwgJiYgc2hvdWxkU2hvd1ByZXZOZXh0MkJ1dHRvbnMgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1xuICAgIFwiYXJpYS1sYWJlbFwiOiBwcmV2MkFyaWFMYWJlbCxcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGNsYXNzTmFtZSwgXCJfX2Fycm93IFwiKS5jb25jYXQoY2xhc3NOYW1lLCBcIl9fcHJldjItYnV0dG9uXCIpLFxuICAgIGRpc2FibGVkOiBwcmV2MkJ1dHRvbkRpc2FibGVkLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2tQcmV2aW91czIsXG4gICAgdHlwZTogXCJidXR0b25cIlxuICB9LCBwcmV2MkxhYmVsKSwgcHJldkxhYmVsICE9PSBudWxsICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICBcImFyaWEtbGFiZWxcIjogcHJldkFyaWFMYWJlbCxcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGNsYXNzTmFtZSwgXCJfX2Fycm93IFwiKS5jb25jYXQoY2xhc3NOYW1lLCBcIl9fcHJldi1idXR0b25cIiksXG4gICAgZGlzYWJsZWQ6IHByZXZCdXR0b25EaXNhYmxlZCxcbiAgICBvbkNsaWNrOiBvbkNsaWNrUHJldmlvdXMsXG4gICAgdHlwZTogXCJidXR0b25cIlxuICB9LCBwcmV2TGFiZWwpLCByZW5kZXJCdXR0b24oKSwgbmV4dExhYmVsICE9PSBudWxsICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICBcImFyaWEtbGFiZWxcIjogbmV4dEFyaWFMYWJlbCxcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGNsYXNzTmFtZSwgXCJfX2Fycm93IFwiKS5jb25jYXQoY2xhc3NOYW1lLCBcIl9fbmV4dC1idXR0b25cIiksXG4gICAgZGlzYWJsZWQ6IG5leHRCdXR0b25EaXNhYmxlZCxcbiAgICBvbkNsaWNrOiBvbkNsaWNrTmV4dCxcbiAgICB0eXBlOiBcImJ1dHRvblwiXG4gIH0sIG5leHRMYWJlbCksIG5leHQyTGFiZWwgIT09IG51bGwgJiYgc2hvdWxkU2hvd1ByZXZOZXh0MkJ1dHRvbnMgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1xuICAgIFwiYXJpYS1sYWJlbFwiOiBuZXh0MkFyaWFMYWJlbCxcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGNsYXNzTmFtZSwgXCJfX2Fycm93IFwiKS5jb25jYXQoY2xhc3NOYW1lLCBcIl9fbmV4dDItYnV0dG9uXCIpLFxuICAgIGRpc2FibGVkOiBuZXh0MkJ1dHRvbkRpc2FibGVkLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2tOZXh0MixcbiAgICB0eXBlOiBcImJ1dHRvblwiXG4gIH0sIG5leHQyTGFiZWwpKTtcbn1cbk5hdmlnYXRpb24ucHJvcFR5cGVzID0ge1xuICBhY3RpdmVTdGFydERhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLmlzUmVxdWlyZWQsXG4gIGRyaWxsVXA6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGZvcm1hdE1vbnRoWWVhcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGZvcm1hdFllYXI6IFByb3BUeXBlcy5mdW5jLFxuICBsb2NhbGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG1heERhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICBtaW5EYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgbmF2aWdhdGlvbkFyaWFMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgbmF2aWdhdGlvbkFyaWFMaXZlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBuYXZpZ2F0aW9uTGFiZWw6IFByb3BUeXBlcy5mdW5jLFxuICBuZXh0MkFyaWFMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgbmV4dDJMYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gIG5leHRBcmlhTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG5leHRMYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gIHByZXYyQXJpYUxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBwcmV2MkxhYmVsOiBQcm9wVHlwZXMubm9kZSxcbiAgcHJldkFyaWFMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgcHJldkxhYmVsOiBQcm9wVHlwZXMubm9kZSxcbiAgc2V0QWN0aXZlU3RhcnREYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBzaG93RG91YmxlVmlldzogUHJvcFR5cGVzLmJvb2wsXG4gIHZpZXc6IGlzVmlldy5pc1JlcXVpcmVkLFxuICB2aWV3czogaXNWaWV3cy5pc1JlcXVpcmVkXG59OyIsInZhciBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImRpcmVjdGlvblwiLCBcImNvdW50XCIsIFwib2Zmc2V0XCIsIFwic3R5bGVcIiwgXCJ3cmFwXCJdO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZnVuY3Rpb24gdG9QZXJjZW50KG51bSkge1xuICByZXR1cm4gXCJcIi5jb25jYXQobnVtLCBcIiVcIik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEZsZXgoX3JlZikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBkaXJlY3Rpb24gPSBfcmVmLmRpcmVjdGlvbixcbiAgICAgIGNvdW50ID0gX3JlZi5jb3VudCxcbiAgICAgIG9mZnNldCA9IF9yZWYub2Zmc2V0LFxuICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgd3JhcCA9IF9yZWYud3JhcCxcbiAgICAgIG90aGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgX2V4Y2x1ZGVkKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246IGRpcmVjdGlvbixcbiAgICAgIGZsZXhXcmFwOiB3cmFwID8gJ3dyYXAnIDogJ25vLXdyYXAnXG4gICAgfSwgc3R5bGUpXG4gIH0sIG90aGVyUHJvcHMpLCBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjaGlsZC5wcm9wcyksIHt9LCB7XG4gICAgICBzdHlsZToge1xuICAgICAgICBmbGV4QmFzaXM6IHRvUGVyY2VudCgxMDAgLyBjb3VudCksXG4gICAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICAgIGZsZXhHcm93OiAwLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIG1hcmdpbkxlZnQ6IG9mZnNldCAmJiBpbmRleCA9PT0gMCA/IHRvUGVyY2VudCgxMDAgKiBvZmZzZXQgLyBjb3VudCkgOiBudWxsXG4gICAgICB9XG4gICAgfSkpO1xuICB9KSk7XG59XG5GbGV4LnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNvdW50OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGRpcmVjdGlvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgb2Zmc2V0OiBQcm9wVHlwZXMubnVtYmVyLFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdE9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSksXG4gIHdyYXA6IFByb3BUeXBlcy5ib29sXG59OyIsImZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuaW1wb3J0IHsgZ2V0UmFuZ2UgfSBmcm9tICcuL2RhdGVzJztcbi8qKlxuICogUmV0dXJucyBhIHZhbHVlIG5vIHNtYWxsZXIgdGhhbiBtaW4gYW5kIG5vIGxhcmdlciB0aGFuIG1heC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHJldHVybi5cbiAqIEBwYXJhbSB7Kn0gbWluIE1pbmltdW0gcmV0dXJuIHZhbHVlLlxuICogQHBhcmFtIHsqfSBtYXggTWF4aW11bSByZXR1cm4gdmFsdWUuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGJldHdlZW4odmFsdWUsIG1pbiwgbWF4KSB7XG4gIGlmIChtaW4gJiYgbWluID4gdmFsdWUpIHtcbiAgICByZXR1cm4gbWluO1xuICB9XG5cbiAgaWYgKG1heCAmJiBtYXggPCB2YWx1ZSkge1xuICAgIHJldHVybiBtYXg7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNWYWx1ZVdpdGhpblJhbmdlKHZhbHVlLCByYW5nZSkge1xuICByZXR1cm4gcmFuZ2VbMF0gPD0gdmFsdWUgJiYgcmFuZ2VbMV0gPj0gdmFsdWU7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSYW5nZVdpdGhpblJhbmdlKGdyZWF0ZXJSYW5nZSwgc21hbGxlclJhbmdlKSB7XG4gIHJldHVybiBncmVhdGVyUmFuZ2VbMF0gPD0gc21hbGxlclJhbmdlWzBdICYmIGdyZWF0ZXJSYW5nZVsxXSA+PSBzbWFsbGVyUmFuZ2VbMV07XG59XG5leHBvcnQgZnVuY3Rpb24gZG9SYW5nZXNPdmVybGFwKHJhbmdlMSwgcmFuZ2UyKSB7XG4gIHJldHVybiBpc1ZhbHVlV2l0aGluUmFuZ2UocmFuZ2UxWzBdLCByYW5nZTIpIHx8IGlzVmFsdWVXaXRoaW5SYW5nZShyYW5nZTFbMV0sIHJhbmdlMik7XG59XG5cbmZ1bmN0aW9uIGdldFJhbmdlQ2xhc3NOYW1lcyh2YWx1ZVJhbmdlLCBkYXRlUmFuZ2UsIGJhc2VDbGFzc05hbWUpIHtcbiAgdmFyIGlzUmFuZ2UgPSBkb1Jhbmdlc092ZXJsYXAoZGF0ZVJhbmdlLCB2YWx1ZVJhbmdlKTtcbiAgdmFyIGNsYXNzZXMgPSBbXTtcblxuICBpZiAoaXNSYW5nZSkge1xuICAgIGNsYXNzZXMucHVzaChiYXNlQ2xhc3NOYW1lKTtcbiAgICB2YXIgaXNSYW5nZVN0YXJ0ID0gaXNWYWx1ZVdpdGhpblJhbmdlKHZhbHVlUmFuZ2VbMF0sIGRhdGVSYW5nZSk7XG4gICAgdmFyIGlzUmFuZ2VFbmQgPSBpc1ZhbHVlV2l0aGluUmFuZ2UodmFsdWVSYW5nZVsxXSwgZGF0ZVJhbmdlKTtcblxuICAgIGlmIChpc1JhbmdlU3RhcnQpIHtcbiAgICAgIGNsYXNzZXMucHVzaChcIlwiLmNvbmNhdChiYXNlQ2xhc3NOYW1lLCBcIlN0YXJ0XCIpKTtcbiAgICB9XG5cbiAgICBpZiAoaXNSYW5nZUVuZCkge1xuICAgICAgY2xhc3Nlcy5wdXNoKFwiXCIuY29uY2F0KGJhc2VDbGFzc05hbWUsIFwiRW5kXCIpKTtcbiAgICB9XG5cbiAgICBpZiAoaXNSYW5nZVN0YXJ0ICYmIGlzUmFuZ2VFbmQpIHtcbiAgICAgIGNsYXNzZXMucHVzaChcIlwiLmNvbmNhdChiYXNlQ2xhc3NOYW1lLCBcIkJvdGhFbmRzXCIpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2xhc3Nlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRpbGVDbGFzc2VzKCkge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICB2YWx1ZSA9IF9yZWYudmFsdWUsXG4gICAgICB2YWx1ZVR5cGUgPSBfcmVmLnZhbHVlVHlwZSxcbiAgICAgIGRhdGUgPSBfcmVmLmRhdGUsXG4gICAgICBkYXRlVHlwZSA9IF9yZWYuZGF0ZVR5cGUsXG4gICAgICBob3ZlciA9IF9yZWYuaG92ZXI7XG5cbiAgdmFyIGNsYXNzTmFtZSA9ICdyZWFjdC1jYWxlbmRhcl9fdGlsZSc7XG4gIHZhciBjbGFzc2VzID0gW2NsYXNzTmFtZV07XG5cbiAgaWYgKCFkYXRlKSB7XG4gICAgcmV0dXJuIGNsYXNzZXM7XG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0ZSkgJiYgIWRhdGVUeXBlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdnZXRUaWxlQ2xhc3NlcygpOiBVbmFibGUgdG8gZ2V0IHRpbGUgYWN0aXZpdHkgY2xhc3NlcyBiZWNhdXNlIG9uZSBvciBtb3JlIHJlcXVpcmVkIGFyZ3VtZW50cyB3ZXJlIG5vdCBwYXNzZWQuJyk7XG4gIH1cblxuICB2YXIgbm93ID0gbmV3IERhdGUoKTtcbiAgdmFyIGRhdGVSYW5nZSA9IEFycmF5LmlzQXJyYXkoZGF0ZSkgPyBkYXRlIDogZ2V0UmFuZ2UoZGF0ZVR5cGUsIGRhdGUpO1xuXG4gIGlmIChpc1ZhbHVlV2l0aGluUmFuZ2Uobm93LCBkYXRlUmFuZ2UpKSB7XG4gICAgY2xhc3Nlcy5wdXNoKFwiXCIuY29uY2F0KGNsYXNzTmFtZSwgXCItLW5vd1wiKSk7XG4gIH1cblxuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIGNsYXNzZXM7XG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpICYmICF2YWx1ZVR5cGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2dldFRpbGVDbGFzc2VzKCk6IFVuYWJsZSB0byBnZXQgdGlsZSBhY3Rpdml0eSBjbGFzc2VzIGJlY2F1c2Ugb25lIG9yIG1vcmUgcmVxdWlyZWQgYXJndW1lbnRzIHdlcmUgbm90IHBhc3NlZC4nKTtcbiAgfVxuXG4gIHZhciB2YWx1ZVJhbmdlID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IGdldFJhbmdlKHZhbHVlVHlwZSwgdmFsdWUpO1xuXG4gIGlmIChpc1JhbmdlV2l0aGluUmFuZ2UodmFsdWVSYW5nZSwgZGF0ZVJhbmdlKSkge1xuICAgIGNsYXNzZXMucHVzaChcIlwiLmNvbmNhdChjbGFzc05hbWUsIFwiLS1hY3RpdmVcIikpO1xuICB9IGVsc2UgaWYgKGRvUmFuZ2VzT3ZlcmxhcCh2YWx1ZVJhbmdlLCBkYXRlUmFuZ2UpKSB7XG4gICAgY2xhc3Nlcy5wdXNoKFwiXCIuY29uY2F0KGNsYXNzTmFtZSwgXCItLWhhc0FjdGl2ZVwiKSk7XG4gIH1cblxuICB2YXIgdmFsdWVSYW5nZUNsYXNzTmFtZXMgPSBnZXRSYW5nZUNsYXNzTmFtZXModmFsdWVSYW5nZSwgZGF0ZVJhbmdlLCBcIlwiLmNvbmNhdChjbGFzc05hbWUsIFwiLS1yYW5nZVwiKSk7XG4gIGNsYXNzZXMucHVzaC5hcHBseShjbGFzc2VzLCBfdG9Db25zdW1hYmxlQXJyYXkodmFsdWVSYW5nZUNsYXNzTmFtZXMpKTtcbiAgdmFyIHZhbHVlQXJyYXkgPSBbXS5jb25jYXQodmFsdWUpO1xuXG4gIGlmIChob3ZlciAmJiB2YWx1ZUFycmF5Lmxlbmd0aCA9PT0gMSkge1xuICAgIHZhciBob3ZlclJhbmdlID0gaG92ZXIgPiB2YWx1ZVJhbmdlWzBdID8gW3ZhbHVlUmFuZ2VbMF0sIGhvdmVyXSA6IFtob3ZlciwgdmFsdWVSYW5nZVswXV07XG4gICAgdmFyIGhvdmVyUmFuZ2VDbGFzc05hbWVzID0gZ2V0UmFuZ2VDbGFzc05hbWVzKGhvdmVyUmFuZ2UsIGRhdGVSYW5nZSwgXCJcIi5jb25jYXQoY2xhc3NOYW1lLCBcIi0taG92ZXJcIikpO1xuICAgIGNsYXNzZXMucHVzaC5hcHBseShjbGFzc2VzLCBfdG9Db25zdW1hYmxlQXJyYXkoaG92ZXJSYW5nZUNsYXNzTmFtZXMpKTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc2VzO1xufSIsInZhciBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb3VudFwiLCBcImRhdGVUcmFuc2Zvcm1cIiwgXCJkYXRlVHlwZVwiLCBcImVuZFwiLCBcImhvdmVyXCIsIFwib2Zmc2V0XCIsIFwic3RhcnRcIiwgXCJzdGVwXCIsIFwidGlsZVwiLCBcInZhbHVlXCIsIFwidmFsdWVUeXBlXCJdO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBGbGV4IGZyb20gJy4vRmxleCc7XG5pbXBvcnQgeyBnZXRUaWxlQ2xhc3NlcyB9IGZyb20gJy4vc2hhcmVkL3V0aWxzJztcbmltcG9ydCB7IHRpbGVHcm91cFByb3BzIH0gZnJvbSAnLi9zaGFyZWQvcHJvcFR5cGVzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRpbGVHcm91cChfcmVmKSB7XG4gIHZhciBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIF9yZWYkY291bnQgPSBfcmVmLmNvdW50LFxuICAgICAgY291bnQgPSBfcmVmJGNvdW50ID09PSB2b2lkIDAgPyAzIDogX3JlZiRjb3VudCxcbiAgICAgIGRhdGVUcmFuc2Zvcm0gPSBfcmVmLmRhdGVUcmFuc2Zvcm0sXG4gICAgICBkYXRlVHlwZSA9IF9yZWYuZGF0ZVR5cGUsXG4gICAgICBlbmQgPSBfcmVmLmVuZCxcbiAgICAgIGhvdmVyID0gX3JlZi5ob3ZlcixcbiAgICAgIG9mZnNldCA9IF9yZWYub2Zmc2V0LFxuICAgICAgc3RhcnQgPSBfcmVmLnN0YXJ0LFxuICAgICAgX3JlZiRzdGVwID0gX3JlZi5zdGVwLFxuICAgICAgc3RlcCA9IF9yZWYkc3RlcCA9PT0gdm9pZCAwID8gMSA6IF9yZWYkc3RlcCxcbiAgICAgIFRpbGUgPSBfcmVmLnRpbGUsXG4gICAgICB2YWx1ZSA9IF9yZWYudmFsdWUsXG4gICAgICB2YWx1ZVR5cGUgPSBfcmVmLnZhbHVlVHlwZSxcbiAgICAgIHRpbGVQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBfZXhjbHVkZWQpO1xuXG4gIHZhciB0aWxlcyA9IFtdO1xuXG4gIGZvciAodmFyIHBvaW50ID0gc3RhcnQ7IHBvaW50IDw9IGVuZDsgcG9pbnQgKz0gc3RlcCkge1xuICAgIHZhciBkYXRlID0gZGF0ZVRyYW5zZm9ybShwb2ludCk7XG4gICAgdGlsZXMucHVzaCggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGlsZSwgX2V4dGVuZHMoe1xuICAgICAga2V5OiBkYXRlLmdldFRpbWUoKSxcbiAgICAgIGNsYXNzZXM6IGdldFRpbGVDbGFzc2VzKHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICB2YWx1ZVR5cGU6IHZhbHVlVHlwZSxcbiAgICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgICAgZGF0ZVR5cGU6IGRhdGVUeXBlLFxuICAgICAgICBob3ZlcjogaG92ZXJcbiAgICAgIH0pLFxuICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgIHBvaW50OiBwb2ludFxuICAgIH0sIHRpbGVQcm9wcykpKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGbGV4LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgY291bnQ6IGNvdW50LFxuICAgIG9mZnNldDogb2Zmc2V0LFxuICAgIHdyYXA6IHRydWVcbiAgfSwgdGlsZXMpO1xufVxuVGlsZUdyb3VwLnByb3BUeXBlcyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdGlsZUdyb3VwUHJvcHMpLCB7fSwge1xuICBhY3RpdmVTdGFydERhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICBjb3VudDogUHJvcFR5cGVzLm51bWJlcixcbiAgZGF0ZVRyYW5zZm9ybTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZGF0ZVR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9mZnNldDogUHJvcFR5cGVzLm51bWJlcixcbiAgc3RlcDogUHJvcFR5cGVzLm51bWJlcixcbiAgdGlsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSk7IiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbWVyZ2VDbGFzc05hbWVzIGZyb20gJ21lcmdlLWNsYXNzLW5hbWVzJztcbmltcG9ydCB7IHRpbGVQcm9wcyB9IGZyb20gJy4vc2hhcmVkL3Byb3BUeXBlcyc7XG5cbmZ1bmN0aW9uIGRhdGVzQXJlRGlmZmVyZW50KGRhdGUxLCBkYXRlMikge1xuICByZXR1cm4gZGF0ZTEgJiYgIWRhdGUyIHx8ICFkYXRlMSAmJiBkYXRlMiB8fCBkYXRlMSAmJiBkYXRlMiAmJiBkYXRlMS5nZXRUaW1lKCkgIT09IGRhdGUyLmdldFRpbWUoKTtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUobmV4dFByb3BzLCBwcm9wKSB7XG4gIHZhciBhY3RpdmVTdGFydERhdGUgPSBuZXh0UHJvcHMuYWN0aXZlU3RhcnREYXRlLFxuICAgICAgZGF0ZSA9IG5leHRQcm9wcy5kYXRlLFxuICAgICAgdmlldyA9IG5leHRQcm9wcy52aWV3O1xuICByZXR1cm4gdHlwZW9mIHByb3AgPT09ICdmdW5jdGlvbicgPyBwcm9wKHtcbiAgICBhY3RpdmVTdGFydERhdGU6IGFjdGl2ZVN0YXJ0RGF0ZSxcbiAgICBkYXRlOiBkYXRlLFxuICAgIHZpZXc6IHZpZXdcbiAgfSkgOiBwcm9wO1xufVxuXG52YXIgVGlsZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVGlsZSwgX0NvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihUaWxlKTtcblxuICBmdW5jdGlvbiBUaWxlKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUaWxlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic3RhdGVcIiwge30pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRpbGUsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFjdGl2ZVN0YXJ0RGF0ZSA9IF90aGlzJHByb3BzLmFjdGl2ZVN0YXJ0RGF0ZSxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzZXMgPSBfdGhpcyRwcm9wcy5jbGFzc2VzLFxuICAgICAgICAgIGRhdGUgPSBfdGhpcyRwcm9wcy5kYXRlLFxuICAgICAgICAgIGZvcm1hdEFiYnIgPSBfdGhpcyRwcm9wcy5mb3JtYXRBYmJyLFxuICAgICAgICAgIGxvY2FsZSA9IF90aGlzJHByb3BzLmxvY2FsZSxcbiAgICAgICAgICBtYXhEYXRlID0gX3RoaXMkcHJvcHMubWF4RGF0ZSxcbiAgICAgICAgICBtYXhEYXRlVHJhbnNmb3JtID0gX3RoaXMkcHJvcHMubWF4RGF0ZVRyYW5zZm9ybSxcbiAgICAgICAgICBtaW5EYXRlID0gX3RoaXMkcHJvcHMubWluRGF0ZSxcbiAgICAgICAgICBtaW5EYXRlVHJhbnNmb3JtID0gX3RoaXMkcHJvcHMubWluRGF0ZVRyYW5zZm9ybSxcbiAgICAgICAgICBvbkNsaWNrID0gX3RoaXMkcHJvcHMub25DbGljayxcbiAgICAgICAgICBvbk1vdXNlT3ZlciA9IF90aGlzJHByb3BzLm9uTW91c2VPdmVyLFxuICAgICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMuc3R5bGUsXG4gICAgICAgICAgdGlsZURpc2FibGVkID0gX3RoaXMkcHJvcHMudGlsZURpc2FibGVkLFxuICAgICAgICAgIHZpZXcgPSBfdGhpcyRwcm9wcy52aWV3O1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICB0aWxlQ2xhc3NOYW1lID0gX3RoaXMkc3RhdGUudGlsZUNsYXNzTmFtZSxcbiAgICAgICAgICB0aWxlQ29udGVudCA9IF90aGlzJHN0YXRlLnRpbGVDb250ZW50O1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBtZXJnZUNsYXNzTmFtZXMoY2xhc3NlcywgdGlsZUNsYXNzTmFtZSksXG4gICAgICAgIGRpc2FibGVkOiBtaW5EYXRlICYmIG1pbkRhdGVUcmFuc2Zvcm0obWluRGF0ZSkgPiBkYXRlIHx8IG1heERhdGUgJiYgbWF4RGF0ZVRyYW5zZm9ybShtYXhEYXRlKSA8IGRhdGUgfHwgdGlsZURpc2FibGVkICYmIHRpbGVEaXNhYmxlZCh7XG4gICAgICAgICAgYWN0aXZlU3RhcnREYXRlOiBhY3RpdmVTdGFydERhdGUsXG4gICAgICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgICAgICB2aWV3OiB2aWV3XG4gICAgICAgIH0pLFxuICAgICAgICBvbkNsaWNrOiBvbkNsaWNrICYmIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBvbkNsaWNrKGRhdGUsIGV2ZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Gb2N1czogb25Nb3VzZU92ZXIgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBvbk1vdXNlT3ZlcihkYXRlKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Nb3VzZU92ZXI6IG9uTW91c2VPdmVyICYmIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gb25Nb3VzZU92ZXIoZGF0ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgdHlwZTogXCJidXR0b25cIlxuICAgICAgfSwgZm9ybWF0QWJiciA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiYWJiclwiLCB7XG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiBmb3JtYXRBYmJyKGxvY2FsZSwgZGF0ZSlcbiAgICAgIH0sIGNoaWxkcmVuKSA6IGNoaWxkcmVuLCB0aWxlQ29udGVudCk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgdmFyIGFjdGl2ZVN0YXJ0RGF0ZSA9IG5leHRQcm9wcy5hY3RpdmVTdGFydERhdGUsXG4gICAgICAgICAgdGlsZUNsYXNzTmFtZSA9IG5leHRQcm9wcy50aWxlQ2xhc3NOYW1lLFxuICAgICAgICAgIHRpbGVDb250ZW50ID0gbmV4dFByb3BzLnRpbGVDb250ZW50O1xuICAgICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgICBpZiAodGlsZUNsYXNzTmFtZSAhPT0gcHJldlN0YXRlLnRpbGVDbGFzc05hbWVQcm9wcyB8fCBkYXRlc0FyZURpZmZlcmVudChhY3RpdmVTdGFydERhdGUsIHByZXZTdGF0ZS5hY3RpdmVTdGFydERhdGVQcm9wcykpIHtcbiAgICAgICAgbmV4dFN0YXRlLnRpbGVDbGFzc05hbWUgPSBnZXRWYWx1ZShuZXh0UHJvcHMsIHRpbGVDbGFzc05hbWUpO1xuICAgICAgICBuZXh0U3RhdGUudGlsZUNsYXNzTmFtZVByb3BzID0gdGlsZUNsYXNzTmFtZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRpbGVDb250ZW50ICE9PSBwcmV2U3RhdGUudGlsZUNvbnRlbnRQcm9wcyB8fCBkYXRlc0FyZURpZmZlcmVudChhY3RpdmVTdGFydERhdGUsIHByZXZTdGF0ZS5hY3RpdmVTdGFydERhdGVQcm9wcykpIHtcbiAgICAgICAgbmV4dFN0YXRlLnRpbGVDb250ZW50ID0gZ2V0VmFsdWUobmV4dFByb3BzLCB0aWxlQ29udGVudCk7XG4gICAgICAgIG5leHRTdGF0ZS50aWxlQ29udGVudFByb3BzID0gdGlsZUNvbnRlbnQ7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZS5hY3RpdmVTdGFydERhdGVQcm9wcyA9IGFjdGl2ZVN0YXJ0RGF0ZTtcbiAgICAgIHJldHVybiBuZXh0U3RhdGU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRpbGU7XG59KENvbXBvbmVudCk7XG5cbmV4cG9ydCB7IFRpbGUgYXMgZGVmYXVsdCB9O1xuVGlsZS5wcm9wVHlwZXMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHRpbGVQcm9wcyksIHt9LCB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICBmb3JtYXRBYmJyOiBQcm9wVHlwZXMuZnVuYyxcbiAgbWF4RGF0ZVRyYW5zZm9ybTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgbWluRGF0ZVRyYW5zZm9ybTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSk7IiwidmFyIF9leGNsdWRlZCA9IFtcImNsYXNzZXNcIiwgXCJmb3JtYXRZZWFyXCJdO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGdldERlY2FkZVN0YXJ0LCBnZXREZWNhZGVFbmQgfSBmcm9tICdAd29qdGVrbWFqL2RhdGUtdXRpbHMnO1xuaW1wb3J0IFRpbGUgZnJvbSAnLi4vVGlsZSc7XG5pbXBvcnQgeyBnZXREZWNhZGVMYWJlbCB9IGZyb20gJy4uL3NoYXJlZC9kYXRlcyc7XG5pbXBvcnQgeyBmb3JtYXRZZWFyIGFzIGRlZmF1bHRGb3JtYXRZZWFyIH0gZnJvbSAnLi4vc2hhcmVkL2RhdGVGb3JtYXR0ZXInO1xuaW1wb3J0IHsgdGlsZVByb3BzIH0gZnJvbSAnLi4vc2hhcmVkL3Byb3BUeXBlcyc7XG52YXIgY2xhc3NOYW1lID0gJ3JlYWN0LWNhbGVuZGFyX19jZW50dXJ5LXZpZXdfX2RlY2FkZXNfX2RlY2FkZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEZWNhZGUoX3JlZikge1xuICB2YXIgY2xhc3NlcyA9IF9yZWYuY2xhc3NlcyxcbiAgICAgIF9yZWYkZm9ybWF0WWVhciA9IF9yZWYuZm9ybWF0WWVhcixcbiAgICAgIGZvcm1hdFllYXIgPSBfcmVmJGZvcm1hdFllYXIgPT09IHZvaWQgMCA/IGRlZmF1bHRGb3JtYXRZZWFyIDogX3JlZiRmb3JtYXRZZWFyLFxuICAgICAgb3RoZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBfZXhjbHVkZWQpO1xuXG4gIHZhciBkYXRlID0gb3RoZXJQcm9wcy5kYXRlLFxuICAgICAgbG9jYWxlID0gb3RoZXJQcm9wcy5sb2NhbGU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUaWxlLCBfZXh0ZW5kcyh7fSwgb3RoZXJQcm9wcywge1xuICAgIGNsYXNzZXM6IFtdLmNvbmNhdChjbGFzc2VzLCBjbGFzc05hbWUpLFxuICAgIG1heERhdGVUcmFuc2Zvcm06IGdldERlY2FkZUVuZCxcbiAgICBtaW5EYXRlVHJhbnNmb3JtOiBnZXREZWNhZGVTdGFydCxcbiAgICB2aWV3OiBcImNlbnR1cnlcIlxuICB9KSwgZ2V0RGVjYWRlTGFiZWwobG9jYWxlLCBmb3JtYXRZZWFyLCBkYXRlKSk7XG59XG5EZWNhZGUucHJvcFR5cGVzID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0aWxlUHJvcHMpLCB7fSwge1xuICBmb3JtYXRZZWFyOiBQcm9wVHlwZXMuZnVuY1xufSk7IiwiZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldERlY2FkZVN0YXJ0IH0gZnJvbSAnQHdvanRla21hai9kYXRlLXV0aWxzJztcbmltcG9ydCBUaWxlR3JvdXAgZnJvbSAnLi4vVGlsZUdyb3VwJztcbmltcG9ydCBEZWNhZGUgZnJvbSAnLi9EZWNhZGUnO1xuaW1wb3J0IHsgZ2V0QmVnaW5PZkNlbnR1cnlZZWFyIH0gZnJvbSAnLi4vc2hhcmVkL2RhdGVzJztcbmltcG9ydCB7IHRpbGVHcm91cFByb3BzIH0gZnJvbSAnLi4vc2hhcmVkL3Byb3BUeXBlcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEZWNhZGVzKHByb3BzKSB7XG4gIHZhciBhY3RpdmVTdGFydERhdGUgPSBwcm9wcy5hY3RpdmVTdGFydERhdGU7XG4gIHZhciBzdGFydCA9IGdldEJlZ2luT2ZDZW50dXJ5WWVhcihhY3RpdmVTdGFydERhdGUpO1xuICB2YXIgZW5kID0gc3RhcnQgKyA5OTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRpbGVHcm91cCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBcInJlYWN0LWNhbGVuZGFyX19jZW50dXJ5LXZpZXdfX2RlY2FkZXNcIixcbiAgICBkYXRlVHJhbnNmb3JtOiBnZXREZWNhZGVTdGFydCxcbiAgICBkYXRlVHlwZTogXCJkZWNhZGVcIixcbiAgICBlbmQ6IGVuZCxcbiAgICBzdGFydDogc3RhcnQsXG4gICAgc3RlcDogMTAsXG4gICAgdGlsZTogRGVjYWRlXG4gIH0pKTtcbn1cbkRlY2FkZXMucHJvcFR5cGVzID0gX29iamVjdFNwcmVhZCh7fSwgdGlsZUdyb3VwUHJvcHMpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRGVjYWRlcyBmcm9tICcuL0NlbnR1cnlWaWV3L0RlY2FkZXMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ2VudHVyeVZpZXcocHJvcHMpIHtcbiAgZnVuY3Rpb24gcmVuZGVyRGVjYWRlcygpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGVjYWRlcywgcHJvcHMpO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwicmVhY3QtY2FsZW5kYXJfX2NlbnR1cnktdmlld1wiXG4gIH0sIHJlbmRlckRlY2FkZXMoKSk7XG59IiwidmFyIF9leGNsdWRlZCA9IFtcImNsYXNzZXNcIiwgXCJmb3JtYXRZZWFyXCJdO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGdldFllYXJTdGFydCwgZ2V0WWVhckVuZCB9IGZyb20gJ0B3b2p0ZWttYWovZGF0ZS11dGlscyc7XG5pbXBvcnQgVGlsZSBmcm9tICcuLi9UaWxlJztcbmltcG9ydCB7IGZvcm1hdFllYXIgYXMgZGVmYXVsdEZvcm1hdFllYXIgfSBmcm9tICcuLi9zaGFyZWQvZGF0ZUZvcm1hdHRlcic7XG5pbXBvcnQgeyB0aWxlUHJvcHMgfSBmcm9tICcuLi9zaGFyZWQvcHJvcFR5cGVzJztcbnZhciBjbGFzc05hbWUgPSAncmVhY3QtY2FsZW5kYXJfX2RlY2FkZS12aWV3X195ZWFyc19feWVhcic7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBZZWFyKF9yZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBfcmVmLmNsYXNzZXMsXG4gICAgICBfcmVmJGZvcm1hdFllYXIgPSBfcmVmLmZvcm1hdFllYXIsXG4gICAgICBmb3JtYXRZZWFyID0gX3JlZiRmb3JtYXRZZWFyID09PSB2b2lkIDAgPyBkZWZhdWx0Rm9ybWF0WWVhciA6IF9yZWYkZm9ybWF0WWVhcixcbiAgICAgIG90aGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgX2V4Y2x1ZGVkKTtcblxuICB2YXIgZGF0ZSA9IG90aGVyUHJvcHMuZGF0ZSxcbiAgICAgIGxvY2FsZSA9IG90aGVyUHJvcHMubG9jYWxlO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGlsZSwgX2V4dGVuZHMoe30sIG90aGVyUHJvcHMsIHtcbiAgICBjbGFzc2VzOiBbXS5jb25jYXQoY2xhc3NlcywgY2xhc3NOYW1lKSxcbiAgICBtYXhEYXRlVHJhbnNmb3JtOiBnZXRZZWFyRW5kLFxuICAgIG1pbkRhdGVUcmFuc2Zvcm06IGdldFllYXJTdGFydCxcbiAgICB2aWV3OiBcImRlY2FkZVwiXG4gIH0pLCBmb3JtYXRZZWFyKGxvY2FsZSwgZGF0ZSkpO1xufVxuWWVhci5wcm9wVHlwZXMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHRpbGVQcm9wcyksIHt9LCB7XG4gIGZvcm1hdFllYXI6IFByb3BUeXBlcy5mdW5jXG59KTsiLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRpbGVHcm91cCBmcm9tICcuLi9UaWxlR3JvdXAnO1xuaW1wb3J0IFllYXIgZnJvbSAnLi9ZZWFyJztcbmltcG9ydCB7IGdldEJlZ2luT2ZEZWNhZGVZZWFyIH0gZnJvbSAnLi4vc2hhcmVkL2RhdGVzJztcbmltcG9ydCB7IHRpbGVHcm91cFByb3BzIH0gZnJvbSAnLi4vc2hhcmVkL3Byb3BUeXBlcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBZZWFycyhwcm9wcykge1xuICB2YXIgYWN0aXZlU3RhcnREYXRlID0gcHJvcHMuYWN0aXZlU3RhcnREYXRlO1xuICB2YXIgc3RhcnQgPSBnZXRCZWdpbk9mRGVjYWRlWWVhcihhY3RpdmVTdGFydERhdGUpO1xuICB2YXIgZW5kID0gc3RhcnQgKyA5O1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGlsZUdyb3VwLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IFwicmVhY3QtY2FsZW5kYXJfX2RlY2FkZS12aWV3X195ZWFyc1wiLFxuICAgIGRhdGVUcmFuc2Zvcm06IGZ1bmN0aW9uIGRhdGVUcmFuc2Zvcm0oeWVhcikge1xuICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5ZWFyLCAwLCAxKTtcbiAgICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGRhdGVUeXBlOiBcInllYXJcIixcbiAgICBlbmQ6IGVuZCxcbiAgICBzdGFydDogc3RhcnQsXG4gICAgdGlsZTogWWVhclxuICB9KSk7XG59XG5ZZWFycy5wcm9wVHlwZXMgPSBfb2JqZWN0U3ByZWFkKHt9LCB0aWxlR3JvdXBQcm9wcyk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBZZWFycyBmcm9tICcuL0RlY2FkZVZpZXcvWWVhcnMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRGVjYWRlVmlldyhwcm9wcykge1xuICBmdW5jdGlvbiByZW5kZXJZZWFycygpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoWWVhcnMsIHByb3BzKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcInJlYWN0LWNhbGVuZGFyX19kZWNhZGUtdmlld1wiXG4gIH0sIHJlbmRlclllYXJzKCkpO1xufSIsInZhciBfZXhjbHVkZWQgPSBbXCJjbGFzc2VzXCIsIFwiZm9ybWF0TW9udGhcIiwgXCJmb3JtYXRNb250aFllYXJcIl07XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZ2V0TW9udGhTdGFydCwgZ2V0TW9udGhFbmQgfSBmcm9tICdAd29qdGVrbWFqL2RhdGUtdXRpbHMnO1xuaW1wb3J0IFRpbGUgZnJvbSAnLi4vVGlsZSc7XG5pbXBvcnQgeyBmb3JtYXRNb250aCBhcyBkZWZhdWx0Rm9ybWF0TW9udGgsIGZvcm1hdE1vbnRoWWVhciBhcyBkZWZhdWx0Rm9ybWF0TW9udGhZZWFyIH0gZnJvbSAnLi4vc2hhcmVkL2RhdGVGb3JtYXR0ZXInO1xuaW1wb3J0IHsgdGlsZVByb3BzIH0gZnJvbSAnLi4vc2hhcmVkL3Byb3BUeXBlcyc7XG52YXIgY2xhc3NOYW1lID0gJ3JlYWN0LWNhbGVuZGFyX195ZWFyLXZpZXdfX21vbnRoc19fbW9udGgnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTW9udGgoX3JlZikge1xuICB2YXIgY2xhc3NlcyA9IF9yZWYuY2xhc3NlcyxcbiAgICAgIF9yZWYkZm9ybWF0TW9udGggPSBfcmVmLmZvcm1hdE1vbnRoLFxuICAgICAgZm9ybWF0TW9udGggPSBfcmVmJGZvcm1hdE1vbnRoID09PSB2b2lkIDAgPyBkZWZhdWx0Rm9ybWF0TW9udGggOiBfcmVmJGZvcm1hdE1vbnRoLFxuICAgICAgX3JlZiRmb3JtYXRNb250aFllYXIgPSBfcmVmLmZvcm1hdE1vbnRoWWVhcixcbiAgICAgIGZvcm1hdE1vbnRoWWVhciA9IF9yZWYkZm9ybWF0TW9udGhZZWFyID09PSB2b2lkIDAgPyBkZWZhdWx0Rm9ybWF0TW9udGhZZWFyIDogX3JlZiRmb3JtYXRNb250aFllYXIsXG4gICAgICBvdGhlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIF9leGNsdWRlZCk7XG5cbiAgdmFyIGRhdGUgPSBvdGhlclByb3BzLmRhdGUsXG4gICAgICBsb2NhbGUgPSBvdGhlclByb3BzLmxvY2FsZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRpbGUsIF9leHRlbmRzKHt9LCBvdGhlclByb3BzLCB7XG4gICAgY2xhc3NlczogW10uY29uY2F0KGNsYXNzZXMsIGNsYXNzTmFtZSksXG4gICAgZm9ybWF0QWJicjogZm9ybWF0TW9udGhZZWFyLFxuICAgIG1heERhdGVUcmFuc2Zvcm06IGdldE1vbnRoRW5kLFxuICAgIG1pbkRhdGVUcmFuc2Zvcm06IGdldE1vbnRoU3RhcnQsXG4gICAgdmlldzogXCJ5ZWFyXCJcbiAgfSksIGZvcm1hdE1vbnRoKGxvY2FsZSwgZGF0ZSkpO1xufVxuTW9udGgucHJvcFR5cGVzID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0aWxlUHJvcHMpLCB7fSwge1xuICBmb3JtYXRNb250aDogUHJvcFR5cGVzLmZ1bmMsXG4gIGZvcm1hdE1vbnRoWWVhcjogUHJvcFR5cGVzLmZ1bmNcbn0pOyIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZ2V0WWVhciB9IGZyb20gJ0B3b2p0ZWttYWovZGF0ZS11dGlscyc7XG5pbXBvcnQgVGlsZUdyb3VwIGZyb20gJy4uL1RpbGVHcm91cCc7XG5pbXBvcnQgTW9udGggZnJvbSAnLi9Nb250aCc7XG5pbXBvcnQgeyB0aWxlR3JvdXBQcm9wcyB9IGZyb20gJy4uL3NoYXJlZC9wcm9wVHlwZXMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTW9udGhzKHByb3BzKSB7XG4gIHZhciBhY3RpdmVTdGFydERhdGUgPSBwcm9wcy5hY3RpdmVTdGFydERhdGU7XG4gIHZhciBzdGFydCA9IDA7XG4gIHZhciBlbmQgPSAxMTtcbiAgdmFyIHllYXIgPSBnZXRZZWFyKGFjdGl2ZVN0YXJ0RGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUaWxlR3JvdXAsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNsYXNzTmFtZTogXCJyZWFjdC1jYWxlbmRhcl9feWVhci12aWV3X19tb250aHNcIixcbiAgICBkYXRlVHJhbnNmb3JtOiBmdW5jdGlvbiBkYXRlVHJhbnNmb3JtKG1vbnRoSW5kZXgpIHtcbiAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoKTtcbiAgICAgIGRhdGUuc2V0RnVsbFllYXIoeWVhciwgbW9udGhJbmRleCwgMSk7XG4gICAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBkYXRlVHlwZTogXCJtb250aFwiLFxuICAgIGVuZDogZW5kLFxuICAgIHN0YXJ0OiBzdGFydCxcbiAgICB0aWxlOiBNb250aFxuICB9KSk7XG59XG5Nb250aHMucHJvcFR5cGVzID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0aWxlR3JvdXBQcm9wcyksIHt9LCB7XG4gIGxvY2FsZTogUHJvcFR5cGVzLnN0cmluZ1xufSk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBNb250aHMgZnJvbSAnLi9ZZWFyVmlldy9Nb250aHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gWWVhclZpZXcocHJvcHMpIHtcbiAgZnVuY3Rpb24gcmVuZGVyTW9udGhzKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChNb250aHMsIHByb3BzKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcInJlYWN0LWNhbGVuZGFyX195ZWFyLXZpZXdcIlxuICB9LCByZW5kZXJNb250aHMoKSk7XG59IiwidmFyIF9leGNsdWRlZCA9IFtcImZvcm1hdERheVwiLCBcImZvcm1hdExvbmdEYXRlXCIsIFwiY2FsZW5kYXJUeXBlXCIsIFwiY2xhc3Nlc1wiLCBcImN1cnJlbnRNb250aEluZGV4XCJdO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGdldERheVN0YXJ0LCBnZXREYXlFbmQgfSBmcm9tICdAd29qdGVrbWFqL2RhdGUtdXRpbHMnO1xuaW1wb3J0IFRpbGUgZnJvbSAnLi4vVGlsZSc7XG5pbXBvcnQgeyBpc1dlZWtlbmQgfSBmcm9tICcuLi9zaGFyZWQvZGF0ZXMnO1xuaW1wb3J0IHsgZm9ybWF0RGF5IGFzIGRlZmF1bHRGb3JtYXREYXksIGZvcm1hdExvbmdEYXRlIGFzIGRlZmF1bHRGb3JtYXRMb25nRGF0ZSB9IGZyb20gJy4uL3NoYXJlZC9kYXRlRm9ybWF0dGVyJztcbmltcG9ydCB7IHRpbGVQcm9wcyB9IGZyb20gJy4uL3NoYXJlZC9wcm9wVHlwZXMnO1xudmFyIGNsYXNzTmFtZSA9ICdyZWFjdC1jYWxlbmRhcl9fbW9udGgtdmlld19fZGF5c19fZGF5JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERheShfcmVmKSB7XG4gIHZhciBfcmVmJGZvcm1hdERheSA9IF9yZWYuZm9ybWF0RGF5LFxuICAgICAgZm9ybWF0RGF5ID0gX3JlZiRmb3JtYXREYXkgPT09IHZvaWQgMCA/IGRlZmF1bHRGb3JtYXREYXkgOiBfcmVmJGZvcm1hdERheSxcbiAgICAgIF9yZWYkZm9ybWF0TG9uZ0RhdGUgPSBfcmVmLmZvcm1hdExvbmdEYXRlLFxuICAgICAgZm9ybWF0TG9uZ0RhdGUgPSBfcmVmJGZvcm1hdExvbmdEYXRlID09PSB2b2lkIDAgPyBkZWZhdWx0Rm9ybWF0TG9uZ0RhdGUgOiBfcmVmJGZvcm1hdExvbmdEYXRlLFxuICAgICAgY2FsZW5kYXJUeXBlID0gX3JlZi5jYWxlbmRhclR5cGUsXG4gICAgICBjbGFzc2VzID0gX3JlZi5jbGFzc2VzLFxuICAgICAgY3VycmVudE1vbnRoSW5kZXggPSBfcmVmLmN1cnJlbnRNb250aEluZGV4LFxuICAgICAgb3RoZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBfZXhjbHVkZWQpO1xuXG4gIHZhciBkYXRlID0gb3RoZXJQcm9wcy5kYXRlLFxuICAgICAgbG9jYWxlID0gb3RoZXJQcm9wcy5sb2NhbGU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUaWxlLCBfZXh0ZW5kcyh7fSwgb3RoZXJQcm9wcywge1xuICAgIGNsYXNzZXM6IFtdLmNvbmNhdChjbGFzc2VzLCBjbGFzc05hbWUsIGlzV2Vla2VuZChkYXRlLCBjYWxlbmRhclR5cGUpID8gXCJcIi5jb25jYXQoY2xhc3NOYW1lLCBcIi0td2Vla2VuZFwiKSA6IG51bGwsIGRhdGUuZ2V0TW9udGgoKSAhPT0gY3VycmVudE1vbnRoSW5kZXggPyBcIlwiLmNvbmNhdChjbGFzc05hbWUsIFwiLS1uZWlnaGJvcmluZ01vbnRoXCIpIDogbnVsbCksXG4gICAgZm9ybWF0QWJicjogZm9ybWF0TG9uZ0RhdGUsXG4gICAgbWF4RGF0ZVRyYW5zZm9ybTogZ2V0RGF5RW5kLFxuICAgIG1pbkRhdGVUcmFuc2Zvcm06IGdldERheVN0YXJ0LFxuICAgIHZpZXc6IFwibW9udGhcIlxuICB9KSwgZm9ybWF0RGF5KGxvY2FsZSwgZGF0ZSkpO1xufVxuRGF5LnByb3BUeXBlcyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdGlsZVByb3BzKSwge30sIHtcbiAgY3VycmVudE1vbnRoSW5kZXg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgZm9ybWF0RGF5OiBQcm9wVHlwZXMuZnVuYyxcbiAgZm9ybWF0TG9uZ0RhdGU6IFByb3BUeXBlcy5mdW5jXG59KTsiLCJ2YXIgX2V4Y2x1ZGVkID0gW1wic2hvd0ZpeGVkTnVtYmVyT2ZXZWVrc1wiLCBcInNob3dOZWlnaGJvcmluZ01vbnRoXCJdO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGdldFllYXIsIGdldE1vbnRoLCBnZXREYXlzSW5Nb250aCB9IGZyb20gJ0B3b2p0ZWttYWovZGF0ZS11dGlscyc7XG5pbXBvcnQgVGlsZUdyb3VwIGZyb20gJy4uL1RpbGVHcm91cCc7XG5pbXBvcnQgRGF5IGZyb20gJy4vRGF5JztcbmltcG9ydCB7IGdldERheU9mV2VlayB9IGZyb20gJy4uL3NoYXJlZC9kYXRlcyc7XG5pbXBvcnQgeyBpc0NhbGVuZGFyVHlwZSwgdGlsZUdyb3VwUHJvcHMgfSBmcm9tICcuLi9zaGFyZWQvcHJvcFR5cGVzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERheXMocHJvcHMpIHtcbiAgdmFyIGFjdGl2ZVN0YXJ0RGF0ZSA9IHByb3BzLmFjdGl2ZVN0YXJ0RGF0ZSxcbiAgICAgIGNhbGVuZGFyVHlwZSA9IHByb3BzLmNhbGVuZGFyVHlwZTtcblxuICB2YXIgc2hvd0ZpeGVkTnVtYmVyT2ZXZWVrcyA9IHByb3BzLnNob3dGaXhlZE51bWJlck9mV2Vla3MsXG4gICAgICBzaG93TmVpZ2hib3JpbmdNb250aCA9IHByb3BzLnNob3dOZWlnaGJvcmluZ01vbnRoLFxuICAgICAgb3RoZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICB2YXIgeWVhciA9IGdldFllYXIoYWN0aXZlU3RhcnREYXRlKTtcbiAgdmFyIG1vbnRoSW5kZXggPSBnZXRNb250aChhY3RpdmVTdGFydERhdGUpO1xuICB2YXIgaGFzRml4ZWROdW1iZXJPZldlZWtzID0gc2hvd0ZpeGVkTnVtYmVyT2ZXZWVrcyB8fCBzaG93TmVpZ2hib3JpbmdNb250aDtcbiAgdmFyIGRheU9mV2VlayA9IGdldERheU9mV2VlayhhY3RpdmVTdGFydERhdGUsIGNhbGVuZGFyVHlwZSk7XG4gIHZhciBvZmZzZXQgPSBoYXNGaXhlZE51bWJlck9mV2Vla3MgPyAwIDogZGF5T2ZXZWVrO1xuICAvKipcbiAgICogRGVmaW5lcyBvbiB3aGljaCBkYXkgb2YgdGhlIG1vbnRoIHRoZSBncmlkIHNoYWxsIHN0YXJ0LiBJZiB3ZSBzaW1wbHkgc2hvdyBjdXJyZW50XG4gICAqIG1vbnRoLCB3ZSBvYnZpb3VzbHkgc3RhcnQgb24gZGF5IG9uZSwgYnV0IGlmIHNob3dOZWlnaGJvcmluZ01vbnRoIGlzIHNldCB0b1xuICAgKiB0cnVlLCB3ZSBuZWVkIHRvIGZpbmQgdGhlIGJlZ2lubmluZyBvZiB0aGUgd2VlayB0aGUgZmlyc3QgZGF5IG9mIHRoZSBtb250aCBpcyBpbi5cbiAgICovXG5cbiAgdmFyIHN0YXJ0ID0gKGhhc0ZpeGVkTnVtYmVyT2ZXZWVrcyA/IC1kYXlPZldlZWsgOiAwKSArIDE7XG4gIC8qKlxuICAgKiBEZWZpbmVzIG9uIHdoaWNoIGRheSBvZiB0aGUgbW9udGggdGhlIGdyaWQgc2hhbGwgZW5kLiBJZiB3ZSBzaW1wbHkgc2hvdyBjdXJyZW50XG4gICAqIG1vbnRoLCB3ZSBuZWVkIHRvIHN0b3Agb24gdGhlIGxhc3QgZGF5IG9mIHRoZSBtb250aCwgYnV0IGlmIHNob3dOZWlnaGJvcmluZ01vbnRoXG4gICAqIGlzIHNldCB0byB0cnVlLCB3ZSBuZWVkIHRvIGZpbmQgdGhlIGVuZCBvZiB0aGUgd2VlayB0aGUgbGFzdCBkYXkgb2YgdGhlIG1vbnRoIGlzIGluLlxuICAgKi9cblxuICB2YXIgZW5kID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChzaG93Rml4ZWROdW1iZXJPZldlZWtzKSB7XG4gICAgICAvLyBBbHdheXMgc2hvdyA2IHdlZWtzXG4gICAgICByZXR1cm4gc3RhcnQgKyA2ICogNyAtIDE7XG4gICAgfVxuXG4gICAgdmFyIGRheXNJbk1vbnRoID0gZ2V0RGF5c0luTW9udGgoYWN0aXZlU3RhcnREYXRlKTtcblxuICAgIGlmIChzaG93TmVpZ2hib3JpbmdNb250aCkge1xuICAgICAgdmFyIGFjdGl2ZUVuZERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgYWN0aXZlRW5kRGF0ZS5zZXRGdWxsWWVhcih5ZWFyLCBtb250aEluZGV4LCBkYXlzSW5Nb250aCk7XG4gICAgICBhY3RpdmVFbmREYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgdmFyIGRheXNVbnRpbEVuZE9mVGhlV2VlayA9IDcgLSBnZXREYXlPZldlZWsoYWN0aXZlRW5kRGF0ZSwgY2FsZW5kYXJUeXBlKSAtIDE7XG4gICAgICByZXR1cm4gZGF5c0luTW9udGggKyBkYXlzVW50aWxFbmRPZlRoZVdlZWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRheXNJbk1vbnRoO1xuICB9KCk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRpbGVHcm91cCwgX2V4dGVuZHMoe30sIG90aGVyUHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IFwicmVhY3QtY2FsZW5kYXJfX21vbnRoLXZpZXdfX2RheXNcIixcbiAgICBjb3VudDogNyxcbiAgICBjdXJyZW50TW9udGhJbmRleDogbW9udGhJbmRleCxcbiAgICBkYXRlVHJhbnNmb3JtOiBmdW5jdGlvbiBkYXRlVHJhbnNmb3JtKGRheSkge1xuICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5ZWFyLCBtb250aEluZGV4LCBkYXkpO1xuICAgICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgZGF0ZVR5cGU6IFwiZGF5XCIsXG4gICAgZW5kOiBlbmQsXG4gICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgc3RhcnQ6IHN0YXJ0LFxuICAgIHRpbGU6IERheVxuICB9KSk7XG59XG5EYXlzLnByb3BUeXBlcyA9IF9vYmplY3RTcHJlYWQoe1xuICBjYWxlbmRhclR5cGU6IGlzQ2FsZW5kYXJUeXBlLmlzUmVxdWlyZWQsXG4gIHNob3dGaXhlZE51bWJlck9mV2Vla3M6IFByb3BUeXBlcy5ib29sLFxuICBzaG93TmVpZ2hib3JpbmdNb250aDogUHJvcFR5cGVzLmJvb2xcbn0sIHRpbGVHcm91cFByb3BzKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGdldFllYXIsIGdldE1vbnRoLCBnZXRNb250aFN0YXJ0IH0gZnJvbSAnQHdvanRla21hai9kYXRlLXV0aWxzJztcbmltcG9ydCBGbGV4IGZyb20gJy4uL0ZsZXgnO1xuaW1wb3J0IHsgZ2V0RGF5T2ZXZWVrIH0gZnJvbSAnLi4vc2hhcmVkL2RhdGVzJztcbmltcG9ydCB7IGZvcm1hdFdlZWtkYXksIGZvcm1hdFNob3J0V2Vla2RheSBhcyBkZWZhdWx0Rm9ybWF0U2hvcnRXZWVrZGF5IH0gZnJvbSAnLi4vc2hhcmVkL2RhdGVGb3JtYXR0ZXInO1xuaW1wb3J0IHsgaXNDYWxlbmRhclR5cGUgfSBmcm9tICcuLi9zaGFyZWQvcHJvcFR5cGVzJztcbnZhciBjbGFzc05hbWUgPSAncmVhY3QtY2FsZW5kYXJfX21vbnRoLXZpZXdfX3dlZWtkYXlzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFdlZWtkYXlzKHByb3BzKSB7XG4gIHZhciBjYWxlbmRhclR5cGUgPSBwcm9wcy5jYWxlbmRhclR5cGUsXG4gICAgICBfcHJvcHMkZm9ybWF0U2hvcnRXZWUgPSBwcm9wcy5mb3JtYXRTaG9ydFdlZWtkYXksXG4gICAgICBmb3JtYXRTaG9ydFdlZWtkYXkgPSBfcHJvcHMkZm9ybWF0U2hvcnRXZWUgPT09IHZvaWQgMCA/IGRlZmF1bHRGb3JtYXRTaG9ydFdlZWtkYXkgOiBfcHJvcHMkZm9ybWF0U2hvcnRXZWUsXG4gICAgICBsb2NhbGUgPSBwcm9wcy5sb2NhbGUsXG4gICAgICBvbk1vdXNlTGVhdmUgPSBwcm9wcy5vbk1vdXNlTGVhdmU7XG4gIHZhciBhbnlEYXRlID0gbmV3IERhdGUoKTtcbiAgdmFyIGJlZ2luT2ZNb250aCA9IGdldE1vbnRoU3RhcnQoYW55RGF0ZSk7XG4gIHZhciB5ZWFyID0gZ2V0WWVhcihiZWdpbk9mTW9udGgpO1xuICB2YXIgbW9udGhJbmRleCA9IGdldE1vbnRoKGJlZ2luT2ZNb250aCk7XG4gIHZhciB3ZWVrZGF5cyA9IFtdO1xuXG4gIGZvciAodmFyIHdlZWtkYXkgPSAxOyB3ZWVrZGF5IDw9IDc7IHdlZWtkYXkgKz0gMSkge1xuICAgIHZhciB3ZWVrZGF5RGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoSW5kZXgsIHdlZWtkYXkgLSBnZXREYXlPZldlZWsoYmVnaW5PZk1vbnRoLCBjYWxlbmRhclR5cGUpKTtcbiAgICB2YXIgYWJiciA9IGZvcm1hdFdlZWtkYXkobG9jYWxlLCB3ZWVrZGF5RGF0ZSk7XG4gICAgd2Vla2RheXMucHVzaCggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAga2V5OiB3ZWVrZGF5LFxuICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChjbGFzc05hbWUsIFwiX193ZWVrZGF5XCIpXG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhYmJyXCIsIHtcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiBhYmJyLFxuICAgICAgdGl0bGU6IGFiYnJcbiAgICB9LCBmb3JtYXRTaG9ydFdlZWtkYXkobG9jYWxlLCB3ZWVrZGF5RGF0ZSkucmVwbGFjZSgnLicsICcnKSkpKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGbGV4LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgY291bnQ6IDcsXG4gICAgb25Gb2N1czogb25Nb3VzZUxlYXZlLFxuICAgIG9uTW91c2VPdmVyOiBvbk1vdXNlTGVhdmVcbiAgfSwgd2Vla2RheXMpO1xufVxuV2Vla2RheXMucHJvcFR5cGVzID0ge1xuICBjYWxlbmRhclR5cGU6IGlzQ2FsZW5kYXJUeXBlLmlzUmVxdWlyZWQsXG4gIGZvcm1hdFNob3J0V2Vla2RheTogUHJvcFR5cGVzLmZ1bmMsXG4gIGxvY2FsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25Nb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuY1xufTsiLCJ2YXIgX2V4Y2x1ZGVkID0gW1wiZGF0ZVwiLCBcIm9uQ2xpY2tXZWVrTnVtYmVyXCIsIFwid2Vla051bWJlclwiXTtcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG52YXIgY2xhc3NOYW1lID0gJ3JlYWN0LWNhbGVuZGFyX190aWxlJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFdlZWtOdW1iZXIoX3JlZikge1xuICB2YXIgZGF0ZSA9IF9yZWYuZGF0ZSxcbiAgICAgIG9uQ2xpY2tXZWVrTnVtYmVyID0gX3JlZi5vbkNsaWNrV2Vla051bWJlcixcbiAgICAgIHdlZWtOdW1iZXIgPSBfcmVmLndlZWtOdW1iZXIsXG4gICAgICBvdGhlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIF9leGNsdWRlZCk7XG5cbiAgdmFyIHByb3BzID0gX29iamVjdFNwcmVhZCh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgfSwgb3RoZXJQcm9wcyk7XG5cbiAgdmFyIGNoaWxkcmVuID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwsIHdlZWtOdW1iZXIpO1xuICByZXR1cm4gb25DbGlja1dlZWtOdW1iZXIgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICByZXR1cm4gb25DbGlja1dlZWtOdW1iZXIod2Vla051bWJlciwgZGF0ZSwgZXZlbnQpO1xuICAgIH0sXG4gICAgdHlwZTogXCJidXR0b25cIlxuICB9KSwgY2hpbGRyZW4pIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgcHJvcHMsIGNoaWxkcmVuKTtcbn1cbldlZWtOdW1iZXIucHJvcFR5cGVzID0ge1xuICBkYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKS5pc1JlcXVpcmVkLFxuICBvbkNsaWNrV2Vla051bWJlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIHdlZWtOdW1iZXI6IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWRcbn07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBnZXRZZWFyLCBnZXRNb250aCwgZ2V0RGF0ZSwgZ2V0RGF5c0luTW9udGggfSBmcm9tICdAd29qdGVrbWFqL2RhdGUtdXRpbHMnO1xuaW1wb3J0IFdlZWtOdW1iZXIgZnJvbSAnLi9XZWVrTnVtYmVyJztcbmltcG9ydCBGbGV4IGZyb20gJy4uL0ZsZXgnO1xuaW1wb3J0IHsgZ2V0QmVnaW5PZldlZWssIGdldERheU9mV2VlaywgZ2V0V2Vla051bWJlciB9IGZyb20gJy4uL3NoYXJlZC9kYXRlcyc7XG5pbXBvcnQgeyBpc0NhbGVuZGFyVHlwZSB9IGZyb20gJy4uL3NoYXJlZC9wcm9wVHlwZXMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gV2Vla051bWJlcnMocHJvcHMpIHtcbiAgdmFyIGFjdGl2ZVN0YXJ0RGF0ZSA9IHByb3BzLmFjdGl2ZVN0YXJ0RGF0ZSxcbiAgICAgIGNhbGVuZGFyVHlwZSA9IHByb3BzLmNhbGVuZGFyVHlwZSxcbiAgICAgIG9uQ2xpY2tXZWVrTnVtYmVyID0gcHJvcHMub25DbGlja1dlZWtOdW1iZXIsXG4gICAgICBvbk1vdXNlTGVhdmUgPSBwcm9wcy5vbk1vdXNlTGVhdmUsXG4gICAgICBzaG93Rml4ZWROdW1iZXJPZldlZWtzID0gcHJvcHMuc2hvd0ZpeGVkTnVtYmVyT2ZXZWVrcztcblxuICB2YXIgbnVtYmVyT2ZXZWVrcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2hvd0ZpeGVkTnVtYmVyT2ZXZWVrcykge1xuICAgICAgcmV0dXJuIDY7XG4gICAgfVxuXG4gICAgdmFyIG51bWJlck9mRGF5cyA9IGdldERheXNJbk1vbnRoKGFjdGl2ZVN0YXJ0RGF0ZSk7XG4gICAgdmFyIHN0YXJ0V2Vla2RheSA9IGdldERheU9mV2VlayhhY3RpdmVTdGFydERhdGUsIGNhbGVuZGFyVHlwZSk7XG4gICAgdmFyIGRheXMgPSBudW1iZXJPZkRheXMgLSAoNyAtIHN0YXJ0V2Vla2RheSk7XG4gICAgcmV0dXJuIDEgKyBNYXRoLmNlaWwoZGF5cyAvIDcpO1xuICB9KCk7XG5cbiAgdmFyIGRhdGVzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB5ZWFyID0gZ2V0WWVhcihhY3RpdmVTdGFydERhdGUpO1xuICAgIHZhciBtb250aEluZGV4ID0gZ2V0TW9udGgoYWN0aXZlU3RhcnREYXRlKTtcbiAgICB2YXIgZGF5ID0gZ2V0RGF0ZShhY3RpdmVTdGFydERhdGUpO1xuICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBudW1iZXJPZldlZWtzOyBpbmRleCArPSAxKSB7XG4gICAgICByZXN1bHQucHVzaChnZXRCZWdpbk9mV2VlayhuZXcgRGF0ZSh5ZWFyLCBtb250aEluZGV4LCBkYXkgKyBpbmRleCAqIDcpLCBjYWxlbmRhclR5cGUpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KCk7XG5cbiAgdmFyIHdlZWtOdW1iZXJzID0gZGF0ZXMubWFwKGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGdldFdlZWtOdW1iZXIoZGF0ZSwgY2FsZW5kYXJUeXBlKTtcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGbGV4LCB7XG4gICAgY2xhc3NOYW1lOiBcInJlYWN0LWNhbGVuZGFyX19tb250aC12aWV3X193ZWVrTnVtYmVyc1wiLFxuICAgIGNvdW50OiBudW1iZXJPZldlZWtzLFxuICAgIGRpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICBvbkZvY3VzOiBvbk1vdXNlTGVhdmUsXG4gICAgb25Nb3VzZU92ZXI6IG9uTW91c2VMZWF2ZSxcbiAgICBzdHlsZToge1xuICAgICAgZmxleEJhc2lzOiAnY2FsYygxMDAlICogKDEgLyA4KScsXG4gICAgICBmbGV4U2hyaW5rOiAwXG4gICAgfVxuICB9LCB3ZWVrTnVtYmVycy5tYXAoZnVuY3Rpb24gKHdlZWtOdW1iZXIsIHdlZWtJbmRleCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChXZWVrTnVtYmVyLCB7XG4gICAgICBrZXk6IHdlZWtOdW1iZXIsXG4gICAgICBkYXRlOiBkYXRlc1t3ZWVrSW5kZXhdLFxuICAgICAgb25DbGlja1dlZWtOdW1iZXI6IG9uQ2xpY2tXZWVrTnVtYmVyLFxuICAgICAgd2Vla051bWJlcjogd2Vla051bWJlclxuICAgIH0pO1xuICB9KSk7XG59XG5XZWVrTnVtYmVycy5wcm9wVHlwZXMgPSB7XG4gIGFjdGl2ZVN0YXJ0RGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSkuaXNSZXF1aXJlZCxcbiAgY2FsZW5kYXJUeXBlOiBpc0NhbGVuZGFyVHlwZS5pc1JlcXVpcmVkLFxuICBvbkNsaWNrV2Vla051bWJlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIHNob3dGaXhlZE51bWJlck9mV2Vla3M6IFByb3BUeXBlcy5ib29sXG59OyIsInZhciBfZXhjbHVkZWQgPSBbXCJjYWxlbmRhclR5cGVcIiwgXCJmb3JtYXRTaG9ydFdlZWtkYXlcIiwgXCJvbkNsaWNrV2Vla051bWJlclwiLCBcInNob3dXZWVrTnVtYmVyc1wiXTtcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbWVyZ2VDbGFzc05hbWVzIGZyb20gJ21lcmdlLWNsYXNzLW5hbWVzJztcbmltcG9ydCBEYXlzIGZyb20gJy4vTW9udGhWaWV3L0RheXMnO1xuaW1wb3J0IFdlZWtkYXlzIGZyb20gJy4vTW9udGhWaWV3L1dlZWtkYXlzJztcbmltcG9ydCBXZWVrTnVtYmVycyBmcm9tICcuL01vbnRoVmlldy9XZWVrTnVtYmVycyc7XG5pbXBvcnQgeyBDQUxFTkRBUl9UWVBFUywgQ0FMRU5EQVJfVFlQRV9MT0NBTEVTIH0gZnJvbSAnLi9zaGFyZWQvY29uc3QnO1xuaW1wb3J0IHsgaXNDYWxlbmRhclR5cGUgfSBmcm9tICcuL3NoYXJlZC9wcm9wVHlwZXMnO1xuXG5mdW5jdGlvbiBnZXRDYWxlbmRhclR5cGVGcm9tTG9jYWxlKGxvY2FsZSkge1xuICByZXR1cm4gT2JqZWN0LmtleXMoQ0FMRU5EQVJfVFlQRV9MT0NBTEVTKS5maW5kKGZ1bmN0aW9uIChjYWxlbmRhclR5cGUpIHtcbiAgICByZXR1cm4gQ0FMRU5EQVJfVFlQRV9MT0NBTEVTW2NhbGVuZGFyVHlwZV0uaW5jbHVkZXMobG9jYWxlKTtcbiAgfSkgfHwgQ0FMRU5EQVJfVFlQRVMuSVNPXzg2MDE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1vbnRoVmlldyhwcm9wcykge1xuICB2YXIgYWN0aXZlU3RhcnREYXRlID0gcHJvcHMuYWN0aXZlU3RhcnREYXRlLFxuICAgICAgbG9jYWxlID0gcHJvcHMubG9jYWxlLFxuICAgICAgb25Nb3VzZUxlYXZlID0gcHJvcHMub25Nb3VzZUxlYXZlLFxuICAgICAgc2hvd0ZpeGVkTnVtYmVyT2ZXZWVrcyA9IHByb3BzLnNob3dGaXhlZE51bWJlck9mV2Vla3M7XG5cbiAgdmFyIF9wcm9wcyRjYWxlbmRhclR5cGUgPSBwcm9wcy5jYWxlbmRhclR5cGUsXG4gICAgICBjYWxlbmRhclR5cGUgPSBfcHJvcHMkY2FsZW5kYXJUeXBlID09PSB2b2lkIDAgPyBnZXRDYWxlbmRhclR5cGVGcm9tTG9jYWxlKGxvY2FsZSkgOiBfcHJvcHMkY2FsZW5kYXJUeXBlLFxuICAgICAgZm9ybWF0U2hvcnRXZWVrZGF5ID0gcHJvcHMuZm9ybWF0U2hvcnRXZWVrZGF5LFxuICAgICAgb25DbGlja1dlZWtOdW1iZXIgPSBwcm9wcy5vbkNsaWNrV2Vla051bWJlcixcbiAgICAgIHNob3dXZWVrTnVtYmVycyA9IHByb3BzLnNob3dXZWVrTnVtYmVycyxcbiAgICAgIGNoaWxkUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgZnVuY3Rpb24gcmVuZGVyV2Vla2RheXMoKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFdlZWtkYXlzLCB7XG4gICAgICBjYWxlbmRhclR5cGU6IGNhbGVuZGFyVHlwZSxcbiAgICAgIGZvcm1hdFNob3J0V2Vla2RheTogZm9ybWF0U2hvcnRXZWVrZGF5LFxuICAgICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgICBvbk1vdXNlTGVhdmU6IG9uTW91c2VMZWF2ZVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVuZGVyV2Vla051bWJlcnMoKSB7XG4gICAgaWYgKCFzaG93V2Vla051bWJlcnMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChXZWVrTnVtYmVycywge1xuICAgICAgYWN0aXZlU3RhcnREYXRlOiBhY3RpdmVTdGFydERhdGUsXG4gICAgICBjYWxlbmRhclR5cGU6IGNhbGVuZGFyVHlwZSxcbiAgICAgIG9uQ2xpY2tXZWVrTnVtYmVyOiBvbkNsaWNrV2Vla051bWJlcixcbiAgICAgIG9uTW91c2VMZWF2ZTogb25Nb3VzZUxlYXZlLFxuICAgICAgc2hvd0ZpeGVkTnVtYmVyT2ZXZWVrczogc2hvd0ZpeGVkTnVtYmVyT2ZXZWVrc1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVuZGVyRGF5cygpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF5cywgX2V4dGVuZHMoe1xuICAgICAgY2FsZW5kYXJUeXBlOiBjYWxlbmRhclR5cGVcbiAgICB9LCBjaGlsZFByb3BzKSk7XG4gIH1cblxuICB2YXIgY2xhc3NOYW1lID0gJ3JlYWN0LWNhbGVuZGFyX19tb250aC12aWV3JztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IG1lcmdlQ2xhc3NOYW1lcyhjbGFzc05hbWUsIHNob3dXZWVrTnVtYmVycyA/IFwiXCIuY29uY2F0KGNsYXNzTmFtZSwgXCItLXdlZWtOdW1iZXJzXCIpIDogJycpXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBzdHlsZToge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtZW5kJ1xuICAgIH1cbiAgfSwgcmVuZGVyV2Vla051bWJlcnMoKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHN0eWxlOiB7XG4gICAgICBmbGV4R3JvdzogMSxcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9XG4gIH0sIHJlbmRlcldlZWtkYXlzKCksIHJlbmRlckRheXMoKSkpKTtcbn1cbk1vbnRoVmlldy5wcm9wVHlwZXMgPSB7XG4gIGFjdGl2ZVN0YXJ0RGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSkuaXNSZXF1aXJlZCxcbiAgY2FsZW5kYXJUeXBlOiBpc0NhbGVuZGFyVHlwZSxcbiAgZm9ybWF0U2hvcnRXZWVrZGF5OiBQcm9wVHlwZXMuZnVuYyxcbiAgbG9jYWxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvbkNsaWNrV2Vla051bWJlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIHNob3dGaXhlZE51bWJlck9mV2Vla3M6IFByb3BUeXBlcy5ib29sLFxuICBzaG93V2Vla051bWJlcnM6IFByb3BUeXBlcy5ib29sXG59OyIsInZhciBfZXhjbHVkZWQgPSBbXCJhY3RpdmVTdGFydERhdGVcIiwgXCJkZWZhdWx0QWN0aXZlU3RhcnREYXRlXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwiZGVmYXVsdFZpZXdcIiwgXCJtYXhEZXRhaWxcIiwgXCJtaW5EZXRhaWxcIiwgXCJ2YWx1ZVwiLCBcInZpZXdcIl07XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbWVyZ2VDbGFzc05hbWVzIGZyb20gJ21lcmdlLWNsYXNzLW5hbWVzJztcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gJy4vQ2FsZW5kYXIvTmF2aWdhdGlvbic7XG5pbXBvcnQgQ2VudHVyeVZpZXcgZnJvbSAnLi9DZW50dXJ5Vmlldyc7XG5pbXBvcnQgRGVjYWRlVmlldyBmcm9tICcuL0RlY2FkZVZpZXcnO1xuaW1wb3J0IFllYXJWaWV3IGZyb20gJy4vWWVhclZpZXcnO1xuaW1wb3J0IE1vbnRoVmlldyBmcm9tICcuL01vbnRoVmlldyc7XG5pbXBvcnQgeyBnZXRCZWdpbiwgZ2V0QmVnaW5OZXh0LCBnZXRFbmQsIGdldFZhbHVlUmFuZ2UgfSBmcm9tICcuL3NoYXJlZC9kYXRlcyc7XG5pbXBvcnQgeyBpc0NhbGVuZGFyVHlwZSwgaXNDbGFzc05hbWUsIGlzTWF4RGF0ZSwgaXNNaW5EYXRlLCBpc1JlZiwgaXNWYWx1ZSwgaXNWaWV3IH0gZnJvbSAnLi9zaGFyZWQvcHJvcFR5cGVzJztcbmltcG9ydCB7IGJldHdlZW4gfSBmcm9tICcuL3NoYXJlZC91dGlscyc7XG52YXIgZGVmYXVsdE1pbkRhdGUgPSBuZXcgRGF0ZSgpO1xuZGVmYXVsdE1pbkRhdGUuc2V0RnVsbFllYXIoMSwgMCwgMSk7XG5kZWZhdWx0TWluRGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbnZhciBkZWZhdWx0TWF4RGF0ZSA9IG5ldyBEYXRlKDguNjRlMTUpO1xudmFyIGJhc2VDbGFzc05hbWUgPSAncmVhY3QtY2FsZW5kYXInO1xudmFyIGFsbFZpZXdzID0gWydjZW50dXJ5JywgJ2RlY2FkZScsICd5ZWFyJywgJ21vbnRoJ107XG52YXIgYWxsVmFsdWVUeXBlcyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYWxsVmlld3Muc2xpY2UoMSkpLCBbJ2RheSddKTtcblxuZnVuY3Rpb24gdG9EYXRlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gbmV3IERhdGUodmFsdWUpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHZpZXdzIGFycmF5IHdpdGggZGlzYWxsb3dlZCB2YWx1ZXMgY3V0IG9mZi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldExpbWl0ZWRWaWV3cyhtaW5EZXRhaWwsIG1heERldGFpbCkge1xuICByZXR1cm4gYWxsVmlld3Muc2xpY2UoYWxsVmlld3MuaW5kZXhPZihtaW5EZXRhaWwpLCBhbGxWaWV3cy5pbmRleE9mKG1heERldGFpbCkgKyAxKTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgZ2l2ZW4gdmlldyBpcyBhbGxvd2VkIHdpdGggY3VycmVudGx5IGFwcGxpZWQgc2V0dGluZ3MuXG4gKi9cblxuXG5mdW5jdGlvbiBpc1ZpZXdBbGxvd2VkKHZpZXcsIG1pbkRldGFpbCwgbWF4RGV0YWlsKSB7XG4gIHZhciB2aWV3cyA9IGdldExpbWl0ZWRWaWV3cyhtaW5EZXRhaWwsIG1heERldGFpbCk7XG4gIHJldHVybiB2aWV3cy5pbmRleE9mKHZpZXcpICE9PSAtMTtcbn1cbi8qKlxuICogR2V0cyBlaXRoZXIgcHJvdmlkZWQgdmlldyBpZiBhbGxvd2VkIGJ5IG1pbkRldGFpbCBhbmQgbWF4RGV0YWlsLCBvciBnZXRzXG4gKiB0aGUgZGVmYXVsdCB2aWV3IGlmIG5vdCBhbGxvd2VkLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0Vmlldyh2aWV3LCBtaW5EZXRhaWwsIG1heERldGFpbCkge1xuICBpZiAoaXNWaWV3QWxsb3dlZCh2aWV3LCBtaW5EZXRhaWwsIG1heERldGFpbCkpIHtcbiAgICByZXR1cm4gdmlldztcbiAgfVxuXG4gIHJldHVybiBtYXhEZXRhaWw7XG59XG4vKipcbiAqIFJldHVybnMgdmFsdWUgdHlwZSB0aGF0IGNhbiBiZSByZXR1cm5lZCB3aXRoIGN1cnJlbnRseSBhcHBsaWVkIHNldHRpbmdzLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0VmFsdWVUeXBlKG1heERldGFpbCkge1xuICByZXR1cm4gYWxsVmFsdWVUeXBlc1thbGxWaWV3cy5pbmRleE9mKG1heERldGFpbCldO1xufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSh2YWx1ZSwgaW5kZXgpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHJhd1ZhbHVlID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAyID8gdmFsdWVbaW5kZXhdIDogdmFsdWU7XG5cbiAgaWYgKCFyYXdWYWx1ZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHZhbHVlRGF0ZSA9IHRvRGF0ZShyYXdWYWx1ZSk7XG5cbiAgaWYgKGlzTmFOKHZhbHVlRGF0ZS5nZXRUaW1lKCkpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBkYXRlOiBcIi5jb25jYXQodmFsdWUpKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZURhdGU7XG59XG5cbmZ1bmN0aW9uIGdldERldGFpbFZhbHVlKF9yZWYsIGluZGV4KSB7XG4gIHZhciB2YWx1ZSA9IF9yZWYudmFsdWUsXG4gICAgICBtaW5EYXRlID0gX3JlZi5taW5EYXRlLFxuICAgICAgbWF4RGF0ZSA9IF9yZWYubWF4RGF0ZSxcbiAgICAgIG1heERldGFpbCA9IF9yZWYubWF4RGV0YWlsO1xuICB2YXIgdmFsdWVQaWVjZSA9IGdldFZhbHVlKHZhbHVlLCBpbmRleCk7XG5cbiAgaWYgKCF2YWx1ZVBpZWNlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgdmFsdWVUeXBlID0gZ2V0VmFsdWVUeXBlKG1heERldGFpbCk7XG4gIHZhciBkZXRhaWxWYWx1ZUZyb20gPSBbZ2V0QmVnaW4sIGdldEVuZF1baW5kZXhdKHZhbHVlVHlwZSwgdmFsdWVQaWVjZSk7XG4gIHJldHVybiBiZXR3ZWVuKGRldGFpbFZhbHVlRnJvbSwgbWluRGF0ZSwgbWF4RGF0ZSk7XG59XG5cbnZhciBnZXREZXRhaWxWYWx1ZUZyb20gPSBmdW5jdGlvbiBnZXREZXRhaWxWYWx1ZUZyb20oYXJncykge1xuICByZXR1cm4gZ2V0RGV0YWlsVmFsdWUoYXJncywgMCk7XG59O1xuXG52YXIgZ2V0RGV0YWlsVmFsdWVUbyA9IGZ1bmN0aW9uIGdldERldGFpbFZhbHVlVG8oYXJncykge1xuICByZXR1cm4gZ2V0RGV0YWlsVmFsdWUoYXJncywgMSk7XG59O1xuXG52YXIgZ2V0RGV0YWlsVmFsdWVBcnJheSA9IGZ1bmN0aW9uIGdldERldGFpbFZhbHVlQXJyYXkoYXJncykge1xuICB2YXIgdmFsdWUgPSBhcmdzLnZhbHVlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBbZ2V0RGV0YWlsVmFsdWVGcm9tLCBnZXREZXRhaWxWYWx1ZVRvXS5tYXAoZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIGZuKGFyZ3MpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGdldEFjdGl2ZVN0YXJ0RGF0ZShwcm9wcykge1xuICB2YXIgbWF4RGF0ZSA9IHByb3BzLm1heERhdGUsXG4gICAgICBtYXhEZXRhaWwgPSBwcm9wcy5tYXhEZXRhaWwsXG4gICAgICBtaW5EYXRlID0gcHJvcHMubWluRGF0ZSxcbiAgICAgIG1pbkRldGFpbCA9IHByb3BzLm1pbkRldGFpbCxcbiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICB2aWV3ID0gcHJvcHMudmlldztcbiAgdmFyIHJhbmdlVHlwZSA9IGdldFZpZXcodmlldywgbWluRGV0YWlsLCBtYXhEZXRhaWwpO1xuICB2YXIgdmFsdWVGcm9tID0gZ2V0RGV0YWlsVmFsdWVGcm9tKHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgbWluRGF0ZTogbWluRGF0ZSxcbiAgICBtYXhEYXRlOiBtYXhEYXRlLFxuICAgIG1heERldGFpbDogbWF4RGV0YWlsXG4gIH0pIHx8IG5ldyBEYXRlKCk7XG4gIHJldHVybiBnZXRCZWdpbihyYW5nZVR5cGUsIHZhbHVlRnJvbSk7XG59XG5cbmZ1bmN0aW9uIGdldEluaXRpYWxBY3RpdmVTdGFydERhdGUocHJvcHMpIHtcbiAgdmFyIGFjdGl2ZVN0YXJ0RGF0ZSA9IHByb3BzLmFjdGl2ZVN0YXJ0RGF0ZSxcbiAgICAgIGRlZmF1bHRBY3RpdmVTdGFydERhdGUgPSBwcm9wcy5kZWZhdWx0QWN0aXZlU3RhcnREYXRlLFxuICAgICAgZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgZGVmYXVsdFZpZXcgPSBwcm9wcy5kZWZhdWx0VmlldyxcbiAgICAgIG1heERldGFpbCA9IHByb3BzLm1heERldGFpbCxcbiAgICAgIG1pbkRldGFpbCA9IHByb3BzLm1pbkRldGFpbCxcbiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICB2aWV3ID0gcHJvcHMudmlldyxcbiAgICAgIG90aGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgdmFyIHJhbmdlVHlwZSA9IGdldFZpZXcodmlldywgbWluRGV0YWlsLCBtYXhEZXRhaWwpO1xuICB2YXIgdmFsdWVGcm9tID0gYWN0aXZlU3RhcnREYXRlIHx8IGRlZmF1bHRBY3RpdmVTdGFydERhdGU7XG5cbiAgaWYgKHZhbHVlRnJvbSkge1xuICAgIHJldHVybiBnZXRCZWdpbihyYW5nZVR5cGUsIHZhbHVlRnJvbSk7XG4gIH1cblxuICByZXR1cm4gZ2V0QWN0aXZlU3RhcnREYXRlKF9vYmplY3RTcHJlYWQoe1xuICAgIG1heERldGFpbDogbWF4RGV0YWlsLFxuICAgIG1pbkRldGFpbDogbWluRGV0YWlsLFxuICAgIHZhbHVlOiB2YWx1ZSB8fCBkZWZhdWx0VmFsdWUsXG4gICAgdmlldzogdmlldyB8fCBkZWZhdWx0Vmlld1xuICB9LCBvdGhlclByb3BzKSk7XG59XG5cbnZhciBnZXRJc1NpbmdsZVZhbHVlID0gZnVuY3Rpb24gZ2V0SXNTaW5nbGVWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgJiYgW10uY29uY2F0KHZhbHVlKS5sZW5ndGggPT09IDE7XG59O1xuXG52YXIgQ2FsZW5kYXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKENhbGVuZGFyLCBfQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKENhbGVuZGFyKTtcblxuICBmdW5jdGlvbiBDYWxlbmRhcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2FsZW5kYXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF9hcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgX2FyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoX2FyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdGF0ZVwiLCB7XG4gICAgICBhY3RpdmVTdGFydERhdGU6IF90aGlzLnByb3BzLmRlZmF1bHRBY3RpdmVTdGFydERhdGUsXG4gICAgICB2YWx1ZTogX3RoaXMucHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgdmlldzogX3RoaXMucHJvcHMuZGVmYXVsdFZpZXdcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZXRTdGF0ZUFuZENhbGxDYWxsYmFja3NcIiwgZnVuY3Rpb24gKG5leHRTdGF0ZSwgZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksXG4gICAgICAgICAgcHJldmlvdXNBY3RpdmVTdGFydERhdGUgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemUuYWN0aXZlU3RhcnREYXRlLFxuICAgICAgICAgIHByZXZpb3VzVmlldyA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZS52aWV3O1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBhbGxvd1BhcnRpYWxSYW5nZSA9IF90aGlzJHByb3BzLmFsbG93UGFydGlhbFJhbmdlLFxuICAgICAgICAgIG9uQWN0aXZlU3RhcnREYXRlQ2hhbmdlID0gX3RoaXMkcHJvcHMub25BY3RpdmVTdGFydERhdGVDaGFuZ2UsXG4gICAgICAgICAgb25DaGFuZ2UgPSBfdGhpcyRwcm9wcy5vbkNoYW5nZSxcbiAgICAgICAgICBvblZpZXdDaGFuZ2UgPSBfdGhpcyRwcm9wcy5vblZpZXdDaGFuZ2UsXG4gICAgICAgICAgc2VsZWN0UmFuZ2UgPSBfdGhpcyRwcm9wcy5zZWxlY3RSYW5nZTtcbiAgICAgIHZhciBwcmV2QXJncyA9IHtcbiAgICAgICAgYWN0aXZlU3RhcnREYXRlOiBwcmV2aW91c0FjdGl2ZVN0YXJ0RGF0ZSxcbiAgICAgICAgdmlldzogcHJldmlvdXNWaWV3XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZShuZXh0U3RhdGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSB7XG4gICAgICAgICAgYWN0aW9uOiBuZXh0U3RhdGUuYWN0aW9uLFxuICAgICAgICAgIGFjdGl2ZVN0YXJ0RGF0ZTogbmV4dFN0YXRlLmFjdGl2ZVN0YXJ0RGF0ZSB8fCBfdGhpcy5hY3RpdmVTdGFydERhdGUsXG4gICAgICAgICAgdmFsdWU6IG5leHRTdGF0ZS52YWx1ZSB8fCBfdGhpcy52YWx1ZSxcbiAgICAgICAgICB2aWV3OiBuZXh0U3RhdGUudmlldyB8fCBfdGhpcy52aWV3XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gc2hvdWxkVXBkYXRlKGtleSkge1xuICAgICAgICAgIHJldHVybiAoLy8gS2V5IG11c3QgZXhpc3QsIGFuZOKAplxuICAgICAgICAgICAga2V5IGluIG5leHRTdGF0ZSAmJiAoIC8vIOKApmtleSBjaGFuZ2VkIGZyb20gdW5kZWZpbmVkIHRvIGRlZmluZWQgb3IgdGhlIG90aGVyIHdheSBhcm91bmQsIG9y4oCmXG4gICAgICAgICAgICBfdHlwZW9mKG5leHRTdGF0ZVtrZXldKSAhPT0gX3R5cGVvZihwcmV2QXJnc1trZXldKSB8fCAoIC8vIOKApnZhbHVlIGNoYW5nZWQuXG4gICAgICAgICAgICBuZXh0U3RhdGVba2V5XSBpbnN0YW5jZW9mIERhdGUgPyBuZXh0U3RhdGVba2V5XS5nZXRUaW1lKCkgIT09IHByZXZBcmdzW2tleV0uZ2V0VGltZSgpIDogbmV4dFN0YXRlW2tleV0gIT09IHByZXZBcmdzW2tleV0pKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hvdWxkVXBkYXRlKCdhY3RpdmVTdGFydERhdGUnKSkge1xuICAgICAgICAgIGlmIChvbkFjdGl2ZVN0YXJ0RGF0ZUNoYW5nZSkgb25BY3RpdmVTdGFydERhdGVDaGFuZ2UoYXJncyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hvdWxkVXBkYXRlKCd2aWV3JykpIHtcbiAgICAgICAgICBpZiAob25WaWV3Q2hhbmdlKSBvblZpZXdDaGFuZ2UoYXJncyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hvdWxkVXBkYXRlKCd2YWx1ZScpKSB7XG4gICAgICAgICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0UmFuZ2UpIHtcbiAgICAgICAgICAgICAgdmFyIGlzU2luZ2xlVmFsdWUgPSBnZXRJc1NpbmdsZVZhbHVlKG5leHRTdGF0ZS52YWx1ZSk7XG5cbiAgICAgICAgICAgICAgaWYgKCFpc1NpbmdsZVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgb25DaGFuZ2UobmV4dFN0YXRlLnZhbHVlLCBldmVudCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxsb3dQYXJ0aWFsUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBvbkNoYW5nZShbbmV4dFN0YXRlLnZhbHVlXSwgZXZlbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvbkNoYW5nZShuZXh0U3RhdGUudmFsdWUsIGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2V0QWN0aXZlU3RhcnREYXRlXCIsIGZ1bmN0aW9uIChuZXh0QWN0aXZlU3RhcnREYXRlLCBhY3Rpb24pIHtcbiAgICAgIF90aGlzLnNldFN0YXRlQW5kQ2FsbENhbGxiYWNrcyh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBhY3RpdmVTdGFydERhdGU6IG5leHRBY3RpdmVTdGFydERhdGVcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImRyaWxsRG93blwiLCBmdW5jdGlvbiAobmV4dEFjdGl2ZVN0YXJ0RGF0ZSwgZXZlbnQpIHtcbiAgICAgIGlmICghX3RoaXMuZHJpbGxEb3duQXZhaWxhYmxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMub25DbGlja1RpbGUobmV4dEFjdGl2ZVN0YXJ0RGF0ZSwgZXZlbnQpO1xuXG4gICAgICB2YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplMiA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLFxuICAgICAgICAgIHZpZXcgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemUyLnZpZXcsXG4gICAgICAgICAgdmlld3MgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemUyLnZpZXdzO1xuXG4gICAgICB2YXIgb25EcmlsbERvd24gPSBfdGhpcy5wcm9wcy5vbkRyaWxsRG93bjtcbiAgICAgIHZhciBuZXh0VmlldyA9IHZpZXdzW3ZpZXdzLmluZGV4T2YodmlldykgKyAxXTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGVBbmRDYWxsQ2FsbGJhY2tzKHtcbiAgICAgICAgYWN0aW9uOiAnZHJpbGxEb3duJyxcbiAgICAgICAgYWN0aXZlU3RhcnREYXRlOiBuZXh0QWN0aXZlU3RhcnREYXRlLFxuICAgICAgICB2aWV3OiBuZXh0Vmlld1xuICAgICAgfSwgdW5kZWZpbmVkLCBvbkRyaWxsRG93bik7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZHJpbGxVcFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLmRyaWxsVXBBdmFpbGFibGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplMyA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLFxuICAgICAgICAgIGFjdGl2ZVN0YXJ0RGF0ZSA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZTMuYWN0aXZlU3RhcnREYXRlLFxuICAgICAgICAgIHZpZXcgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemUzLnZpZXcsXG4gICAgICAgICAgdmlld3MgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemUzLnZpZXdzO1xuXG4gICAgICB2YXIgb25EcmlsbFVwID0gX3RoaXMucHJvcHMub25EcmlsbFVwO1xuICAgICAgdmFyIG5leHRWaWV3ID0gdmlld3Nbdmlld3MuaW5kZXhPZih2aWV3KSAtIDFdO1xuICAgICAgdmFyIG5leHRBY3RpdmVTdGFydERhdGUgPSBnZXRCZWdpbihuZXh0VmlldywgYWN0aXZlU3RhcnREYXRlKTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGVBbmRDYWxsQ2FsbGJhY2tzKHtcbiAgICAgICAgYWN0aW9uOiAnZHJpbGxVcCcsXG4gICAgICAgIGFjdGl2ZVN0YXJ0RGF0ZTogbmV4dEFjdGl2ZVN0YXJ0RGF0ZSxcbiAgICAgICAgdmlldzogbmV4dFZpZXdcbiAgICAgIH0sIHVuZGVmaW5lZCwgb25EcmlsbFVwKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbkNoYW5nZVwiLCBmdW5jdGlvbiAodmFsdWUsIGV2ZW50KSB7XG4gICAgICB2YXIgc2VsZWN0UmFuZ2UgPSBfdGhpcy5wcm9wcy5zZWxlY3RSYW5nZTtcblxuICAgICAgX3RoaXMub25DbGlja1RpbGUodmFsdWUsIGV2ZW50KTtcblxuICAgICAgdmFyIG5leHRWYWx1ZTtcblxuICAgICAgaWYgKHNlbGVjdFJhbmdlKSB7XG4gICAgICAgIC8vIFJhbmdlIHNlbGVjdGlvbiB0dXJuZWQgb25cbiAgICAgICAgdmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZTQgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSxcbiAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemU0LnZhbHVlLFxuICAgICAgICAgICAgdmFsdWVUeXBlID0gX2Fzc2VydFRoaXNJbml0aWFsaXplNC52YWx1ZVR5cGU7XG5cbiAgICAgICAgaWYgKCFnZXRJc1NpbmdsZVZhbHVlKHByZXZpb3VzVmFsdWUpKSB7XG4gICAgICAgICAgLy8gVmFsdWUgaGFzIDAgb3IgMiBlbGVtZW50cyAtIGVpdGhlciB3YXkgd2UncmUgc3RhcnRpbmcgYSBuZXcgYXJyYXlcbiAgICAgICAgICAvLyBGaXJzdCB2YWx1ZVxuICAgICAgICAgIG5leHRWYWx1ZSA9IGdldEJlZ2luKHZhbHVlVHlwZSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFNlY29uZCB2YWx1ZVxuICAgICAgICAgIG5leHRWYWx1ZSA9IGdldFZhbHVlUmFuZ2UodmFsdWVUeXBlLCBwcmV2aW91c1ZhbHVlLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJhbmdlIHNlbGVjdGlvbiB0dXJuZWQgb2ZmXG4gICAgICAgIG5leHRWYWx1ZSA9IF90aGlzLmdldFByb2Nlc3NlZFZhbHVlKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5leHRBY3RpdmVTdGFydERhdGUgPSBnZXRBY3RpdmVTdGFydERhdGUoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcyksIHt9LCB7XG4gICAgICAgIHZhbHVlOiBuZXh0VmFsdWVcbiAgICAgIH0pKTtcbiAgICAgIGV2ZW50LnBlcnNpc3QoKTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGVBbmRDYWxsQ2FsbGJhY2tzKHtcbiAgICAgICAgYWN0aW9uOiAnb25DaGFuZ2UnLFxuICAgICAgICBhY3RpdmVTdGFydERhdGU6IG5leHRBY3RpdmVTdGFydERhdGUsXG4gICAgICAgIHZhbHVlOiBuZXh0VmFsdWVcbiAgICAgIH0sIGV2ZW50KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbkNsaWNrVGlsZVwiLCBmdW5jdGlvbiAodmFsdWUsIGV2ZW50KSB7XG4gICAgICB2YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplNSA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLFxuICAgICAgICAgIHZpZXcgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemU1LnZpZXc7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvbkNsaWNrRGF5ID0gX3RoaXMkcHJvcHMyLm9uQ2xpY2tEYXksXG4gICAgICAgICAgb25DbGlja0RlY2FkZSA9IF90aGlzJHByb3BzMi5vbkNsaWNrRGVjYWRlLFxuICAgICAgICAgIG9uQ2xpY2tNb250aCA9IF90aGlzJHByb3BzMi5vbkNsaWNrTW9udGgsXG4gICAgICAgICAgb25DbGlja1llYXIgPSBfdGhpcyRwcm9wczIub25DbGlja1llYXI7XG5cbiAgICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3dpdGNoICh2aWV3KSB7XG4gICAgICAgICAgY2FzZSAnY2VudHVyeSc6XG4gICAgICAgICAgICByZXR1cm4gb25DbGlja0RlY2FkZTtcblxuICAgICAgICAgIGNhc2UgJ2RlY2FkZSc6XG4gICAgICAgICAgICByZXR1cm4gb25DbGlja1llYXI7XG5cbiAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgIHJldHVybiBvbkNsaWNrTW9udGg7XG5cbiAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICByZXR1cm4gb25DbGlja0RheTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZpZXc6IFwiLmNvbmNhdCh2aWV3LCBcIi5cIikpO1xuICAgICAgICB9XG4gICAgICB9KCk7XG5cbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2sodmFsdWUsIGV2ZW50KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbk1vdXNlT3ZlclwiLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgICAgaWYgKHByZXZTdGF0ZS5ob3ZlciAmJiBwcmV2U3RhdGUuaG92ZXIuZ2V0VGltZSgpID09PSB2YWx1ZS5nZXRUaW1lKCkpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaG92ZXI6IHZhbHVlXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbk1vdXNlTGVhdmVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBob3ZlcjogbnVsbFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2FsZW5kYXIsIFt7XG4gICAga2V5OiBcImFjdGl2ZVN0YXJ0RGF0ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIGFjdGl2ZVN0YXJ0RGF0ZVByb3BzID0gdGhpcy5wcm9wcy5hY3RpdmVTdGFydERhdGU7XG4gICAgICB2YXIgYWN0aXZlU3RhcnREYXRlU3RhdGUgPSB0aGlzLnN0YXRlLmFjdGl2ZVN0YXJ0RGF0ZTtcbiAgICAgIHJldHVybiBhY3RpdmVTdGFydERhdGVQcm9wcyB8fCBhY3RpdmVTdGFydERhdGVTdGF0ZSB8fCBnZXRJbml0aWFsQWN0aXZlU3RhcnREYXRlKHRoaXMucHJvcHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ2YWx1ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgc2VsZWN0UmFuZ2UgPSBfdGhpcyRwcm9wczMuc2VsZWN0UmFuZ2UsXG4gICAgICAgICAgdmFsdWVQcm9wcyA9IF90aGlzJHByb3BzMy52YWx1ZTtcbiAgICAgIHZhciB2YWx1ZVN0YXRlID0gdGhpcy5zdGF0ZS52YWx1ZTsgLy8gSW4gdGhlIG1pZGRsZSBvZiByYW5nZSBzZWxlY3Rpb24sIHVzZSB2YWx1ZSBmcm9tIHN0YXRlXG5cbiAgICAgIGlmIChzZWxlY3RSYW5nZSAmJiBnZXRJc1NpbmdsZVZhbHVlKHZhbHVlU3RhdGUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZVN0YXRlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWVQcm9wcyAhPT0gdW5kZWZpbmVkID8gdmFsdWVQcm9wcyA6IHZhbHVlU3RhdGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInZhbHVlVHlwZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIG1heERldGFpbCA9IHRoaXMucHJvcHMubWF4RGV0YWlsO1xuICAgICAgcmV0dXJuIGdldFZhbHVlVHlwZShtYXhEZXRhaWwpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ2aWV3XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBtaW5EZXRhaWwgPSBfdGhpcyRwcm9wczQubWluRGV0YWlsLFxuICAgICAgICAgIG1heERldGFpbCA9IF90aGlzJHByb3BzNC5tYXhEZXRhaWwsXG4gICAgICAgICAgdmlld1Byb3BzID0gX3RoaXMkcHJvcHM0LnZpZXc7XG4gICAgICB2YXIgdmlld1N0YXRlID0gdGhpcy5zdGF0ZS52aWV3O1xuICAgICAgcmV0dXJuIGdldFZpZXcodmlld1Byb3BzIHx8IHZpZXdTdGF0ZSwgbWluRGV0YWlsLCBtYXhEZXRhaWwpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ2aWV3c1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgbWluRGV0YWlsID0gX3RoaXMkcHJvcHM1Lm1pbkRldGFpbCxcbiAgICAgICAgICBtYXhEZXRhaWwgPSBfdGhpcyRwcm9wczUubWF4RGV0YWlsO1xuICAgICAgcmV0dXJuIGdldExpbWl0ZWRWaWV3cyhtaW5EZXRhaWwsIG1heERldGFpbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhvdmVyXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgc2VsZWN0UmFuZ2UgPSB0aGlzLnByb3BzLnNlbGVjdFJhbmdlO1xuICAgICAgdmFyIGhvdmVyID0gdGhpcy5zdGF0ZS5ob3ZlcjtcbiAgICAgIHJldHVybiBzZWxlY3RSYW5nZSA/IGhvdmVyIDogbnVsbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZHJpbGxEb3duQXZhaWxhYmxlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgdmlldyA9IHRoaXMudmlldyxcbiAgICAgICAgICB2aWV3cyA9IHRoaXMudmlld3M7XG4gICAgICByZXR1cm4gdmlld3MuaW5kZXhPZih2aWV3KSA8IHZpZXdzLmxlbmd0aCAtIDE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRyaWxsVXBBdmFpbGFibGVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciB2aWV3ID0gdGhpcy52aWV3LFxuICAgICAgICAgIHZpZXdzID0gdGhpcy52aWV3cztcbiAgICAgIHJldHVybiB2aWV3cy5pbmRleE9mKHZpZXcpID4gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBjdXJyZW50IHZhbHVlIGluIGEgZGVzaXJlZCBmb3JtYXQuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRQcm9jZXNzZWRWYWx1ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQcm9jZXNzZWRWYWx1ZSh2YWx1ZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgbWluRGF0ZSA9IF90aGlzJHByb3BzNi5taW5EYXRlLFxuICAgICAgICAgIG1heERhdGUgPSBfdGhpcyRwcm9wczYubWF4RGF0ZSxcbiAgICAgICAgICBtYXhEZXRhaWwgPSBfdGhpcyRwcm9wczYubWF4RGV0YWlsLFxuICAgICAgICAgIHJldHVyblZhbHVlID0gX3RoaXMkcHJvcHM2LnJldHVyblZhbHVlO1xuXG4gICAgICB2YXIgcHJvY2Vzc0Z1bmN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzd2l0Y2ggKHJldHVyblZhbHVlKSB7XG4gICAgICAgICAgY2FzZSAnc3RhcnQnOlxuICAgICAgICAgICAgcmV0dXJuIGdldERldGFpbFZhbHVlRnJvbTtcblxuICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICByZXR1cm4gZ2V0RGV0YWlsVmFsdWVUbztcblxuICAgICAgICAgIGNhc2UgJ3JhbmdlJzpcbiAgICAgICAgICAgIHJldHVybiBnZXREZXRhaWxWYWx1ZUFycmF5O1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCByZXR1cm5WYWx1ZS4nKTtcbiAgICAgICAgfVxuICAgICAgfSgpO1xuXG4gICAgICByZXR1cm4gcHJvY2Vzc0Z1bmN0aW9uKHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBtaW5EYXRlOiBtaW5EYXRlLFxuICAgICAgICBtYXhEYXRlOiBtYXhEYXRlLFxuICAgICAgICBtYXhEZXRhaWw6IG1heERldGFpbFxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlckNvbnRlbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQ29udGVudChuZXh0KSB7XG4gICAgICB2YXIgY3VycmVudEFjdGl2ZVN0YXJ0RGF0ZSA9IHRoaXMuYWN0aXZlU3RhcnREYXRlLFxuICAgICAgICAgIG9uTW91c2VPdmVyID0gdGhpcy5vbk1vdXNlT3ZlcixcbiAgICAgICAgICB2YWx1ZVR5cGUgPSB0aGlzLnZhbHVlVHlwZSxcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMudmFsdWUsXG4gICAgICAgICAgdmlldyA9IHRoaXMudmlldztcbiAgICAgIHZhciBfdGhpcyRwcm9wczcgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNhbGVuZGFyVHlwZSA9IF90aGlzJHByb3BzNy5jYWxlbmRhclR5cGUsXG4gICAgICAgICAgbG9jYWxlID0gX3RoaXMkcHJvcHM3LmxvY2FsZSxcbiAgICAgICAgICBtYXhEYXRlID0gX3RoaXMkcHJvcHM3Lm1heERhdGUsXG4gICAgICAgICAgbWluRGF0ZSA9IF90aGlzJHByb3BzNy5taW5EYXRlLFxuICAgICAgICAgIHNlbGVjdFJhbmdlID0gX3RoaXMkcHJvcHM3LnNlbGVjdFJhbmdlLFxuICAgICAgICAgIHRpbGVDbGFzc05hbWUgPSBfdGhpcyRwcm9wczcudGlsZUNsYXNzTmFtZSxcbiAgICAgICAgICB0aWxlQ29udGVudCA9IF90aGlzJHByb3BzNy50aWxlQ29udGVudCxcbiAgICAgICAgICB0aWxlRGlzYWJsZWQgPSBfdGhpcyRwcm9wczcudGlsZURpc2FibGVkO1xuICAgICAgdmFyIGhvdmVyID0gdGhpcy5ob3ZlcjtcbiAgICAgIHZhciBhY3RpdmVTdGFydERhdGUgPSBuZXh0ID8gZ2V0QmVnaW5OZXh0KHZpZXcsIGN1cnJlbnRBY3RpdmVTdGFydERhdGUpIDogZ2V0QmVnaW4odmlldywgY3VycmVudEFjdGl2ZVN0YXJ0RGF0ZSk7XG4gICAgICB2YXIgb25DbGljayA9IHRoaXMuZHJpbGxEb3duQXZhaWxhYmxlID8gdGhpcy5kcmlsbERvd24gOiB0aGlzLm9uQ2hhbmdlO1xuICAgICAgdmFyIGNvbW1vblByb3BzID0ge1xuICAgICAgICBhY3RpdmVTdGFydERhdGU6IGFjdGl2ZVN0YXJ0RGF0ZSxcbiAgICAgICAgaG92ZXI6IGhvdmVyLFxuICAgICAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICAgICAgbWF4RGF0ZTogbWF4RGF0ZSxcbiAgICAgICAgbWluRGF0ZTogbWluRGF0ZSxcbiAgICAgICAgb25DbGljazogb25DbGljayxcbiAgICAgICAgb25Nb3VzZU92ZXI6IHNlbGVjdFJhbmdlID8gb25Nb3VzZU92ZXIgOiBudWxsLFxuICAgICAgICB0aWxlQ2xhc3NOYW1lOiB0aWxlQ2xhc3NOYW1lLFxuICAgICAgICB0aWxlQ29udGVudDogdGlsZUNvbnRlbnQsXG4gICAgICAgIHRpbGVEaXNhYmxlZDogdGlsZURpc2FibGVkLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIHZhbHVlVHlwZTogdmFsdWVUeXBlXG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHZpZXcpIHtcbiAgICAgICAgY2FzZSAnY2VudHVyeSc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIGZvcm1hdFllYXIgPSB0aGlzLnByb3BzLmZvcm1hdFllYXI7XG4gICAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ2VudHVyeVZpZXcsIF9leHRlbmRzKHtcbiAgICAgICAgICAgICAgZm9ybWF0WWVhcjogZm9ybWF0WWVhclxuICAgICAgICAgICAgfSwgY29tbW9uUHJvcHMpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAnZGVjYWRlJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgX2Zvcm1hdFllYXIgPSB0aGlzLnByb3BzLmZvcm1hdFllYXI7XG4gICAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGVjYWRlVmlldywgX2V4dGVuZHMoe1xuICAgICAgICAgICAgICBmb3JtYXRZZWFyOiBfZm9ybWF0WWVhclxuICAgICAgICAgICAgfSwgY29tbW9uUHJvcHMpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIF90aGlzJHByb3BzOCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICAgICAgZm9ybWF0TW9udGggPSBfdGhpcyRwcm9wczguZm9ybWF0TW9udGgsXG4gICAgICAgICAgICAgICAgZm9ybWF0TW9udGhZZWFyID0gX3RoaXMkcHJvcHM4LmZvcm1hdE1vbnRoWWVhcjtcbiAgICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChZZWFyVmlldywgX2V4dGVuZHMoe1xuICAgICAgICAgICAgICBmb3JtYXRNb250aDogZm9ybWF0TW9udGgsXG4gICAgICAgICAgICAgIGZvcm1hdE1vbnRoWWVhcjogZm9ybWF0TW9udGhZZWFyXG4gICAgICAgICAgICB9LCBjb21tb25Qcm9wcykpO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIF90aGlzJHByb3BzOSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICAgICAgZm9ybWF0RGF5ID0gX3RoaXMkcHJvcHM5LmZvcm1hdERheSxcbiAgICAgICAgICAgICAgICBmb3JtYXRMb25nRGF0ZSA9IF90aGlzJHByb3BzOS5mb3JtYXRMb25nRGF0ZSxcbiAgICAgICAgICAgICAgICBmb3JtYXRTaG9ydFdlZWtkYXkgPSBfdGhpcyRwcm9wczkuZm9ybWF0U2hvcnRXZWVrZGF5LFxuICAgICAgICAgICAgICAgIG9uQ2xpY2tXZWVrTnVtYmVyID0gX3RoaXMkcHJvcHM5Lm9uQ2xpY2tXZWVrTnVtYmVyLFxuICAgICAgICAgICAgICAgIHNob3dEb3VibGVWaWV3ID0gX3RoaXMkcHJvcHM5LnNob3dEb3VibGVWaWV3LFxuICAgICAgICAgICAgICAgIHNob3dGaXhlZE51bWJlck9mV2Vla3MgPSBfdGhpcyRwcm9wczkuc2hvd0ZpeGVkTnVtYmVyT2ZXZWVrcyxcbiAgICAgICAgICAgICAgICBzaG93TmVpZ2hib3JpbmdNb250aCA9IF90aGlzJHByb3BzOS5zaG93TmVpZ2hib3JpbmdNb250aCxcbiAgICAgICAgICAgICAgICBzaG93V2Vla051bWJlcnMgPSBfdGhpcyRwcm9wczkuc2hvd1dlZWtOdW1iZXJzO1xuICAgICAgICAgICAgdmFyIG9uTW91c2VMZWF2ZSA9IHRoaXMub25Nb3VzZUxlYXZlO1xuICAgICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE1vbnRoVmlldywgX2V4dGVuZHMoe1xuICAgICAgICAgICAgICBjYWxlbmRhclR5cGU6IGNhbGVuZGFyVHlwZSxcbiAgICAgICAgICAgICAgZm9ybWF0RGF5OiBmb3JtYXREYXksXG4gICAgICAgICAgICAgIGZvcm1hdExvbmdEYXRlOiBmb3JtYXRMb25nRGF0ZSxcbiAgICAgICAgICAgICAgZm9ybWF0U2hvcnRXZWVrZGF5OiBmb3JtYXRTaG9ydFdlZWtkYXksXG4gICAgICAgICAgICAgIG9uQ2xpY2tXZWVrTnVtYmVyOiBvbkNsaWNrV2Vla051bWJlcixcbiAgICAgICAgICAgICAgb25Nb3VzZUxlYXZlOiBzZWxlY3RSYW5nZSA/IG9uTW91c2VMZWF2ZSA6IG51bGwsXG4gICAgICAgICAgICAgIHNob3dGaXhlZE51bWJlck9mV2Vla3M6IHR5cGVvZiBzaG93Rml4ZWROdW1iZXJPZldlZWtzICE9PSAndW5kZWZpbmVkJyA/IHNob3dGaXhlZE51bWJlck9mV2Vla3MgOiBzaG93RG91YmxlVmlldyxcbiAgICAgICAgICAgICAgc2hvd05laWdoYm9yaW5nTW9udGg6IHNob3dOZWlnaGJvcmluZ01vbnRoLFxuICAgICAgICAgICAgICBzaG93V2Vla051bWJlcnM6IHNob3dXZWVrTnVtYmVyc1xuICAgICAgICAgICAgfSwgY29tbW9uUHJvcHMpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZpZXc6IFwiLmNvbmNhdCh2aWV3LCBcIi5cIikpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJOYXZpZ2F0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlck5hdmlnYXRpb24oKSB7XG4gICAgICB2YXIgc2hvd05hdmlnYXRpb24gPSB0aGlzLnByb3BzLnNob3dOYXZpZ2F0aW9uO1xuXG4gICAgICBpZiAoIXNob3dOYXZpZ2F0aW9uKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWN0aXZlU3RhcnREYXRlID0gdGhpcy5hY3RpdmVTdGFydERhdGUsXG4gICAgICAgICAgdmlldyA9IHRoaXMudmlldyxcbiAgICAgICAgICB2aWV3cyA9IHRoaXMudmlld3M7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxMCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZm9ybWF0TW9udGhZZWFyID0gX3RoaXMkcHJvcHMxMC5mb3JtYXRNb250aFllYXIsXG4gICAgICAgICAgZm9ybWF0WWVhciA9IF90aGlzJHByb3BzMTAuZm9ybWF0WWVhcixcbiAgICAgICAgICBsb2NhbGUgPSBfdGhpcyRwcm9wczEwLmxvY2FsZSxcbiAgICAgICAgICBtYXhEYXRlID0gX3RoaXMkcHJvcHMxMC5tYXhEYXRlLFxuICAgICAgICAgIG1pbkRhdGUgPSBfdGhpcyRwcm9wczEwLm1pbkRhdGUsXG4gICAgICAgICAgbmF2aWdhdGlvbkFyaWFMYWJlbCA9IF90aGlzJHByb3BzMTAubmF2aWdhdGlvbkFyaWFMYWJlbCxcbiAgICAgICAgICBuYXZpZ2F0aW9uQXJpYUxpdmUgPSBfdGhpcyRwcm9wczEwLm5hdmlnYXRpb25BcmlhTGl2ZSxcbiAgICAgICAgICBuYXZpZ2F0aW9uTGFiZWwgPSBfdGhpcyRwcm9wczEwLm5hdmlnYXRpb25MYWJlbCxcbiAgICAgICAgICBuZXh0MkFyaWFMYWJlbCA9IF90aGlzJHByb3BzMTAubmV4dDJBcmlhTGFiZWwsXG4gICAgICAgICAgbmV4dDJMYWJlbCA9IF90aGlzJHByb3BzMTAubmV4dDJMYWJlbCxcbiAgICAgICAgICBuZXh0QXJpYUxhYmVsID0gX3RoaXMkcHJvcHMxMC5uZXh0QXJpYUxhYmVsLFxuICAgICAgICAgIG5leHRMYWJlbCA9IF90aGlzJHByb3BzMTAubmV4dExhYmVsLFxuICAgICAgICAgIHByZXYyQXJpYUxhYmVsID0gX3RoaXMkcHJvcHMxMC5wcmV2MkFyaWFMYWJlbCxcbiAgICAgICAgICBwcmV2MkxhYmVsID0gX3RoaXMkcHJvcHMxMC5wcmV2MkxhYmVsLFxuICAgICAgICAgIHByZXZBcmlhTGFiZWwgPSBfdGhpcyRwcm9wczEwLnByZXZBcmlhTGFiZWwsXG4gICAgICAgICAgcHJldkxhYmVsID0gX3RoaXMkcHJvcHMxMC5wcmV2TGFiZWwsXG4gICAgICAgICAgc2hvd0RvdWJsZVZpZXcgPSBfdGhpcyRwcm9wczEwLnNob3dEb3VibGVWaWV3O1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE5hdmlnYXRpb24sIHtcbiAgICAgICAgYWN0aXZlU3RhcnREYXRlOiBhY3RpdmVTdGFydERhdGUsXG4gICAgICAgIGRyaWxsVXA6IHRoaXMuZHJpbGxVcCxcbiAgICAgICAgZm9ybWF0TW9udGhZZWFyOiBmb3JtYXRNb250aFllYXIsXG4gICAgICAgIGZvcm1hdFllYXI6IGZvcm1hdFllYXIsXG4gICAgICAgIGxvY2FsZTogbG9jYWxlLFxuICAgICAgICBtYXhEYXRlOiBtYXhEYXRlLFxuICAgICAgICBtaW5EYXRlOiBtaW5EYXRlLFxuICAgICAgICBuYXZpZ2F0aW9uQXJpYUxhYmVsOiBuYXZpZ2F0aW9uQXJpYUxhYmVsLFxuICAgICAgICBuYXZpZ2F0aW9uQXJpYUxpdmU6IG5hdmlnYXRpb25BcmlhTGl2ZSxcbiAgICAgICAgbmF2aWdhdGlvbkxhYmVsOiBuYXZpZ2F0aW9uTGFiZWwsXG4gICAgICAgIG5leHQyQXJpYUxhYmVsOiBuZXh0MkFyaWFMYWJlbCxcbiAgICAgICAgbmV4dDJMYWJlbDogbmV4dDJMYWJlbCxcbiAgICAgICAgbmV4dEFyaWFMYWJlbDogbmV4dEFyaWFMYWJlbCxcbiAgICAgICAgbmV4dExhYmVsOiBuZXh0TGFiZWwsXG4gICAgICAgIHByZXYyQXJpYUxhYmVsOiBwcmV2MkFyaWFMYWJlbCxcbiAgICAgICAgcHJldjJMYWJlbDogcHJldjJMYWJlbCxcbiAgICAgICAgcHJldkFyaWFMYWJlbDogcHJldkFyaWFMYWJlbCxcbiAgICAgICAgcHJldkxhYmVsOiBwcmV2TGFiZWwsXG4gICAgICAgIHNldEFjdGl2ZVN0YXJ0RGF0ZTogdGhpcy5zZXRBY3RpdmVTdGFydERhdGUsXG4gICAgICAgIHNob3dEb3VibGVWaWV3OiBzaG93RG91YmxlVmlldyxcbiAgICAgICAgdmlldzogdmlldyxcbiAgICAgICAgdmlld3M6IHZpZXdzXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczExID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczExLmNsYXNzTmFtZSxcbiAgICAgICAgICBpbnB1dFJlZiA9IF90aGlzJHByb3BzMTEuaW5wdXRSZWYsXG4gICAgICAgICAgc2VsZWN0UmFuZ2UgPSBfdGhpcyRwcm9wczExLnNlbGVjdFJhbmdlLFxuICAgICAgICAgIHNob3dEb3VibGVWaWV3ID0gX3RoaXMkcHJvcHMxMS5zaG93RG91YmxlVmlldztcbiAgICAgIHZhciBvbk1vdXNlTGVhdmUgPSB0aGlzLm9uTW91c2VMZWF2ZSxcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB2YXIgdmFsdWVBcnJheSA9IFtdLmNvbmNhdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IG1lcmdlQ2xhc3NOYW1lcyhiYXNlQ2xhc3NOYW1lLCBzZWxlY3RSYW5nZSAmJiB2YWx1ZUFycmF5Lmxlbmd0aCA9PT0gMSAmJiBcIlwiLmNvbmNhdChiYXNlQ2xhc3NOYW1lLCBcIi0tc2VsZWN0UmFuZ2VcIiksIHNob3dEb3VibGVWaWV3ICYmIFwiXCIuY29uY2F0KGJhc2VDbGFzc05hbWUsIFwiLS1kb3VibGVWaWV3XCIpLCBjbGFzc05hbWUpLFxuICAgICAgICByZWY6IGlucHV0UmVmXG4gICAgICB9LCB0aGlzLnJlbmRlck5hdmlnYXRpb24oKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGJhc2VDbGFzc05hbWUsIFwiX192aWV3Q29udGFpbmVyXCIpLFxuICAgICAgICBvbkJsdXI6IHNlbGVjdFJhbmdlID8gb25Nb3VzZUxlYXZlIDogbnVsbCxcbiAgICAgICAgb25Nb3VzZUxlYXZlOiBzZWxlY3RSYW5nZSA/IG9uTW91c2VMZWF2ZSA6IG51bGxcbiAgICAgIH0sIHRoaXMucmVuZGVyQ29udGVudCgpLCBzaG93RG91YmxlVmlldyAmJiB0aGlzLnJlbmRlckNvbnRlbnQodHJ1ZSkpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ2FsZW5kYXI7XG59KENvbXBvbmVudCk7XG5cbmV4cG9ydCB7IENhbGVuZGFyIGFzIGRlZmF1bHQgfTtcbkNhbGVuZGFyLmRlZmF1bHRQcm9wcyA9IHtcbiAgbWF4RGF0ZTogZGVmYXVsdE1heERhdGUsXG4gIG1heERldGFpbDogJ21vbnRoJyxcbiAgbWluRGF0ZTogZGVmYXVsdE1pbkRhdGUsXG4gIG1pbkRldGFpbDogJ2NlbnR1cnknLFxuICByZXR1cm5WYWx1ZTogJ3N0YXJ0JyxcbiAgc2hvd05hdmlnYXRpb246IHRydWUsXG4gIHNob3dOZWlnaGJvcmluZ01vbnRoOiB0cnVlXG59O1xudmFyIGlzQWN0aXZlU3RhcnREYXRlID0gUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSk7XG52YXIgaXNMb29zZVZhbHVlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgaXNWYWx1ZV0pO1xuQ2FsZW5kYXIucHJvcFR5cGVzID0ge1xuICBhY3RpdmVTdGFydERhdGU6IGlzQWN0aXZlU3RhcnREYXRlLFxuICBhbGxvd1BhcnRpYWxSYW5nZTogUHJvcFR5cGVzLmJvb2wsXG4gIGNhbGVuZGFyVHlwZTogaXNDYWxlbmRhclR5cGUsXG4gIGNsYXNzTmFtZTogaXNDbGFzc05hbWUsXG4gIGRlZmF1bHRBY3RpdmVTdGFydERhdGU6IGlzQWN0aXZlU3RhcnREYXRlLFxuICBkZWZhdWx0VmFsdWU6IGlzTG9vc2VWYWx1ZSxcbiAgZGVmYXVsdFZpZXc6IGlzVmlldyxcbiAgZm9ybWF0RGF5OiBQcm9wVHlwZXMuZnVuYyxcbiAgZm9ybWF0TG9uZ0RhdGU6IFByb3BUeXBlcy5mdW5jLFxuICBmb3JtYXRNb250aDogUHJvcFR5cGVzLmZ1bmMsXG4gIGZvcm1hdE1vbnRoWWVhcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGZvcm1hdFNob3J0V2Vla2RheTogUHJvcFR5cGVzLmZ1bmMsXG4gIGZvcm1hdFllYXI6IFByb3BUeXBlcy5mdW5jLFxuICBpbnB1dFJlZjogaXNSZWYsXG4gIGxvY2FsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgbWF4RGF0ZTogaXNNYXhEYXRlLFxuICBtYXhEZXRhaWw6IFByb3BUeXBlcy5vbmVPZihhbGxWaWV3cyksXG4gIG1pbkRhdGU6IGlzTWluRGF0ZSxcbiAgbWluRGV0YWlsOiBQcm9wVHlwZXMub25lT2YoYWxsVmlld3MpLFxuICBuYXZpZ2F0aW9uQXJpYUxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBuYXZpZ2F0aW9uQXJpYUxpdmU6IFByb3BUeXBlcy5vbmVPZihbJ29mZicsICdwb2xpdGUnLCAnYXNzZXJ0aXZlJ10pLFxuICBuYXZpZ2F0aW9uTGFiZWw6IFByb3BUeXBlcy5mdW5jLFxuICBuZXh0MkFyaWFMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgbmV4dDJMYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gIG5leHRBcmlhTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG5leHRMYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gIG9uQWN0aXZlU3RhcnREYXRlQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICBvbkNsaWNrRGF5OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25DbGlja0RlY2FkZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQ2xpY2tNb250aDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQ2xpY2tXZWVrTnVtYmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25DbGlja1llYXI6IFByb3BUeXBlcy5mdW5jLFxuICBvbkRyaWxsRG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRHJpbGxVcDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uVmlld0NoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIHByZXYyQXJpYUxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBwcmV2MkxhYmVsOiBQcm9wVHlwZXMubm9kZSxcbiAgcHJldkFyaWFMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgcHJldkxhYmVsOiBQcm9wVHlwZXMubm9kZSxcbiAgcmV0dXJuVmFsdWU6IFByb3BUeXBlcy5vbmVPZihbJ3N0YXJ0JywgJ2VuZCcsICdyYW5nZSddKSxcbiAgc2VsZWN0UmFuZ2U6IFByb3BUeXBlcy5ib29sLFxuICBzaG93RG91YmxlVmlldzogUHJvcFR5cGVzLmJvb2wsXG4gIHNob3dGaXhlZE51bWJlck9mV2Vla3M6IFByb3BUeXBlcy5ib29sLFxuICBzaG93TmF2aWdhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gIHNob3dOZWlnaGJvcmluZ01vbnRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2hvd1dlZWtOdW1iZXJzOiBQcm9wVHlwZXMuYm9vbCxcbiAgdGlsZUNsYXNzTmFtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIGlzQ2xhc3NOYW1lXSksXG4gIHRpbGVDb250ZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgdGlsZURpc2FibGVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgdmFsdWU6IGlzTG9vc2VWYWx1ZSxcbiAgdmlldzogaXNWaWV3XG59OyIsImltcG9ydCBDYWxlbmRhciBmcm9tICcuL0NhbGVuZGFyJztcbmltcG9ydCBDZW50dXJ5VmlldyBmcm9tICcuL0NlbnR1cnlWaWV3JztcbmltcG9ydCBEZWNhZGVWaWV3IGZyb20gJy4vRGVjYWRlVmlldyc7XG5pbXBvcnQgWWVhclZpZXcgZnJvbSAnLi9ZZWFyVmlldyc7XG5pbXBvcnQgTW9udGhWaWV3IGZyb20gJy4vTW9udGhWaWV3JztcbmV4cG9ydCBkZWZhdWx0IENhbGVuZGFyO1xuZXhwb3J0IHsgQ2FsZW5kYXIsIENlbnR1cnlWaWV3LCBEZWNhZGVWaWV3LCBZZWFyVmlldywgTW9udGhWaWV3IH07IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ2FsZW5kYXIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0NhbGVuZGFyLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsIl9DQUxFTkRBUl9UWVBFX0xPQ0FMRSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwibGVuZ3RoIiwiaSIsImFycjIiLCJBcnJheSIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJDQUxFTkRBUl9UWVBFUyIsIkFSQUJJQyIsIkhFQlJFVyIsIklTT184NjAxIiwiVVMiLCJDQUxFTkRBUl9UWVBFX0xPQ0FMRVMiLCJXRUVLREFZUyIsImlzQXJyYXkiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJpdGVyIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJmcm9tIiwiX2l0ZXJhYmxlVG9BcnJheSIsIm8iLCJtaW5MZW4iLCJuIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwibWFwIiwiZWwiLCJpbmRleCIsImZvcm1hdHRlckNhY2hlIiwiTWFwIiwiZ2V0U2FmZUZvcm1hdHRlciIsIm9wdGlvbnMiLCJsb2NhbGUiLCJkYXRlIiwibG9jYWxlV2l0aERlZmF1bHQiLCJoYXMiLCJzZXQiLCJmb3JtYXR0ZXJDYWNoZUxvY2FsZSIsImdldCIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsImZvcm1hdCIsImdldEZvcm1hdHRlciIsInNhZmVEYXRlIiwiRGF0ZSIsInNldEhvdXJzIiwidG9TYWZlSG91ciIsImRheSIsIm1vbnRoIiwieWVhciIsIndlZWtkYXkiLCJmb3JtYXRXZWVrZGF5IiwiU1VOREFZIiwiRlJJREFZIiwiU0FUVVJEQVkiLCJnZXREYXlPZldlZWsiLCJjYWxlbmRhclR5cGUiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJnZXREYXkiLCJFcnJvciIsImdldEJlZ2luT2ZXZWVrIiwiZ2V0WWVhciIsIm1vbnRoSW5kZXgiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRCZWdpbiIsInJhbmdlVHlwZSIsImdldENlbnR1cnlTdGFydCIsImdldERlY2FkZVN0YXJ0IiwiZ2V0WWVhclN0YXJ0IiwiZ2V0TW9udGhTdGFydCIsImdldERheVN0YXJ0IiwiY29uY2F0IiwiZ2V0QmVnaW5OZXh0IiwiZ2V0TmV4dENlbnR1cnlTdGFydCIsImdldE5leHREZWNhZGVTdGFydCIsImdldE5leHRZZWFyU3RhcnQiLCJnZXROZXh0TW9udGhTdGFydCIsImdldEVuZCIsImdldENlbnR1cnlFbmQiLCJnZXREZWNhZGVFbmQiLCJnZXRZZWFyRW5kIiwiZ2V0TW9udGhFbmQiLCJnZXREYXlFbmQiLCJnZXRSYW5nZSIsImdldENlbnR1cnlSYW5nZSIsImdldERlY2FkZVJhbmdlIiwiZ2V0WWVhclJhbmdlIiwiZ2V0TW9udGhSYW5nZSIsImdldERheVJhbmdlIiwiZ2V0VmFsdWVSYW5nZSIsImRhdGUxIiwiZGF0ZTIiLCJyYXdOZXh0VmFsdWUiLCJzb3J0IiwiYSIsImIiLCJ0b1llYXJMYWJlbCIsImZvcm1hdFllYXIiLCJkYXRlcyIsImpvaW4iLCJnZXREZWNhZGVMYWJlbCIsImlzV2Vla2VuZCIsIl90eXBlb2YiLCJjYWxlbmRhclR5cGVzIiwidmFsdWVzIiwiYWxsVmlld3MiLCJpc0NhbGVuZGFyVHlwZSIsImlzQ2xhc3NOYW1lIiwiaXNNaW5EYXRlIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJtaW5EYXRlIiwibWF4RGF0ZSIsImlzTWF4RGF0ZSIsImlzUmVmIiwiY3VycmVudCIsImlzVmFsdWUiLCJpc1ZpZXdzIiwiaXNWaWV3IiwidmlldyIsImFsbG93ZWRWaWV3cyIsInZpZXdzIiwiaW5kZXhPZiIsImlzUmVxdWlyZWQiLCJ0aWxlR3JvdXBQcm9wcyIsImFjdGl2ZVN0YXJ0RGF0ZSIsImhvdmVyIiwib25DbGljayIsIm9uTW91c2VPdmVyIiwidGlsZUNsYXNzTmFtZSIsInRpbGVDb250ZW50IiwidmFsdWVUeXBlIiwidGlsZVByb3BzIiwiY2xhc3NlcyIsInN0eWxlIiwidGlsZURpc2FibGVkIiwiY2xhc3NOYW1lIiwiTmF2aWdhdGlvbiIsIl9yZWYiLCJsYWJlbENsYXNzTmFtZSIsImRyaWxsVXAiLCJfcmVmJGZvcm1hdE1vbnRoWWVhciIsImZvcm1hdE1vbnRoWWVhciIsIl9yZWYkZm9ybWF0WWVhciIsIl9yZWYkbmF2aWdhdGlvbkFyaWFMYSIsIm5hdmlnYXRpb25BcmlhTGFiZWwiLCJuYXZpZ2F0aW9uQXJpYUxpdmUiLCJuYXZpZ2F0aW9uTGFiZWwiLCJfcmVmJG5leHQyQXJpYUxhYmVsIiwibmV4dDJBcmlhTGFiZWwiLCJfcmVmJG5leHQyTGFiZWwiLCJuZXh0MkxhYmVsIiwiX3JlZiRuZXh0QXJpYUxhYmVsIiwibmV4dEFyaWFMYWJlbCIsIl9yZWYkbmV4dExhYmVsIiwibmV4dExhYmVsIiwiX3JlZiRwcmV2MkFyaWFMYWJlbCIsInByZXYyQXJpYUxhYmVsIiwiX3JlZiRwcmV2MkxhYmVsIiwicHJldjJMYWJlbCIsIl9yZWYkcHJldkFyaWFMYWJlbCIsInByZXZBcmlhTGFiZWwiLCJfcmVmJHByZXZMYWJlbCIsInByZXZMYWJlbCIsInNldEFjdGl2ZVN0YXJ0RGF0ZSIsInNob3dEb3VibGVWaWV3IiwiZHJpbGxVcEF2YWlsYWJsZSIsInNob3VsZFNob3dQcmV2TmV4dDJCdXR0b25zIiwicHJldmlvdXNBY3RpdmVTdGFydERhdGUiLCJnZXRQcmV2aW91c0NlbnR1cnlTdGFydCIsImdldFByZXZpb3VzRGVjYWRlU3RhcnQiLCJnZXRQcmV2aW91c1llYXJTdGFydCIsImdldFByZXZpb3VzTW9udGhTdGFydCIsImdldEJlZ2luUHJldmlvdXMiLCJwcmV2aW91c0FjdGl2ZVN0YXJ0RGF0ZTIiLCJnZXRCZWdpblByZXZpb3VzMiIsIm5leHRBY3RpdmVTdGFydERhdGUiLCJuZXh0QWN0aXZlU3RhcnREYXRlMiIsImdldEJlZ2luTmV4dDIiLCJwcmV2QnV0dG9uRGlzYWJsZWQiLCJnZXRGdWxsWWVhciIsInByZXZpb3VzQWN0aXZlRW5kRGF0ZSIsImdldFByZXZpb3VzQ2VudHVyeUVuZCIsImdldFByZXZpb3VzRGVjYWRlRW5kIiwiZ2V0UHJldmlvdXNZZWFyRW5kIiwiZ2V0UHJldmlvdXNNb250aEVuZCIsImdldEVuZFByZXZpb3VzIiwicHJldjJCdXR0b25EaXNhYmxlZCIsImdldEVuZFByZXZpb3VzMiIsIm5leHRCdXR0b25EaXNhYmxlZCIsIm5leHQyQnV0dG9uRGlzYWJsZWQiLCJyZW5kZXJMYWJlbCIsImxhYmVsIiwiZ2V0Q2VudHVyeUxhYmVsIiwiZ2V0VXNlckxvY2FsZSIsImRpc2FibGVkIiwidHlwZSIsImZsZXhHcm93IiwicHJvcFR5cGVzIiwiX2V4Y2x1ZGVkIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJzb3VyY2UiLCJoYXNPd25Qcm9wZXJ0eSIsImFwcGx5IiwidGhpcyIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX29iamVjdFNwcmVhZCIsImZvckVhY2giLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwic291cmNlU3ltYm9sS2V5cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9QZXJjZW50IiwibnVtIiwiRmxleCIsImNoaWxkcmVuIiwiZGlyZWN0aW9uIiwiY291bnQiLCJvZmZzZXQiLCJ3cmFwIiwib3RoZXJQcm9wcyIsImRpc3BsYXkiLCJmbGV4RGlyZWN0aW9uIiwiZmxleFdyYXAiLCJjaGlsZCIsImZsZXhCYXNpcyIsImZsZXhTaHJpbmsiLCJvdmVyZmxvdyIsIm1hcmdpbkxlZnQiLCJpc1ZhbHVlV2l0aGluUmFuZ2UiLCJyYW5nZSIsImlzUmFuZ2VXaXRoaW5SYW5nZSIsImdyZWF0ZXJSYW5nZSIsInNtYWxsZXJSYW5nZSIsImRvUmFuZ2VzT3ZlcmxhcCIsInJhbmdlMSIsInJhbmdlMiIsImdldFJhbmdlQ2xhc3NOYW1lcyIsInZhbHVlUmFuZ2UiLCJkYXRlUmFuZ2UiLCJiYXNlQ2xhc3NOYW1lIiwiaXNSYW5nZVN0YXJ0IiwiaXNSYW5nZUVuZCIsImdldFRpbGVDbGFzc2VzIiwiZGF0ZVR5cGUiLCJub3ciLCJ2YWx1ZVJhbmdlQ2xhc3NOYW1lcyIsInZhbHVlQXJyYXkiLCJob3ZlclJhbmdlIiwiaG92ZXJSYW5nZUNsYXNzTmFtZXMiLCJUaWxlR3JvdXAiLCJfcmVmJGNvdW50IiwiZGF0ZVRyYW5zZm9ybSIsImVuZCIsInN0YXJ0IiwiX3JlZiRzdGVwIiwic3RlcCIsIlRpbGUiLCJ0aWxlIiwidGlsZXMiLCJwb2ludCIsImdldFRpbWUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiX3NldFByb3RvdHlwZU9mIiwicCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2NyZWF0ZVN1cGVyIiwiRGVyaXZlZCIsImhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0Iiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJlIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsInJlc3VsdCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mIiwiTmV3VGFyZ2V0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwiZ2V0UHJvdG90eXBlT2YiLCJkYXRlc0FyZURpZmZlcmVudCIsImdldFZhbHVlIiwibmV4dFByb3BzIiwicHJvcCIsIl9Db21wb25lbnQiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJfaW5oZXJpdHMiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfc3VwZXIiLCJfdGhpcyIsIl9sZW4iLCJhcmdzIiwiX2tleSIsInByZXZTdGF0ZSIsIm5leHRTdGF0ZSIsInRpbGVDbGFzc05hbWVQcm9wcyIsImFjdGl2ZVN0YXJ0RGF0ZVByb3BzIiwidGlsZUNvbnRlbnRQcm9wcyIsIl90aGlzJHByb3BzIiwiZm9ybWF0QWJiciIsIm1heERhdGVUcmFuc2Zvcm0iLCJtaW5EYXRlVHJhbnNmb3JtIiwiX3RoaXMkc3RhdGUiLCJzdGF0ZSIsImV2ZW50Iiwib25Gb2N1cyIsIkNvbXBvbmVudCIsIkRlY2FkZSIsIkRlY2FkZXMiLCJiZWdpbk9mQ2VudHVyeSIsIkNlbnR1cnlWaWV3IiwiWWVhciIsIlllYXJzIiwiYmVnaW5PZkRlY2FkZSIsInNldEZ1bGxZZWFyIiwiRGVjYWRlVmlldyIsIk1vbnRoIiwiX3JlZiRmb3JtYXRNb250aCIsImZvcm1hdE1vbnRoIiwiTW9udGhzIiwiWWVhclZpZXciLCJEYXkiLCJfcmVmJGZvcm1hdERheSIsImZvcm1hdERheSIsIl9yZWYkZm9ybWF0TG9uZ0RhdGUiLCJmb3JtYXRMb25nRGF0ZSIsImN1cnJlbnRNb250aEluZGV4IiwiRGF5cyIsInNob3dGaXhlZE51bWJlck9mV2Vla3MiLCJzaG93TmVpZ2hib3JpbmdNb250aCIsImhhc0ZpeGVkTnVtYmVyT2ZXZWVrcyIsImRheU9mV2VlayIsImRheXNJbk1vbnRoIiwiZ2V0RGF5c0luTW9udGgiLCJhY3RpdmVFbmREYXRlIiwiV2Vla2RheXMiLCJfcHJvcHMkZm9ybWF0U2hvcnRXZWUiLCJmb3JtYXRTaG9ydFdlZWtkYXkiLCJvbk1vdXNlTGVhdmUiLCJhbnlEYXRlIiwiYmVnaW5PZk1vbnRoIiwid2Vla2RheXMiLCJ3ZWVrZGF5RGF0ZSIsImFiYnIiLCJ0aXRsZSIsInJlcGxhY2UiLCJXZWVrTnVtYmVyIiwib25DbGlja1dlZWtOdW1iZXIiLCJ3ZWVrTnVtYmVyIiwiV2Vla051bWJlcnMiLCJudW1iZXJPZldlZWtzIiwiZGF5cyIsIk1hdGgiLCJjZWlsIiwid2Vla051bWJlcnMiLCJiZWdpbk9mRmlyc3RXZWVrIiwiY2FsZW5kYXJUeXBlRm9yV2Vla051bWJlciIsImJlZ2luT2ZXZWVrIiwicm91bmQiLCJnZXRXZWVrTnVtYmVyIiwid2Vla0luZGV4IiwiTW9udGhWaWV3IiwiX3Byb3BzJGNhbGVuZGFyVHlwZSIsImZpbmQiLCJpbmNsdWRlcyIsImdldENhbGVuZGFyVHlwZUZyb21Mb2NhbGUiLCJzaG93V2Vla051bWJlcnMiLCJjaGlsZFByb3BzIiwiYWxpZ25JdGVtcyIsIndpZHRoIiwiZGVmYXVsdE1pbkRhdGUiLCJkZWZhdWx0TWF4RGF0ZSIsImFsbFZhbHVlVHlwZXMiLCJnZXRMaW1pdGVkVmlld3MiLCJtaW5EZXRhaWwiLCJtYXhEZXRhaWwiLCJnZXRWaWV3IiwiaXNWaWV3QWxsb3dlZCIsImdldFZhbHVlVHlwZSIsInJhd1ZhbHVlIiwidmFsdWVEYXRlIiwidG9EYXRlIiwiaXNOYU4iLCJnZXREZXRhaWxWYWx1ZSIsInZhbHVlUGllY2UiLCJtaW4iLCJtYXgiLCJiZXR3ZWVuIiwiZ2V0RGV0YWlsVmFsdWVGcm9tIiwiZ2V0RGV0YWlsVmFsdWVUbyIsImdldERldGFpbFZhbHVlQXJyYXkiLCJmbiIsImdldEFjdGl2ZVN0YXJ0RGF0ZSIsImdldElzU2luZ2xlVmFsdWUiLCJDYWxlbmRhciIsIl9hcmdzIiwiZGVmYXVsdEFjdGl2ZVN0YXJ0RGF0ZSIsImRlZmF1bHRWYWx1ZSIsImRlZmF1bHRWaWV3IiwiY2FsbGJhY2siLCJfYXNzZXJ0VGhpc0luaXRpYWxpemUiLCJwcmV2aW91c1ZpZXciLCJhbGxvd1BhcnRpYWxSYW5nZSIsIm9uQWN0aXZlU3RhcnREYXRlQ2hhbmdlIiwib25DaGFuZ2UiLCJvblZpZXdDaGFuZ2UiLCJzZWxlY3RSYW5nZSIsInByZXZBcmdzIiwic2V0U3RhdGUiLCJhY3Rpb24iLCJzaG91bGRVcGRhdGUiLCJzZXRTdGF0ZUFuZENhbGxDYWxsYmFja3MiLCJkcmlsbERvd25BdmFpbGFibGUiLCJvbkNsaWNrVGlsZSIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZTIiLCJvbkRyaWxsRG93biIsIm5leHRWaWV3IiwiX2Fzc2VydFRoaXNJbml0aWFsaXplMyIsIm9uRHJpbGxVcCIsIm5leHRWYWx1ZSIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZTQiLCJwcmV2aW91c1ZhbHVlIiwiZ2V0UHJvY2Vzc2VkVmFsdWUiLCJwZXJzaXN0IiwiX3RoaXMkcHJvcHMyIiwib25DbGlja0RheSIsIm9uQ2xpY2tEZWNhZGUiLCJvbkNsaWNrTW9udGgiLCJvbkNsaWNrWWVhciIsInZhbHVlRnJvbSIsImFjdGl2ZVN0YXJ0RGF0ZVN0YXRlIiwiX3RoaXMkcHJvcHMzIiwidmFsdWVQcm9wcyIsInZhbHVlU3RhdGUiLCJfdGhpcyRwcm9wczQiLCJ2aWV3UHJvcHMiLCJ2aWV3U3RhdGUiLCJfdGhpcyRwcm9wczUiLCJfdGhpcyRwcm9wczYiLCJyZXR1cm5WYWx1ZSIsInByb2Nlc3NGdW5jdGlvbiIsIm5leHQiLCJjdXJyZW50QWN0aXZlU3RhcnREYXRlIiwiX3RoaXMkcHJvcHM3IiwiY29tbW9uUHJvcHMiLCJkcmlsbERvd24iLCJfZm9ybWF0WWVhciIsIl90aGlzJHByb3BzOCIsIl90aGlzJHByb3BzOSIsInNob3dOYXZpZ2F0aW9uIiwiX3RoaXMkcHJvcHMxMCIsIl90aGlzJHByb3BzMTEiLCJpbnB1dFJlZiIsInJlZiIsInJlbmRlck5hdmlnYXRpb24iLCJvbkJsdXIiLCJyZW5kZXJDb250ZW50IiwiZGVmYXVsdFByb3BzIiwiaXNBY3RpdmVTdGFydERhdGUiLCJpc0xvb3NlVmFsdWUiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInNldEF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJkb21BUEkiLCJpbnNlcnRTdHlsZUVsZW1lbnQiXSwic291cmNlUm9vdCI6IiJ9
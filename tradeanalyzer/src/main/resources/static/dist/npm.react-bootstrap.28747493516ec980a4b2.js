"use strict";(self.webpackChunktradeanalyzer=self.webpackChunktradeanalyzer||[]).push([[4917],{682:(e,n,t)=>{t.d(n,{Z:()=>c});var o=t(4184),s=t.n(o),a=t(7294),r=t(6792),l=t(5893);const i=a.forwardRef((({bsPrefix:e,fluid:n,as:t="div",className:o,...a},i)=>{const c=(0,r.vE)(e,"container"),d="string"==typeof n?`-${n}`:"-fluid";return(0,l.jsx)(t,{ref:i,...a,className:s()(o,n?`${c}${d}`:c)})}));i.displayName="Container",i.defaultProps={fluid:!1};const c=i},8325:(e,n,t)=>{t.d(n,{Z:()=>x});var o=t(4184),s=t.n(o),a=(t(4391),t(7294)),r=t(8977),l=t(5115),i=t(6792),c=t(4819);const d=a.createContext(null);d.displayName="CardHeaderContext";const f=d;var u=t(1244),p=t(4691),m=t(5893);const v=a.forwardRef(((e,n)=>{const{as:t="div",bsPrefix:o,variant:d,fill:u,justify:p,navbar:v,navbarScroll:x,className:g,activeKey:h,...b}=(0,r.Ch)(e,{activeKey:"onSelect"}),E=(0,i.vE)(o,"nav");let y,N,C=!1;const w=(0,a.useContext)(c.Z),Z=(0,a.useContext)(f);return w?(y=w.bsPrefix,C=null==v||v):Z&&({cardHeaderBsPrefix:N}=Z),(0,m.jsx)(l.Z,{as:t,ref:n,activeKey:h,className:s()(g,{[E]:!C,[`${y}-nav`]:C,[`${y}-nav-scroll`]:C&&x,[`${N}-${d}`]:!!N,[`${E}-${d}`]:!!d,[`${E}-fill`]:u,[`${E}-justified`]:p}),...b})}));v.displayName="Nav",v.defaultProps={justify:!1,fill:!1};const x=Object.assign(v,{Item:u.Z,Link:p.Z})},2778:(e,n,t)=>{t.d(n,{Z:()=>A});var o=t(4184),s=t.n(o),a=t(7294),r=t(6792),l=t(8534),i=t(8977),c=t(8146);const d=a.createContext({});d.displayName="DropdownContext";const f=d;var u=t(3910),p=t(3735),m=t(5893);const v=a.forwardRef((({bsPrefix:e,className:n,eventKey:t,disabled:o=!1,onClick:a,active:l,as:i=p.Z,...c},d)=>{const f=(0,r.vE)(e,"dropdown-item"),[v,x]=(0,u.F)({key:t,href:c.href,disabled:o,onClick:a,active:l});return(0,m.jsx)(i,{...c,...v,ref:d,className:s()(n,f,x.isActive&&"active",o&&"disabled")})}));v.displayName="DropdownItem";const x=v;var g=t(3353),h=t(9585),b=t(5654);t(2473);const E=a.createContext(null);E.displayName="InputGroupContext";const y=E;var N=t(4819);t(1143);function C(e,n){return e}function w(e,n,t){let o=e?t?"bottom-start":"bottom-end":t?"bottom-end":"bottom-start";return"up"===n?o=e?t?"top-start":"top-end":t?"top-end":"top-start":"end"===n?o=e?t?"left-end":"right-end":t?"left-start":"right-start":"start"===n&&(o=e?t?"right-end":"left-end":t?"right-start":"left-start"),o}const Z=a.forwardRef((({bsPrefix:e,className:n,align:t,rootCloseEvent:o,flip:l,show:i,renderOnMount:c,as:d="div",popperConfig:u,variant:p,...v},x)=>{let E=!1;const Z=(0,a.useContext)(N.Z),j=(0,r.vE)(e,"dropdown-menu"),{align:P,drop:k,isRTL:$}=(0,a.useContext)(f);t=t||P;const R=(0,a.useContext)(y),O=[];if(t)if("object"==typeof t){const e=Object.keys(t);if(e.length){const n=e[0],o=t[n];E="start"===o,O.push(`${j}-${n}-${o}`)}}else"end"===t&&(E=!0);const T=w(E,k,$),[F,{hasShown:S,popper:L,show:D,toggle:B}]=(0,g.d)({flip:l,rootCloseEvent:o,show:i,usePopper:!Z&&0===O.length,offset:[0,2],popperConfig:u,placement:T});if(F.ref=(0,b.Z)(C(x),F.ref),(0,h.Z)((()=>{D&&(null==L||L.update())}),[D]),!S&&!c&&!R)return null;"string"!=typeof d&&(F.show=D,F.close=()=>null==B?void 0:B(!1),F.align=t);let H=v.style;return null!=L&&L.placement&&(H={...v.style,...F.style},v["x-placement"]=L.placement),(0,m.jsx)(d,{...v,...F,style:H,...(O.length||Z)&&{"data-bs-popper":"static"},className:s()(n,j,D&&"show",E&&`${j}-end`,p&&`${j}-${p}`,...O)})}));Z.displayName="DropdownMenu",Z.defaultProps={flip:!0};const j=Z;var P=t(541),k=t(3577),$=t(861);const R=a.forwardRef((({as:e,bsPrefix:n,variant:t,size:o,active:a,className:l,...i},c)=>{const d=(0,r.vE)(n,"btn"),[f,{tagName:u}]=(0,$.FT)({tagName:e,...i}),p=u;return(0,m.jsx)(p,{...f,...i,ref:c,className:s()(l,d,a&&"active",t&&`${d}-${t}`,o&&`${d}-${o}`,i.href&&i.disabled&&"disabled")})}));R.displayName="Button",R.defaultProps={variant:"primary",active:!1,disabled:!1};const O=R,T=a.forwardRef((({bsPrefix:e,split:n,className:t,childBsPrefix:o,as:l=O,...i},c)=>{const d=(0,r.vE)(e,"dropdown-toggle"),f=(0,a.useContext)(k.Z),u=(0,a.useContext)(y);void 0!==o&&(i.bsPrefix=o);const[p]=(0,P.Jr)();return p.ref=(0,b.Z)(p.ref,C(c)),(0,m.jsx)(l,{className:s()(t,d,n&&`${d}-split`,!!u&&(null==f?void 0:f.show)&&"show"),...p,...i})}));T.displayName="DropdownToggle";const F=T;var S=t(8452);const L=(0,S.Z)("dropdown-header",{defaultProps:{role:"heading"}}),D=(0,S.Z)("dropdown-divider",{Component:"hr",defaultProps:{role:"separator"}}),B=(0,S.Z)("dropdown-item-text",{Component:"span"}),H=a.forwardRef(((e,n)=>{const{bsPrefix:t,drop:o,show:d,className:u,align:p,onSelect:v,onToggle:x,focusFirstItemOnShow:g,as:h="div",navbar:b,autoClose:E,...N}=(0,i.Ch)(e,{show:"onToggle"}),C=(0,a.useContext)(y),Z=(0,r.vE)(t,"dropdown"),j=(0,r.SC)(),P=(0,c.Z)(((e,n)=>{var t;n.originalEvent.currentTarget!==document||"keydown"===n.source&&"Escape"!==n.originalEvent.key||(n.source="rootClose"),t=n.source,(!1===E?"click"===t:"inside"===E?"rootClose"!==t:"outside"!==E||"select"!==t)&&(null==x||x(e,n))})),k=w("end"===p,o,j),$=(0,a.useMemo)((()=>({align:p,drop:o,isRTL:j})),[p,o,j]);return(0,m.jsx)(f.Provider,{value:$,children:(0,m.jsx)(l.Z,{placement:k,show:d,onSelect:v,onToggle:P,focusFirstItemOnShow:g,itemSelector:`.${Z}-item:not(.disabled):not(:disabled)`,children:C?N.children:(0,m.jsx)(h,{...N,ref:n,className:s()(u,d&&"show",(!o||"down"===o)&&Z,"up"===o&&"dropup","end"===o&&"dropend","start"===o&&"dropstart")})})})}));H.displayName="Dropdown",H.defaultProps={navbar:!1,align:"start",autoClose:!0};const I=Object.assign(H,{Toggle:F,Menu:j,Item:x,ItemText:B,Divider:D,Header:L});var M=t(4691);const K=a.forwardRef((({id:e,title:n,children:t,bsPrefix:o,className:a,rootCloseEvent:l,menuRole:i,disabled:c,active:d,renderMenuOnMount:f,menuVariant:u,...p},v)=>{const x=(0,r.vE)(void 0,"nav-item");return(0,m.jsxs)(I,{ref:v,...p,className:s()(a,x),children:[(0,m.jsx)(I.Toggle,{id:e,eventKey:null,active:d,disabled:c,childBsPrefix:o,as:M.Z,children:n}),(0,m.jsx)(I.Menu,{role:i,renderOnMount:f,rootCloseEvent:l,variant:u,children:t})]})}));K.displayName="NavDropdown";const A=Object.assign(K,{Item:I.Item,ItemText:I.ItemText,Divider:I.Divider,Header:I.Header})},1244:(e,n,t)=>{t.d(n,{Z:()=>o});const o=(0,t(8452).Z)("nav-item")},4691:(e,n,t)=>{t.d(n,{Z:()=>u});var o=t(4184),s=t.n(o),a=t(7294),r=t(3735),l=t(3716),i=t(7126),c=t(6792),d=t(5893);const f=a.forwardRef((({bsPrefix:e,className:n,as:t=r.Z,active:o,eventKey:a,...f},u)=>{e=(0,c.vE)(e,"nav-link");const[p,m]=(0,l.v)({key:(0,i.h)(a,f.href),active:o,...f});return(0,d.jsx)(t,{...f,...p,ref:u,className:s()(n,e,f.disabled&&"disabled",m.isActive&&"active")})}));f.displayName="NavLink",f.defaultProps={disabled:!1};const u=f},3663:(e,n,t)=>{t.d(n,{Z:()=>ye});var o=t(4184),s=t.n(o),a=t(7294),r=t(7126),l=t(8977),i=t(8452),c=t(6792),d=t(5893);const f=a.forwardRef((({bsPrefix:e,className:n,as:t,...o},a)=>{e=(0,c.vE)(e,"navbar-brand");const r=t||(o.href?"a":"span");return(0,d.jsx)(r,{...o,ref:a,className:s()(n,e)})}));f.displayName="NavbarBrand";const u=f;var p=t(3164),m=t(3819),v=t(6914);function x(e,n){const t=(0,p.Z)(e,n)||"",o=-1===t.indexOf("ms")?1e3:1;return parseFloat(t)*o}function g(e,n){const t=x(e,"transitionDuration"),o=x(e,"transitionDelay"),s=(0,v.Z)(e,(t=>{t.target===e&&(s(),n(t))}),t+o)}const h=function(...e){return e.filter((e=>null!=e)).reduce(((e,n)=>{if("function"!=typeof n)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===e?n:function(...t){e.apply(this,t),n.apply(this,t)}}),null)};function b(e){e.offsetHeight}var E=t(5654),y=t(3935);const N=a.forwardRef((({onEnter:e,onEntering:n,onEntered:t,onExit:o,onExiting:s,onExited:r,addEndListener:l,children:i,childRef:c,...f},u)=>{const p=(0,a.useRef)(null),v=(0,E.Z)(p,c),x=e=>{var n;v((n=e)&&"setState"in n?y.findDOMNode(n):null!=n?n:null)},g=e=>n=>{e&&p.current&&e(p.current,n)},h=(0,a.useCallback)(g(e),[e]),b=(0,a.useCallback)(g(n),[n]),N=(0,a.useCallback)(g(t),[t]),C=(0,a.useCallback)(g(o),[o]),w=(0,a.useCallback)(g(s),[s]),Z=(0,a.useCallback)(g(r),[r]),j=(0,a.useCallback)(g(l),[l]);return(0,d.jsx)(m.ZP,{ref:u,...f,onEnter:h,onEntered:N,onEntering:b,onExit:C,onExited:Z,onExiting:w,addEndListener:j,nodeRef:p,children:"function"==typeof i?(e,n)=>i(e,{...n,ref:x}):a.cloneElement(i,{ref:x})})})),C={height:["marginTop","marginBottom"],width:["marginLeft","marginRight"]};function w(e,n){const t=n[`offset${e[0].toUpperCase()}${e.slice(1)}`],o=C[e];return t+parseInt((0,p.Z)(n,o[0]),10)+parseInt((0,p.Z)(n,o[1]),10)}const Z={[m.Wj]:"collapse",[m.Ix]:"collapsing",[m.d0]:"collapsing",[m.cn]:"collapse show"},j={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1,getDimensionValue:w},P=a.forwardRef((({onEnter:e,onEntering:n,onEntered:t,onExit:o,onExiting:r,className:l,children:i,dimension:c="height",getDimensionValue:f=w,...u},p)=>{const m="function"==typeof c?c():c,v=(0,a.useMemo)((()=>h((e=>{e.style[m]="0"}),e)),[m,e]),x=(0,a.useMemo)((()=>h((e=>{const n=`scroll${m[0].toUpperCase()}${m.slice(1)}`;e.style[m]=`${e[n]}px`}),n)),[m,n]),E=(0,a.useMemo)((()=>h((e=>{e.style[m]=null}),t)),[m,t]),y=(0,a.useMemo)((()=>h((e=>{e.style[m]=`${f(m,e)}px`,b(e)}),o)),[o,f,m]),C=(0,a.useMemo)((()=>h((e=>{e.style[m]=null}),r)),[m,r]);return(0,d.jsx)(N,{ref:p,addEndListener:g,...u,"aria-expanded":u.role?u.in:null,onEnter:v,onEntering:x,onEntered:E,onExit:y,onExiting:C,childRef:i.ref,children:(e,n)=>a.cloneElement(i,{...n,className:s()(l,i.props.className,Z[e],"width"===m&&"collapse-horizontal")})})}));P.defaultProps=j;const k=P;var $=t(4819);const R=a.forwardRef((({children:e,bsPrefix:n,...t},o)=>{n=(0,c.vE)(n,"navbar-collapse");const s=(0,a.useContext)($.Z);return(0,d.jsx)(k,{in:!(!s||!s.expanded),...t,children:(0,d.jsx)("div",{ref:o,className:n,children:e})})}));R.displayName="NavbarCollapse";const O=R;var T=t(8146);const F=a.forwardRef((({bsPrefix:e,className:n,children:t,label:o,as:r="button",onClick:l,...i},f)=>{e=(0,c.vE)(e,"navbar-toggler");const{onToggle:u,expanded:p}=(0,a.useContext)($.Z)||{},m=(0,T.Z)((e=>{l&&l(e),u&&u()}));return"button"===r&&(i.type="button"),(0,d.jsx)(r,{...i,ref:f,onClick:m,"aria-label":o,className:s()(n,e,!p&&"collapsed"),children:t||(0,d.jsx)("span",{className:`${e}-icon`})})}));F.displayName="NavbarToggle",F.defaultProps={label:"Toggle navigation"};const S=F;var L=t(3478),D=t(6401);const B={[m.d0]:"show",[m.cn]:"show"},H=a.forwardRef((({className:e,children:n,transitionClasses:t={},...o},r)=>{const l=(0,a.useCallback)(((e,n)=>{b(e),null==o.onEnter||o.onEnter(e,n)}),[o]);return(0,d.jsx)(N,{ref:r,addEndListener:g,...o,onEnter:l,childRef:n.ref,children:(o,r)=>a.cloneElement(n,{...r,className:s()("fade",e,n.props.className,B[o],t[o])})})}));H.defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1},H.displayName="Fade";const I=H,M=(0,i.Z)("offcanvas-body"),K={[m.d0]:"show",[m.cn]:"show"},A=a.forwardRef((({bsPrefix:e,className:n,children:t,...o},r)=>(e=(0,c.vE)(e,"offcanvas"),(0,d.jsx)(N,{ref:r,addEndListener:g,...o,childRef:t.ref,children:(o,r)=>a.cloneElement(t,{...r,className:s()(n,t.props.className,(o===m.d0||o===m.Ix)&&`${e}-toggling`,K[o])})}))));A.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1},A.displayName="OffcanvasToggling";const W=A,z=a.createContext({onHide(){}});var V=t(5697),U=t.n(V);const G={"aria-label":U().string,onClick:U().func,variant:U().oneOf(["white"])},J=a.forwardRef((({className:e,variant:n,...t},o)=>(0,d.jsx)("button",{ref:o,type:"button",className:s()("btn-close",n&&`btn-close-${n}`,e),...t})));J.displayName="CloseButton",J.propTypes=G,J.defaultProps={"aria-label":"Close"};const q=J,Q=a.forwardRef((({closeLabel:e,closeVariant:n,closeButton:t,onHide:o,children:s,...r},l)=>{const i=(0,a.useContext)(z),c=(0,T.Z)((()=>{null==i||i.onHide(),null==o||o()}));return(0,d.jsxs)("div",{ref:l,...r,children:[s,t&&(0,d.jsx)(q,{"aria-label":e,variant:n,onClick:c})]})}));Q.defaultProps={closeLabel:"Close",closeButton:!1};const X=Q,Y=a.forwardRef((({bsPrefix:e,className:n,...t},o)=>(e=(0,c.vE)(e,"offcanvas-header"),(0,d.jsx)(X,{ref:o,...t,className:s()(n,e)}))));Y.displayName="OffcanvasHeader",Y.defaultProps={closeLabel:"Close",closeButton:!1};const _=Y,ee=(ne="h5",a.forwardRef(((e,n)=>(0,d.jsx)("div",{...e,ref:n,className:s()(e.className,ne)}))));var ne;const te=(0,i.Z)("offcanvas-title",{Component:ee});var oe=t(479),se=t(930),ae=t(4277),re=t(6039);const le=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",ie=".sticky-top",ce=".navbar-toggler";class de extends re.Z{adjustAndStore(e,n,t){const o=n.style[e];n.dataset[e]=o,(0,p.Z)(n,{[e]:`${parseFloat((0,p.Z)(n,e))+t}px`})}restore(e,n){const t=n.dataset[e];void 0!==t&&(delete n.dataset[e],(0,p.Z)(n,{[e]:t}))}setContainerStyle(e){super.setContainerStyle(e);const n=this.getElement();if((0,oe.Z)(n,"modal-open"),!e.scrollBarWidth)return;const t=this.isRTL?"paddingLeft":"paddingRight",o=this.isRTL?"marginLeft":"marginRight";(0,se.Z)(n,le).forEach((n=>this.adjustAndStore(t,n,e.scrollBarWidth))),(0,se.Z)(n,ie).forEach((n=>this.adjustAndStore(o,n,-e.scrollBarWidth))),(0,se.Z)(n,ce).forEach((n=>this.adjustAndStore(o,n,e.scrollBarWidth)))}removeContainerStyle(e){super.removeContainerStyle(e);const n=this.getElement();(0,ae.Z)(n,"modal-open");const t=this.isRTL?"paddingLeft":"paddingRight",o=this.isRTL?"marginLeft":"marginRight";(0,se.Z)(n,le).forEach((e=>this.restore(t,e))),(0,se.Z)(n,ie).forEach((e=>this.restore(o,e))),(0,se.Z)(n,ce).forEach((e=>this.restore(o,e)))}}let fe;const ue=de;function pe(e){return(0,d.jsx)(W,{...e})}function me(e){return(0,d.jsx)(I,{...e})}const ve=a.forwardRef((({bsPrefix:e,className:n,children:t,"aria-labelledby":o,placement:r,show:l,backdrop:i,keyboard:f,scroll:u,onEscapeKeyDown:p,onShow:m,onHide:v,container:x,autoFocus:g,enforceFocus:h,restoreFocus:b,restoreFocusOptions:E,onEntered:y,onExit:N,onExiting:C,onEnter:w,onEntering:Z,onExited:j,backdropClassName:P,manager:k,...R},O)=>{const F=(0,a.useRef)();e=(0,c.vE)(e,"offcanvas");const{onToggle:S}=(0,a.useContext)($.Z)||{},L=(0,T.Z)((()=>{null==S||S(),null==v||v()})),B=(0,a.useMemo)((()=>({onHide:L})),[L]);const H=(0,a.useCallback)((n=>(0,d.jsx)("div",{...n,className:s()(`${e}-backdrop`,P)})),[P,e]);return(0,d.jsx)(z.Provider,{value:B,children:(0,d.jsx)(D.Z,{show:l,ref:O,backdrop:i,container:x,keyboard:f,autoFocus:g,enforceFocus:h&&!u,restoreFocus:b,restoreFocusOptions:E,onEscapeKeyDown:p,onShow:m,onHide:L,onEnter:(e,...n)=>{e&&(e.style.visibility="visible"),null==w||w(e,...n)},onEntering:Z,onEntered:y,onExit:N,onExiting:C,onExited:(e,...n)=>{e&&(e.style.visibility=""),null==j||j(...n)},manager:k||(u?(F.current||(F.current=new ue({handleContainerOverflow:!1})),F.current):(fe||(fe=new de(I)),fe)),transition:pe,backdropTransition:me,renderBackdrop:H,renderDialog:a=>(0,d.jsx)("div",{role:"dialog",...a,...R,className:s()(n,e,`${e}-${r}`),"aria-labelledby":o,children:t})})});var I}));ve.displayName="Offcanvas",ve.defaultProps={show:!1,backdrop:!0,keyboard:!0,scroll:!1,autoFocus:!0,enforceFocus:!0,restoreFocus:!0,placement:"start"};const xe=Object.assign(ve,{Body:M,Header:_,Title:te}),ge=a.forwardRef((({className:e,bsPrefix:n,backdrop:t,backdropClassName:o,keyboard:r,scroll:l,placement:i,autoFocus:f,enforceFocus:u,restoreFocus:p,restoreFocusOptions:m,onShow:v,onHide:x,onEscapeKeyDown:g,onEnter:h,onEntering:b,onEntered:E,onExit:y,onExiting:N,onExited:C,...w},Z)=>{const j=(0,a.useContext)($.Z);n=(0,c.vE)(n,"offcanvas");const P="string"==typeof(null==j?void 0:j.expand),k=(0,L.Z)(P?j.expand:"xs","up");return P&&k?(0,d.jsx)("div",{ref:Z,...w,className:s()(e,n,`${n}-${i}`)}):(0,d.jsx)(xe,{ref:Z,show:!(null==j||!j.expanded),bsPrefix:n,backdrop:t,backdropClassName:o,keyboard:r,scroll:l,placement:i,autoFocus:f,enforceFocus:u,restoreFocus:p,restoreFocusOptions:m,onShow:v,onHide:x,onEscapeKeyDown:g,onEnter:h,onEntering:b,onEntered:E,onExit:y,onExiting:N,onExited:C,...w})}));ge.displayName="NavbarOffcanvas";const he=ge,be=(0,i.Z)("navbar-text",{Component:"span"}),Ee=a.forwardRef(((e,n)=>{const{bsPrefix:t,expand:o,variant:i,bg:f,fixed:u,sticky:p,className:m,as:v="nav",expanded:x,onToggle:g,onSelect:h,collapseOnSelect:b,...E}=(0,l.Ch)(e,{expanded:"onToggle"}),y=(0,c.vE)(t,"navbar"),N=(0,a.useCallback)(((...e)=>{null==h||h(...e),b&&x&&(null==g||g(!1))}),[h,b,x,g]);void 0===E.role&&"nav"!==v&&(E.role="navigation");let C=`${y}-expand`;"string"==typeof o&&(C=`${C}-${o}`);const w=(0,a.useMemo)((()=>({onToggle:()=>null==g?void 0:g(!x),bsPrefix:y,expanded:!!x,expand:o})),[y,x,o,g]);return(0,d.jsx)($.Z.Provider,{value:w,children:(0,d.jsx)(r.Z.Provider,{value:N,children:(0,d.jsx)(v,{ref:n,...E,className:s()(m,y,o&&C,i&&`${y}-${i}`,f&&`bg-${f}`,p&&`sticky-${p}`,u&&`fixed-${u}`)})})})}));Ee.defaultProps={expand:!0,variant:"light",collapseOnSelect:!1},Ee.displayName="Navbar";const ye=Object.assign(Ee,{Brand:u,Collapse:O,Offcanvas:he,Text:be,Toggle:S})},4819:(e,n,t)=>{t.d(n,{Z:()=>s});const o=t(7294).createContext(null);o.displayName="NavbarContext";const s=o},6792:(e,n,t)=>{t.d(n,{SC:()=>c,vE:()=>i});var o=t(7294);t(5893);const s=["xxl","xl","lg","md","sm","xs"],a=o.createContext({prefixes:{},breakpoints:s}),{Consumer:r,Provider:l}=a;function i(e,n){const{prefixes:t}=(0,o.useContext)(a);return e||t[n]||n}function c(){const{dir:e}=(0,o.useContext)(a);return"rtl"===e}},8452:(e,n,t)=>{t.d(n,{Z:()=>d});var o=t(4184),s=t.n(o),a=t(3576),r=t(7294),l=t(6792),i=t(5893);const c=e=>e[0].toUpperCase()+(0,a.Z)(e).slice(1);function d(e,{displayName:n=c(e),Component:t,defaultProps:o}={}){const a=r.forwardRef((({className:n,bsPrefix:o,as:a=t||"div",...r},c)=>{const d=(0,l.vE)(o,e);return(0,i.jsx)(a,{ref:c,className:s()(n,d),...r})}));return a.defaultProps=o,a.displayName=n,a}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
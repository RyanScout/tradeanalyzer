"use strict";(self.webpackChunktradeanalyzer=self.webpackChunktradeanalyzer||[]).push([[7068],{8934:(e,t,n)=>{n.r(t),n.d(t,{Manager:()=>o,Popper:()=>g,Reference:()=>R,usePopper:()=>b});var r=n(7294),u=r.createContext(),a=r.createContext();function o(e){var t=e.children,n=r.useState(null),o=n[0],i=n[1],s=r.useRef(!1);r.useEffect((function(){return function(){s.current=!0}}),[]);var c=r.useCallback((function(e){s.current||i(e)}),[]);return r.createElement(u.Provider,{value:o},r.createElement(a.Provider,{value:c},t))}var i=function(e){return Array.isArray(e)?e[0]:e},s=function(e){if("function"==typeof e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return e.apply(void 0,n)}},c=function(e,t){if("function"==typeof e)return s(e,t);null!=e&&(e.current=t)},f=function(e){return e.reduce((function(e,t){var n=t[0],r=t[1];return e[n]=r,e}),{})},l="undefined"!=typeof window&&window.document&&window.document.createElement?r.useLayoutEffect:r.useEffect,p=n(3935),d=n(8044),m=n(9590),y=n.n(m),v=[],b=function(e,t,n){void 0===n&&(n={});var u=r.useRef(null),a={onFirstUpdate:n.onFirstUpdate,placement:n.placement||"bottom",strategy:n.strategy||"absolute",modifiers:n.modifiers||v},o=r.useState({styles:{popper:{position:a.strategy,left:"0",top:"0"},arrow:{position:"absolute"}},attributes:{}}),i=o[0],s=o[1],c=r.useMemo((function(){return{name:"updateState",enabled:!0,phase:"write",fn:function(e){var t=e.state,n=Object.keys(t.elements);p.flushSync((function(){s({styles:f(n.map((function(e){return[e,t.styles[e]||{}]}))),attributes:f(n.map((function(e){return[e,t.attributes[e]]})))})}))},requires:["computeStyles"]}}),[]),m=r.useMemo((function(){var e={onFirstUpdate:a.onFirstUpdate,placement:a.placement,strategy:a.strategy,modifiers:[].concat(a.modifiers,[c,{name:"applyStyles",enabled:!1}])};return y()(u.current,e)?u.current||e:(u.current=e,e)}),[a.onFirstUpdate,a.placement,a.strategy,a.modifiers,c]),b=r.useRef();return l((function(){b.current&&b.current.setOptions(m)}),[m]),l((function(){if(null!=e&&null!=t){var r=(n.createPopper||d.fi)(e,t,m);return b.current=r,function(){r.destroy(),b.current=null}}}),[e,t,n.createPopper]),{state:b.current?b.current.state:null,styles:i.styles,attributes:i.attributes,update:b.current?b.current.update:null,forceUpdate:b.current?b.current.forceUpdate:null}},h=function(){},w=function(){return Promise.resolve(null)},E=[];function g(e){var t=e.placement,n=void 0===t?"bottom":t,a=e.strategy,o=void 0===a?"absolute":a,s=e.modifiers,f=void 0===s?E:s,l=e.referenceElement,p=e.onFirstUpdate,d=e.innerRef,m=e.children,y=r.useContext(u),v=r.useState(null),g=v[0],U=v[1],P=r.useState(null),R=P[0],C=P[1];r.useEffect((function(){c(d,g)}),[d,g]);var S=r.useMemo((function(){return{placement:n,strategy:o,onFirstUpdate:p,modifiers:[].concat(f,[{name:"arrow",enabled:null!=R,options:{element:R}}])}}),[n,o,p,f,R]),k=b(l||y,g,S),F=k.state,M=k.styles,x=k.forceUpdate,D=k.update,A=r.useMemo((function(){return{ref:U,style:M.popper,placement:F?F.placement:n,hasPopperEscaped:F&&F.modifiersData.hide?F.modifiersData.hide.hasPopperEscaped:null,isReferenceHidden:F&&F.modifiersData.hide?F.modifiersData.hide.isReferenceHidden:null,arrowProps:{style:M.arrow,ref:C},forceUpdate:x||h,update:D||w}}),[U,C,n,F,M,D,x]);return i(m)(A)}var U=n(2473),P=n.n(U);function R(e){var t=e.children,n=e.innerRef,u=r.useContext(a),o=r.useCallback((function(e){c(n,e),s(u,e)}),[n,u]);return r.useEffect((function(){return function(){return c(n,null)}}),[]),r.useEffect((function(){P()(Boolean(u),"`Reference` should not be used outside of a `Manager` component.")}),[u]),i(t)({ref:o})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBtLnJlYWN0LXBvcHBlci5hOWMwYTM4OGU5MjZhOTQ3ZmQyNi5qcyIsIm1hcHBpbmdzIjoidU1BQ1dBLEVBQThCLGtCQUM5QkMsRUFBb0Msa0JBQ3hDLFNBQVNDLEVBQVFDLEdBQ3RCLElBQUlDLEVBQVdELEVBQUtDLFNBRWhCQyxFQUFrQixXQUFlLE1BQ2pDQyxFQUFnQkQsRUFBZ0IsR0FDaENFLEVBQW1CRixFQUFnQixHQUVuQ0csRUFBZSxVQUFhLEdBQ2hDLGFBQWdCLFdBQ2QsT0FBTyxXQUNMQSxFQUFhQyxTQUFVLENBQ3pCLENBQ0YsR0FBRyxJQUNILElBQUlDLEVBQXlCLGVBQWtCLFNBQVVDLEdBQ2xESCxFQUFhQyxTQUNoQkYsRUFBaUJJLEVBRXJCLEdBQUcsSUFDSCxPQUFvQixnQkFBb0JYLEVBQTRCWSxTQUFVLENBQzVFQyxNQUFPUCxHQUNPLGdCQUFvQkwsRUFBa0NXLFNBQVUsQ0FDOUVDLE1BQU9ILEdBQ05OLEdBQ0wsQ0NwQk8sSUFBSVUsRUFBYyxTQUFxQkMsR0FDNUMsT0FBT0MsTUFBTUMsUUFBUUYsR0FBT0EsRUFBSSxHQUFLQSxDQUN2QyxFQU1XRyxFQUFhLFNBQW9CQyxHQUMxQyxHQUFrQixtQkFBUEEsRUFBbUIsQ0FDNUIsSUFBSyxJQUFJQyxFQUFPQyxVQUFVQyxPQUFRQyxFQUFPLElBQUlQLE1BQU1JLEVBQU8sRUFBSUEsRUFBTyxFQUFJLEdBQUlJLEVBQU8sRUFBR0EsRUFBT0osRUFBTUksSUFDbEdELEVBQUtDLEVBQU8sR0FBS0gsVUFBVUcsR0FHN0IsT0FBT0wsRUFBR00sV0FBTSxFQUFRRixFQUMxQixDQUNGLEVBS1dHLEVBQVMsU0FBZ0JDLEVBQUtoQixHQUV2QyxHQUFtQixtQkFBUmdCLEVBQ1QsT0FBT1QsRUFBV1MsRUFBS2hCLEdBRVQsTUFBUGdCLElBQ0xBLEVBQUlsQixRQUFVRSxFQUVwQixFQUtXaUIsRUFBYyxTQUFxQkMsR0FDNUMsT0FBT0EsRUFBUUMsUUFBTyxTQUFVQyxFQUFLNUIsR0FDbkMsSUFBSTZCLEVBQU03QixFQUFLLEdBQ1hVLEVBQVFWLEVBQUssR0FFakIsT0FEQTRCLEVBQUlDLEdBQU9uQixFQUNKa0IsQ0FDVCxHQUFHLENBQUMsRUFDTixFQUtXRSxFQUE4QyxvQkFBWEMsUUFBMEJBLE9BQU9DLFVBQVlELE9BQU9DLFNBQVNDLGNBQWdCLGtCQUF3QixZLHVDQy9DL0lDLEVBQWtCLEdBQ1hDLEVBQVksU0FBbUJDLEVBQWtCQyxFQUFlQyxRQUN6RCxJQUFaQSxJQUNGQSxFQUFVLENBQUMsR0FHYixJQUFJQyxFQUFjLFNBQWEsTUFDM0JDLEVBQXNCLENBQ3hCQyxjQUFlSCxFQUFRRyxjQUN2QkMsVUFBV0osRUFBUUksV0FBYSxTQUNoQ0MsU0FBVUwsRUFBUUssVUFBWSxXQUM5QkMsVUFBV04sRUFBUU0sV0FBYVYsR0FHOUJoQyxFQUFrQixXQUFlLENBQ25DMkMsT0FBUSxDQUNOQyxPQUFRLENBQ05DLFNBQVVQLEVBQW9CRyxTQUM5QkssS0FBTSxJQUNOQyxJQUFLLEtBRVBDLE1BQU8sQ0FDTEgsU0FBVSxhQUdkSSxXQUFZLENBQUMsSUFFWEMsRUFBUWxELEVBQWdCLEdBQ3hCbUQsRUFBV25ELEVBQWdCLEdBRTNCb0QsRUFBc0IsV0FBYyxXQUN0QyxNQUFPLENBQ0xDLEtBQU0sY0FDTkMsU0FBUyxFQUNUQyxNQUFPLFFBQ1B6QyxHQUFJLFNBQVloQixHQUNkLElBQUlvRCxFQUFRcEQsRUFBS29ELE1BQ2JNLEVBQVdDLE9BQU9DLEtBQUtSLEVBQU1NLFVBQ2pDLGFBQW1CLFdBQ2pCTCxFQUFTLENBQ1BSLE9BQVFwQixFQUFZaUMsRUFBU0csS0FBSSxTQUFVQyxHQUN6QyxNQUFPLENBQUNBLEVBQVNWLEVBQU1QLE9BQU9pQixJQUFZLENBQUMsRUFDN0MsS0FDQVgsV0FBWTFCLEVBQVlpQyxFQUFTRyxLQUFJLFNBQVVDLEdBQzdDLE1BQU8sQ0FBQ0EsRUFBU1YsRUFBTUQsV0FBV1csR0FDcEMsTUFFSixHQUNGLEVBQ0FDLFNBQVUsQ0FBQyxpQkFFZixHQUFHLElBQ0NDLEVBQWdCLFdBQWMsV0FDaEMsSUFBSUMsRUFBYSxDQUNmeEIsY0FBZUQsRUFBb0JDLGNBQ25DQyxVQUFXRixFQUFvQkUsVUFDL0JDLFNBQVVILEVBQW9CRyxTQUM5QkMsVUFBVyxHQUFHc0IsT0FBTzFCLEVBQW9CSSxVQUFXLENBQUNVLEVBQXFCLENBQ3hFQyxLQUFNLGNBQ05DLFNBQVMsTUFJYixPQUFJLElBQVFqQixFQUFZakMsUUFBUzJELEdBQ3hCMUIsRUFBWWpDLFNBQVcyRCxHQUU5QjFCLEVBQVlqQyxRQUFVMkQsRUFDZkEsRUFFWCxHQUFHLENBQUN6QixFQUFvQkMsY0FBZUQsRUFBb0JFLFVBQVdGLEVBQW9CRyxTQUFVSCxFQUFvQkksVUFBV1UsSUFDL0hhLEVBQW9CLFdBbUJ4QixPQWxCQXJDLEdBQTBCLFdBQ3BCcUMsRUFBa0I3RCxTQUNwQjZELEVBQWtCN0QsUUFBUThELFdBQVdKLEVBRXpDLEdBQUcsQ0FBQ0EsSUFDSmxDLEdBQTBCLFdBQ3hCLEdBQXdCLE1BQXBCTSxHQUE2QyxNQUFqQkMsRUFBaEMsQ0FJQSxJQUNJZ0MsR0FEZS9CLEVBQVFnQyxjQUFnQixNQUNUbEMsRUFBa0JDLEVBQWUyQixHQUVuRSxPQURBRyxFQUFrQjdELFFBQVUrRCxFQUNyQixXQUNMQSxFQUFlRSxVQUNmSixFQUFrQjdELFFBQVUsSUFDOUIsQ0FSQSxDQVNGLEdBQUcsQ0FBQzhCLEVBQWtCQyxFQUFlQyxFQUFRZ0MsZUFDdEMsQ0FDTGxCLE1BQU9lLEVBQWtCN0QsUUFBVTZELEVBQWtCN0QsUUFBUThDLE1BQVEsS0FDckVQLE9BQVFPLEVBQU1QLE9BQ2RNLFdBQVlDLEVBQU1ELFdBQ2xCcUIsT0FBUUwsRUFBa0I3RCxRQUFVNkQsRUFBa0I3RCxRQUFRa0UsT0FBUyxLQUN2RUMsWUFBYU4sRUFBa0I3RCxRQUFVNkQsRUFBa0I3RCxRQUFRbUUsWUFBYyxLQUVyRixFQ2hHSUMsRUFBTyxXQUVYLEVBRUlDLEVBQWUsV0FDakIsT0FBT0MsUUFBUUMsUUFBUSxLQUN6QixFQUVJLEVBQWtCLEdBQ2YsU0FBU0MsRUFBTzlFLEdBQ3JCLElBQUkrRSxFQUFpQi9FLEVBQUswQyxVQUN0QkEsT0FBK0IsSUFBbkJxQyxFQUE0QixTQUFXQSxFQUNuREMsRUFBZ0JoRixFQUFLMkMsU0FDckJBLE9BQTZCLElBQWxCcUMsRUFBMkIsV0FBYUEsRUFDbkRDLEVBQWlCakYsRUFBSzRDLFVBQ3RCQSxPQUErQixJQUFuQnFDLEVBQTRCLEVBQWtCQSxFQUMxRDdDLEVBQW1CcEMsRUFBS29DLGlCQUN4QkssRUFBZ0J6QyxFQUFLeUMsY0FDckJ5QyxFQUFXbEYsRUFBS2tGLFNBQ2hCakYsRUFBV0QsRUFBS0MsU0FDaEJFLEVBQWdCLGFBQWlCTixHQUVqQ0ssRUFBa0IsV0FBZSxNQUNqQ21DLEVBQWdCbkMsRUFBZ0IsR0FDaENpRixFQUFtQmpGLEVBQWdCLEdBRW5Da0YsRUFBbUIsV0FBZSxNQUNsQ0MsRUFBZUQsRUFBaUIsR0FDaENFLEVBQWtCRixFQUFpQixHQUV2QyxhQUFnQixXQUNkN0QsRUFBTzJELEVBQVU3QyxFQUNuQixHQUFHLENBQUM2QyxFQUFVN0MsSUFDZCxJQUFJQyxFQUFVLFdBQWMsV0FDMUIsTUFBTyxDQUNMSSxVQUFXQSxFQUNYQyxTQUFVQSxFQUNWRixjQUFlQSxFQUNmRyxVQUFXLEdBQUdzQixPQUFPdEIsRUFBVyxDQUFDLENBQy9CVyxLQUFNLFFBQ05DLFFBQXlCLE1BQWhCNkIsRUFDVC9DLFFBQVMsQ0FDUHdCLFFBQVN1QixNQUlqQixHQUFHLENBQUMzQyxFQUFXQyxFQUFVRixFQUFlRyxFQUFXeUMsSUFFL0NFLEVBQWFwRCxFQUFVQyxHQUFvQmpDLEVBQWVrQyxFQUFlQyxHQUN6RWMsRUFBUW1DLEVBQVduQyxNQUNuQlAsRUFBUzBDLEVBQVcxQyxPQUNwQjRCLEVBQWNjLEVBQVdkLFlBQ3pCRCxFQUFTZSxFQUFXZixPQUVwQmdCLEVBQWdCLFdBQWMsV0FDaEMsTUFBTyxDQUNMaEUsSUFBSzJELEVBQ0xNLE1BQU81QyxFQUFPQyxPQUNkSixVQUFXVSxFQUFRQSxFQUFNVixVQUFZQSxFQUNyQ2dELGlCQUFrQnRDLEdBQVNBLEVBQU11QyxjQUFjQyxLQUFPeEMsRUFBTXVDLGNBQWNDLEtBQUtGLGlCQUFtQixLQUNsR0csa0JBQW1CekMsR0FBU0EsRUFBTXVDLGNBQWNDLEtBQU94QyxFQUFNdUMsY0FBY0MsS0FBS0Msa0JBQW9CLEtBQ3BHQyxXQUFZLENBQ1ZMLE1BQU81QyxFQUFPSyxNQUNkMUIsSUFBSzhELEdBRVBiLFlBQWFBLEdBQWVDLEVBQzVCRixPQUFRQSxHQUFVRyxFQUV0QixHQUFHLENBQUNRLEVBQWtCRyxFQUFpQjVDLEVBQVdVLEVBQU9QLEVBQVEyQixFQUFRQyxJQUN6RSxPQUFPOUQsRUFBWVYsRUFBWlUsQ0FBc0I2RSxFQUMvQixDLHVCQ3ZFTyxTQUFTTyxFQUFVL0YsR0FDeEIsSUFBSUMsRUFBV0QsRUFBS0MsU0FDaEJpRixFQUFXbEYsRUFBS2tGLFNBQ2hCOUUsRUFBbUIsYUFBaUJOLEdBQ3BDa0csRUFBYSxlQUFrQixTQUFVeEYsR0FDM0NlLEVBQU8yRCxFQUFVMUUsR0FDakJPLEVBQVdYLEVBQWtCSSxFQUMvQixHQUFHLENBQUMwRSxFQUFVOUUsSUFXZCxPQVJBLGFBQWdCLFdBQ2QsT0FBTyxXQUNMLE9BQU9tQixFQUFPMkQsRUFBVSxLQUMxQixDQUNGLEdBQUcsSUFDSCxhQUFnQixXQUNkLElBQVFlLFFBQVE3RixHQUFtQixtRUFDckMsR0FBRyxDQUFDQSxJQUNHTyxFQUFZVixFQUFaVSxDQUFzQixDQUMzQmEsSUFBS3dFLEdBRVQsQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RyYWRlYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9wcGVyL2xpYi9lc20vTWFuYWdlci5qcyIsIndlYnBhY2s6Ly90cmFkZWFuYWx5emVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBvcHBlci9saWIvZXNtL3V0aWxzLmpzIiwid2VicGFjazovL3RyYWRlYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9wcGVyL2xpYi9lc20vdXNlUG9wcGVyLmpzIiwid2VicGFjazovL3RyYWRlYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9wcGVyL2xpYi9lc20vUG9wcGVyLmpzIiwid2VicGFjazovL3RyYWRlYW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9wcGVyL2xpYi9lc20vUmVmZXJlbmNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCB2YXIgTWFuYWdlclJlZmVyZW5jZU5vZGVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xuZXhwb3J0IHZhciBNYW5hZ2VyUmVmZXJlbmNlTm9kZVNldHRlckNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5leHBvcnQgZnVuY3Rpb24gTWFuYWdlcihfcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpLFxuICAgICAgcmVmZXJlbmNlTm9kZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldFJlZmVyZW5jZU5vZGUgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIGhhc1VubW91bnRlZCA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGhhc1VubW91bnRlZC5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHZhciBoYW5kbGVTZXRSZWZlcmVuY2VOb2RlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAoIWhhc1VubW91bnRlZC5jdXJyZW50KSB7XG4gICAgICBzZXRSZWZlcmVuY2VOb2RlKG5vZGUpO1xuICAgIH1cbiAgfSwgW10pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTWFuYWdlclJlZmVyZW5jZU5vZGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHJlZmVyZW5jZU5vZGVcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTWFuYWdlclJlZmVyZW5jZU5vZGVTZXR0ZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGhhbmRsZVNldFJlZmVyZW5jZU5vZGVcbiAgfSwgY2hpbGRyZW4pKTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogVGFrZXMgYW4gYXJndW1lbnQgYW5kIGlmIGl0J3MgYW4gYXJyYXksIHJldHVybnMgdGhlIGZpcnN0IGl0ZW0gaW4gdGhlIGFycmF5LFxuICogb3RoZXJ3aXNlIHJldHVybnMgdGhlIGFyZ3VtZW50LiBVc2VkIGZvciBQcmVhY3QgY29tcGF0aWJpbGl0eS5cbiAqL1xuZXhwb3J0IHZhciB1bndyYXBBcnJheSA9IGZ1bmN0aW9uIHVud3JhcEFycmF5KGFyZykge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpID8gYXJnWzBdIDogYXJnO1xufTtcbi8qKlxuICogVGFrZXMgYSBtYXliZS11bmRlZmluZWQgZnVuY3Rpb24gYW5kIGFyYml0cmFyeSBhcmdzIGFuZCBpbnZva2VzIHRoZSBmdW5jdGlvblxuICogb25seSBpZiBpdCBpcyBkZWZpbmVkLlxuICovXG5cbmV4cG9ydCB2YXIgc2FmZUludm9rZSA9IGZ1bmN0aW9uIHNhZmVJbnZva2UoZm4pIHtcbiAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBmbi5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICB9XG59O1xuLyoqXG4gKiBTZXRzIGEgcmVmIHVzaW5nIGVpdGhlciBhIHJlZiBjYWxsYmFjayBvciBhIHJlZiBvYmplY3RcbiAqL1xuXG5leHBvcnQgdmFyIHNldFJlZiA9IGZ1bmN0aW9uIHNldFJlZihyZWYsIG5vZGUpIHtcbiAgLy8gaWYgaXRzIGEgZnVuY3Rpb24gY2FsbCBpdFxuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBzYWZlSW52b2tlKHJlZiwgbm9kZSk7XG4gIH0gLy8gb3RoZXJ3aXNlIHdlIHNob3VsZCB0cmVhdCBpdCBhcyBhIHJlZiBvYmplY3RcbiAgZWxzZSBpZiAocmVmICE9IG51bGwpIHtcbiAgICAgIHJlZi5jdXJyZW50ID0gbm9kZTtcbiAgICB9XG59O1xuLyoqXG4gKiBTaW1wbGUgcG9ueWZpbGwgZm9yIE9iamVjdC5mcm9tRW50cmllc1xuICovXG5cbmV4cG9ydCB2YXIgZnJvbUVudHJpZXMgPSBmdW5jdGlvbiBmcm9tRW50cmllcyhlbnRyaWVzKSB7XG4gIHJldHVybiBlbnRyaWVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBfcmVmKSB7XG4gICAgdmFyIGtleSA9IF9yZWZbMF0sXG4gICAgICAgIHZhbHVlID0gX3JlZlsxXTtcbiAgICBhY2Nba2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn07XG4vKipcbiAqIFNtYWxsIHdyYXBwZXIgYXJvdW5kIGB1c2VMYXlvdXRFZmZlY3RgIHRvIGdldCByaWQgb2YgdGhlIHdhcm5pbmcgb24gU1NSIGVudnNcbiAqL1xuXG5leHBvcnQgdmFyIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IGNyZWF0ZVBvcHBlciBhcyBkZWZhdWx0Q3JlYXRlUG9wcGVyIH0gZnJvbSAnQHBvcHBlcmpzL2NvcmUnO1xuaW1wb3J0IGlzRXF1YWwgZnJvbSAncmVhY3QtZmFzdC1jb21wYXJlJztcbmltcG9ydCB7IGZyb21FbnRyaWVzLCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi91dGlscyc7XG52YXIgRU1QVFlfTU9ESUZJRVJTID0gW107XG5leHBvcnQgdmFyIHVzZVBvcHBlciA9IGZ1bmN0aW9uIHVzZVBvcHBlcihyZWZlcmVuY2VFbGVtZW50LCBwb3BwZXJFbGVtZW50LCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgcHJldk9wdGlvbnMgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBvcHRpb25zV2l0aERlZmF1bHRzID0ge1xuICAgIG9uRmlyc3RVcGRhdGU6IG9wdGlvbnMub25GaXJzdFVwZGF0ZSxcbiAgICBwbGFjZW1lbnQ6IG9wdGlvbnMucGxhY2VtZW50IHx8ICdib3R0b20nLFxuICAgIHN0cmF0ZWd5OiBvcHRpb25zLnN0cmF0ZWd5IHx8ICdhYnNvbHV0ZScsXG4gICAgbW9kaWZpZXJzOiBvcHRpb25zLm1vZGlmaWVycyB8fCBFTVBUWV9NT0RJRklFUlNcbiAgfTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIHN0eWxlczoge1xuICAgICAgcG9wcGVyOiB7XG4gICAgICAgIHBvc2l0aW9uOiBvcHRpb25zV2l0aERlZmF1bHRzLnN0cmF0ZWd5LFxuICAgICAgICBsZWZ0OiAnMCcsXG4gICAgICAgIHRvcDogJzAnXG4gICAgICB9LFxuICAgICAgYXJyb3c6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICAgIH1cbiAgICB9LFxuICAgIGF0dHJpYnV0ZXM6IHt9XG4gIH0pLFxuICAgICAgc3RhdGUgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgdXBkYXRlU3RhdGVNb2RpZmllciA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiAndXBkYXRlU3RhdGUnLFxuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIHBoYXNlOiAnd3JpdGUnLFxuICAgICAgZm46IGZ1bmN0aW9uIGZuKF9yZWYpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZTtcbiAgICAgICAgdmFyIGVsZW1lbnRzID0gT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpO1xuICAgICAgICBSZWFjdERPTS5mbHVzaFN5bmMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIHN0eWxlczogZnJvbUVudHJpZXMoZWxlbWVudHMubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiBbZWxlbWVudCwgc3RhdGUuc3R5bGVzW2VsZW1lbnRdIHx8IHt9XTtcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGZyb21FbnRyaWVzKGVsZW1lbnRzLm1hcChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gW2VsZW1lbnQsIHN0YXRlLmF0dHJpYnV0ZXNbZWxlbWVudF1dO1xuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHJlcXVpcmVzOiBbJ2NvbXB1dGVTdHlsZXMnXVxuICAgIH07XG4gIH0sIFtdKTtcbiAgdmFyIHBvcHBlck9wdGlvbnMgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbmV3T3B0aW9ucyA9IHtcbiAgICAgIG9uRmlyc3RVcGRhdGU6IG9wdGlvbnNXaXRoRGVmYXVsdHMub25GaXJzdFVwZGF0ZSxcbiAgICAgIHBsYWNlbWVudDogb3B0aW9uc1dpdGhEZWZhdWx0cy5wbGFjZW1lbnQsXG4gICAgICBzdHJhdGVneTogb3B0aW9uc1dpdGhEZWZhdWx0cy5zdHJhdGVneSxcbiAgICAgIG1vZGlmaWVyczogW10uY29uY2F0KG9wdGlvbnNXaXRoRGVmYXVsdHMubW9kaWZpZXJzLCBbdXBkYXRlU3RhdGVNb2RpZmllciwge1xuICAgICAgICBuYW1lOiAnYXBwbHlTdHlsZXMnLFxuICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgfV0pXG4gICAgfTtcblxuICAgIGlmIChpc0VxdWFsKHByZXZPcHRpb25zLmN1cnJlbnQsIG5ld09wdGlvbnMpKSB7XG4gICAgICByZXR1cm4gcHJldk9wdGlvbnMuY3VycmVudCB8fCBuZXdPcHRpb25zO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmV2T3B0aW9ucy5jdXJyZW50ID0gbmV3T3B0aW9ucztcbiAgICAgIHJldHVybiBuZXdPcHRpb25zO1xuICAgIH1cbiAgfSwgW29wdGlvbnNXaXRoRGVmYXVsdHMub25GaXJzdFVwZGF0ZSwgb3B0aW9uc1dpdGhEZWZhdWx0cy5wbGFjZW1lbnQsIG9wdGlvbnNXaXRoRGVmYXVsdHMuc3RyYXRlZ3ksIG9wdGlvbnNXaXRoRGVmYXVsdHMubW9kaWZpZXJzLCB1cGRhdGVTdGF0ZU1vZGlmaWVyXSk7XG4gIHZhciBwb3BwZXJJbnN0YW5jZVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocG9wcGVySW5zdGFuY2VSZWYuY3VycmVudCkge1xuICAgICAgcG9wcGVySW5zdGFuY2VSZWYuY3VycmVudC5zZXRPcHRpb25zKHBvcHBlck9wdGlvbnMpO1xuICAgIH1cbiAgfSwgW3BvcHBlck9wdGlvbnNdKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJlZmVyZW5jZUVsZW1lbnQgPT0gbnVsbCB8fCBwb3BwZXJFbGVtZW50ID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY3JlYXRlUG9wcGVyID0gb3B0aW9ucy5jcmVhdGVQb3BwZXIgfHwgZGVmYXVsdENyZWF0ZVBvcHBlcjtcbiAgICB2YXIgcG9wcGVySW5zdGFuY2UgPSBjcmVhdGVQb3BwZXIocmVmZXJlbmNlRWxlbWVudCwgcG9wcGVyRWxlbWVudCwgcG9wcGVyT3B0aW9ucyk7XG4gICAgcG9wcGVySW5zdGFuY2VSZWYuY3VycmVudCA9IHBvcHBlckluc3RhbmNlO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBwb3BwZXJJbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgICBwb3BwZXJJbnN0YW5jZVJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICB9O1xuICB9LCBbcmVmZXJlbmNlRWxlbWVudCwgcG9wcGVyRWxlbWVudCwgb3B0aW9ucy5jcmVhdGVQb3BwZXJdKTtcbiAgcmV0dXJuIHtcbiAgICBzdGF0ZTogcG9wcGVySW5zdGFuY2VSZWYuY3VycmVudCA/IHBvcHBlckluc3RhbmNlUmVmLmN1cnJlbnQuc3RhdGUgOiBudWxsLFxuICAgIHN0eWxlczogc3RhdGUuc3R5bGVzLFxuICAgIGF0dHJpYnV0ZXM6IHN0YXRlLmF0dHJpYnV0ZXMsXG4gICAgdXBkYXRlOiBwb3BwZXJJbnN0YW5jZVJlZi5jdXJyZW50ID8gcG9wcGVySW5zdGFuY2VSZWYuY3VycmVudC51cGRhdGUgOiBudWxsLFxuICAgIGZvcmNlVXBkYXRlOiBwb3BwZXJJbnN0YW5jZVJlZi5jdXJyZW50ID8gcG9wcGVySW5zdGFuY2VSZWYuY3VycmVudC5mb3JjZVVwZGF0ZSA6IG51bGxcbiAgfTtcbn07IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTWFuYWdlclJlZmVyZW5jZU5vZGVDb250ZXh0IH0gZnJvbSAnLi9NYW5hZ2VyJztcbmltcG9ydCB7IHVud3JhcEFycmF5LCBzZXRSZWYgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IHVzZVBvcHBlciB9IGZyb20gJy4vdXNlUG9wcGVyJztcblxudmFyIE5PT1AgPSBmdW5jdGlvbiBOT09QKCkge1xuICByZXR1cm4gdm9pZCAwO1xufTtcblxudmFyIE5PT1BfUFJPTUlTRSA9IGZ1bmN0aW9uIE5PT1BfUFJPTUlTRSgpIHtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbn07XG5cbnZhciBFTVBUWV9NT0RJRklFUlMgPSBbXTtcbmV4cG9ydCBmdW5jdGlvbiBQb3BwZXIoX3JlZikge1xuICB2YXIgX3JlZiRwbGFjZW1lbnQgPSBfcmVmLnBsYWNlbWVudCxcbiAgICAgIHBsYWNlbWVudCA9IF9yZWYkcGxhY2VtZW50ID09PSB2b2lkIDAgPyAnYm90dG9tJyA6IF9yZWYkcGxhY2VtZW50LFxuICAgICAgX3JlZiRzdHJhdGVneSA9IF9yZWYuc3RyYXRlZ3ksXG4gICAgICBzdHJhdGVneSA9IF9yZWYkc3RyYXRlZ3kgPT09IHZvaWQgMCA/ICdhYnNvbHV0ZScgOiBfcmVmJHN0cmF0ZWd5LFxuICAgICAgX3JlZiRtb2RpZmllcnMgPSBfcmVmLm1vZGlmaWVycyxcbiAgICAgIG1vZGlmaWVycyA9IF9yZWYkbW9kaWZpZXJzID09PSB2b2lkIDAgPyBFTVBUWV9NT0RJRklFUlMgOiBfcmVmJG1vZGlmaWVycyxcbiAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSBfcmVmLnJlZmVyZW5jZUVsZW1lbnQsXG4gICAgICBvbkZpcnN0VXBkYXRlID0gX3JlZi5vbkZpcnN0VXBkYXRlLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgcmVmZXJlbmNlTm9kZSA9IFJlYWN0LnVzZUNvbnRleHQoTWFuYWdlclJlZmVyZW5jZU5vZGVDb250ZXh0KTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUobnVsbCksXG4gICAgICBwb3BwZXJFbGVtZW50ID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0UG9wcGVyRWxlbWVudCA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMiA9IFJlYWN0LnVzZVN0YXRlKG51bGwpLFxuICAgICAgYXJyb3dFbGVtZW50ID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldEFycm93RWxlbWVudCA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBzZXRSZWYoaW5uZXJSZWYsIHBvcHBlckVsZW1lbnQpO1xuICB9LCBbaW5uZXJSZWYsIHBvcHBlckVsZW1lbnRdKTtcbiAgdmFyIG9wdGlvbnMgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBzdHJhdGVneTogc3RyYXRlZ3ksXG4gICAgICBvbkZpcnN0VXBkYXRlOiBvbkZpcnN0VXBkYXRlLFxuICAgICAgbW9kaWZpZXJzOiBbXS5jb25jYXQobW9kaWZpZXJzLCBbe1xuICAgICAgICBuYW1lOiAnYXJyb3cnLFxuICAgICAgICBlbmFibGVkOiBhcnJvd0VsZW1lbnQgIT0gbnVsbCxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGVsZW1lbnQ6IGFycm93RWxlbWVudFxuICAgICAgICB9XG4gICAgICB9XSlcbiAgICB9O1xuICB9LCBbcGxhY2VtZW50LCBzdHJhdGVneSwgb25GaXJzdFVwZGF0ZSwgbW9kaWZpZXJzLCBhcnJvd0VsZW1lbnRdKTtcblxuICB2YXIgX3VzZVBvcHBlciA9IHVzZVBvcHBlcihyZWZlcmVuY2VFbGVtZW50IHx8IHJlZmVyZW5jZU5vZGUsIHBvcHBlckVsZW1lbnQsIG9wdGlvbnMpLFxuICAgICAgc3RhdGUgPSBfdXNlUG9wcGVyLnN0YXRlLFxuICAgICAgc3R5bGVzID0gX3VzZVBvcHBlci5zdHlsZXMsXG4gICAgICBmb3JjZVVwZGF0ZSA9IF91c2VQb3BwZXIuZm9yY2VVcGRhdGUsXG4gICAgICB1cGRhdGUgPSBfdXNlUG9wcGVyLnVwZGF0ZTtcblxuICB2YXIgY2hpbGRyZW5Qcm9wcyA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZWY6IHNldFBvcHBlckVsZW1lbnQsXG4gICAgICBzdHlsZTogc3R5bGVzLnBvcHBlcixcbiAgICAgIHBsYWNlbWVudDogc3RhdGUgPyBzdGF0ZS5wbGFjZW1lbnQgOiBwbGFjZW1lbnQsXG4gICAgICBoYXNQb3BwZXJFc2NhcGVkOiBzdGF0ZSAmJiBzdGF0ZS5tb2RpZmllcnNEYXRhLmhpZGUgPyBzdGF0ZS5tb2RpZmllcnNEYXRhLmhpZGUuaGFzUG9wcGVyRXNjYXBlZCA6IG51bGwsXG4gICAgICBpc1JlZmVyZW5jZUhpZGRlbjogc3RhdGUgJiYgc3RhdGUubW9kaWZpZXJzRGF0YS5oaWRlID8gc3RhdGUubW9kaWZpZXJzRGF0YS5oaWRlLmlzUmVmZXJlbmNlSGlkZGVuIDogbnVsbCxcbiAgICAgIGFycm93UHJvcHM6IHtcbiAgICAgICAgc3R5bGU6IHN0eWxlcy5hcnJvdyxcbiAgICAgICAgcmVmOiBzZXRBcnJvd0VsZW1lbnRcbiAgICAgIH0sXG4gICAgICBmb3JjZVVwZGF0ZTogZm9yY2VVcGRhdGUgfHwgTk9PUCxcbiAgICAgIHVwZGF0ZTogdXBkYXRlIHx8IE5PT1BfUFJPTUlTRVxuICAgIH07XG4gIH0sIFtzZXRQb3BwZXJFbGVtZW50LCBzZXRBcnJvd0VsZW1lbnQsIHBsYWNlbWVudCwgc3RhdGUsIHN0eWxlcywgdXBkYXRlLCBmb3JjZVVwZGF0ZV0pO1xuICByZXR1cm4gdW53cmFwQXJyYXkoY2hpbGRyZW4pKGNoaWxkcmVuUHJvcHMpO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IHsgTWFuYWdlclJlZmVyZW5jZU5vZGVTZXR0ZXJDb250ZXh0IH0gZnJvbSAnLi9NYW5hZ2VyJztcbmltcG9ydCB7IHNhZmVJbnZva2UsIHVud3JhcEFycmF5LCBzZXRSZWYgfSBmcm9tICcuL3V0aWxzJztcbmV4cG9ydCBmdW5jdGlvbiBSZWZlcmVuY2UoX3JlZikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmO1xuICB2YXIgc2V0UmVmZXJlbmNlTm9kZSA9IFJlYWN0LnVzZUNvbnRleHQoTWFuYWdlclJlZmVyZW5jZU5vZGVTZXR0ZXJDb250ZXh0KTtcbiAgdmFyIHJlZkhhbmRsZXIgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAobm9kZSkge1xuICAgIHNldFJlZihpbm5lclJlZiwgbm9kZSk7XG4gICAgc2FmZUludm9rZShzZXRSZWZlcmVuY2VOb2RlLCBub2RlKTtcbiAgfSwgW2lubmVyUmVmLCBzZXRSZWZlcmVuY2VOb2RlXSk7IC8vIHJhbiBvbiB1bm1vdW50XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc2V0UmVmKGlubmVyUmVmLCBudWxsKTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgd2FybmluZyhCb29sZWFuKHNldFJlZmVyZW5jZU5vZGUpLCAnYFJlZmVyZW5jZWAgc2hvdWxkIG5vdCBiZSB1c2VkIG91dHNpZGUgb2YgYSBgTWFuYWdlcmAgY29tcG9uZW50LicpO1xuICB9LCBbc2V0UmVmZXJlbmNlTm9kZV0pO1xuICByZXR1cm4gdW53cmFwQXJyYXkoY2hpbGRyZW4pKHtcbiAgICByZWY6IHJlZkhhbmRsZXJcbiAgfSk7XG59Il0sIm5hbWVzIjpbIk1hbmFnZXJSZWZlcmVuY2VOb2RlQ29udGV4dCIsIk1hbmFnZXJSZWZlcmVuY2VOb2RlU2V0dGVyQ29udGV4dCIsIk1hbmFnZXIiLCJfcmVmIiwiY2hpbGRyZW4iLCJfUmVhY3QkdXNlU3RhdGUiLCJyZWZlcmVuY2VOb2RlIiwic2V0UmVmZXJlbmNlTm9kZSIsImhhc1VubW91bnRlZCIsImN1cnJlbnQiLCJoYW5kbGVTZXRSZWZlcmVuY2VOb2RlIiwibm9kZSIsIlByb3ZpZGVyIiwidmFsdWUiLCJ1bndyYXBBcnJheSIsImFyZyIsIkFycmF5IiwiaXNBcnJheSIsInNhZmVJbnZva2UiLCJmbiIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiX2tleSIsImFwcGx5Iiwic2V0UmVmIiwicmVmIiwiZnJvbUVudHJpZXMiLCJlbnRyaWVzIiwicmVkdWNlIiwiYWNjIiwia2V5IiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsIndpbmRvdyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIkVNUFRZX01PRElGSUVSUyIsInVzZVBvcHBlciIsInJlZmVyZW5jZUVsZW1lbnQiLCJwb3BwZXJFbGVtZW50Iiwib3B0aW9ucyIsInByZXZPcHRpb25zIiwib3B0aW9uc1dpdGhEZWZhdWx0cyIsIm9uRmlyc3RVcGRhdGUiLCJwbGFjZW1lbnQiLCJzdHJhdGVneSIsIm1vZGlmaWVycyIsInN0eWxlcyIsInBvcHBlciIsInBvc2l0aW9uIiwibGVmdCIsInRvcCIsImFycm93IiwiYXR0cmlidXRlcyIsInN0YXRlIiwic2V0U3RhdGUiLCJ1cGRhdGVTdGF0ZU1vZGlmaWVyIiwibmFtZSIsImVuYWJsZWQiLCJwaGFzZSIsImVsZW1lbnRzIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImVsZW1lbnQiLCJyZXF1aXJlcyIsInBvcHBlck9wdGlvbnMiLCJuZXdPcHRpb25zIiwiY29uY2F0IiwicG9wcGVySW5zdGFuY2VSZWYiLCJzZXRPcHRpb25zIiwicG9wcGVySW5zdGFuY2UiLCJjcmVhdGVQb3BwZXIiLCJkZXN0cm95IiwidXBkYXRlIiwiZm9yY2VVcGRhdGUiLCJOT09QIiwiTk9PUF9QUk9NSVNFIiwiUHJvbWlzZSIsInJlc29sdmUiLCJQb3BwZXIiLCJfcmVmJHBsYWNlbWVudCIsIl9yZWYkc3RyYXRlZ3kiLCJfcmVmJG1vZGlmaWVycyIsImlubmVyUmVmIiwic2V0UG9wcGVyRWxlbWVudCIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJhcnJvd0VsZW1lbnQiLCJzZXRBcnJvd0VsZW1lbnQiLCJfdXNlUG9wcGVyIiwiY2hpbGRyZW5Qcm9wcyIsInN0eWxlIiwiaGFzUG9wcGVyRXNjYXBlZCIsIm1vZGlmaWVyc0RhdGEiLCJoaWRlIiwiaXNSZWZlcmVuY2VIaWRkZW4iLCJhcnJvd1Byb3BzIiwiUmVmZXJlbmNlIiwicmVmSGFuZGxlciIsIkJvb2xlYW4iXSwic291cmNlUm9vdCI6IiJ9